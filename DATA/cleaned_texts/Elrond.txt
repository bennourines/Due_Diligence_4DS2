1 elrond highly scalable public blockchain adaptive state sharding secure proof stake technical whitepaper release 2 revision 1 updated chapters 5 13 june 19 2019 elrond team https www elrond com abstract advent secure public blockchains bitcoin later ethereum brought forth notable degree interest capital influx providing premise global wave permissionless innovation despite lofty promises creating decentralized secure scalable public blockchain proved strenuous task paper proposes elrond novel architecture goes state art introducing genuine state sharding scheme practical scalability eliminating energy computational waste ensuring distributed fairness secure proof stake spos consensus having strong focus security elrond s network built ensure resistance known security problems like sybil attack stake attack ecosystem strives interconnectivity solution smart contracts offers evm compliant engine ensure interoperability design preliminary simulations testnet results reflect elrond exceeds visa s average throughput achieves improvement orders magnitude 1000x compared existing viable approaches drastically reducing costs bootstrapping storage ensure long term sustainability introduction 1 general aspects cryptocurrency smart contract platforms bitcoin ethereum sparked considerable interest promising solutions electronic payments decentralized applications potential digital stores value compared centralized counterparts key metrics 1 current state affairs suggests present public blockchain iterations exhibit severe limitations particularly respect scalability hindering mainstream adoption delaying public use fact proved extremely challenging deal current engineering boundaries imposed trade offs blockchain trilemma paradigm 2 solutions proposed shown significant viable results order solve scalability problem complete rethinking public blockchain infrastructures required 2 defining challenges challenges addressed properly process creating innovative public blockchain solution designed scale decentralization eliminating need trusted party removing single point failure robust security allowing secure transactions preventing attacks based known attack vectors high scalability enabling network achieve performance equal centralized counterpart measured tps efficiency performing network services minimal energy computational requirements bootstrapping storage enhancement ensuring competitive cost data storage synchronization cross chain interoperability enforced design permitting unlimited communication external services starting challenges ve created elrond complete rethinking public blockchain infrastructure specifically designed secure efficient scalable interoperable elrond s main contribution rests cornerstone building blocks 1 genuine state sharding approach effectively partitioning blockchain account state multiple shards handled parallel different participating validators 2 secure proof stake consensus mechanism improved variation proof stake pos ensures long term security distributed fairness eliminating need energy intensive pow algorithms 3 adaptive state sharding elrond proposes dynamically adaptive sharding mechanism enables shard computation reorganizing based necessity number active network nodes reassignment nodes shards beginning epoch progressive nondeterministic inducing temporary liveness penalties adaptive state sharding comes additional challenges compared static model key points resides shard splitting shardmerging prevent overall latency penalties introduced synchronization communication needs shard number changes latency case communication overhead required nodes order retrieve new state shard address space assignment modified 2 elrond proposes solution problem notions defined users nodes users external actors identified unique account address nodes computers devices elrond network run protocol notions like users nodes addresses described chapter ii 1 entities elrond solves challenge 1 dividing account address space shards binary tree built sole requirement knowing exact number shards certain epoch method accumulated latency reduced network liveness improved ways thanks designed model dividing account address space predetermined hierarchy split overhead meaning shard breaks shards keeping half previous address space addition associated state second latency reduced state redundancy mechanism merge prepared retaining state sibling nodes 2 introducing technique balancing nodes shard achieve overall architecture equilibrium technique ensures balanced workload reward node network 3 designing built mechanism automatic transaction routing corresponding shards considerably reduces latency result routing algorithm described chapter iv 4 elrond sharding approach 4 order achieve considerable improvements respect bootstrapping storage elrond makes use shard pruning mechanism ensures sustainability architecture throughput tens thousands transactions second tps 4 secure proof stake spos introduce secure proof stake consensus mechanism expands algorand s 3 idea random selection mechanism differentiating following aspects 1 elrond introduces improvement reduces latency allowing node shard determine members consensus group block proposer validators beginning round possible randomization factor r stored block created block proposer bls signature 4 previous r 2 block proposer validator consensus group s hash public key randomization factor smallest contrast algorand s 3 approach random committee selection 12 seconds elrond time necessary random selection consensus group considerably reduced estimated 100 ms excluding network latency communication requirement random selection process enables elrond newly randomly selected group succeeds committing new block ledger round tradeoff enhancement relies premise adversary adapt faster round s time frame choose propose block improvement security randomness source use verifiable delay functions vdfs order prevent tampering possibilities randomness source late currently research vdfs ongoing working poorly tested vdf implementations 3 addition stake factor generally pos architectures sole decision input elrond refines consensus mechanism adding additional weight factor called rating node s probability selected consensus group takes consideration stake rating rating block proposer recalculated end epoch cases slashing occur actual rating decrease instantly adding layer security promoting meritocracy 4 modified bls multisignature scheme 5 2 communication rounds consensus group block signing 5 elrond considers formal verification critical protocol implementations e g spos consensus mechanism order validate correctness algorithms ii architecture overview 1 entities main entities elrond users nodes users holding finite number public private pk sk key pairs e g multiple wallet apps use elrond network deploy signed transactions value transfers smart contracts execution identified account addresses derived public key nodes represented devices form elrond network passive actively engaged processing tasks eligible validators active participants elrond s network specifically responsible running consensus adding blocks maintaining state rewarded contribution eligible validator uniquely identified public key constructed derivation address staked necessary fig 1 relations elrond entities 3 node id relations entities elrond protocol shown fig 1 furthermore network divided smaller units called shards eligible validator assigned shard based algorithm keeps nodes evenly distributed shards depending tree level shard contains randomly selected consensus group block proposer responsible aggregate transactions new block validators responsible reject approve proposed block validating committing blockchain 2 intrinsic token elrond grants access usage network intrinsic utility tokens called elronds short erds costs processing transactions running smart contracts rewards contributions network paid erds references fees payments balances assumed erds 3 threat model elrond assumes byzantine adversarial model 2 3n 1 eligible nodes shard honest protocol permits existence adversaries stake good rating delay send conflicting messages compromise nodes bugs collude long 2 3n 1 eligible validators shard honest compromised protocol achieve consensus protocol assumes highly adaptive adversaries adapt faster round s timeframe computational power adversary bounded cryptographic assumptions granted security level chosen primitives hold firmly complexity class problems solvable turing machine polynomial time network honest nodes assumed form connected graph propagation messages bounded time attack vectors prevention 1 sybil attacks mitigated stake locking joining network way generation new identities cost equal minimum stake 2 stake removed need multiple signatures proposer stake slashing reward block compared stake locked discourage behavior 3 long range attacks mitigated pruning mechanism use randomly selected consensus group round single proposer stake locking pbft consensus algorithm ensures finality 4 ddos attacks consensus group randomly sampled round seconds small time frame making ddos impossible attack vectors taken consideration shard takeover attack transaction censorship double spend bribery attacks etc 4 chronology elrond s network timeline split epochs rounds epochs fixed duration set day modified architecture evolves end shards reorganization pruning triggered epochs divided rounds lasting fixed timeframe new consensus group randomly selected shard round commit maximum block shard s ledger new validators join network locking stake presented chapter v 2 secure proof stake added unassigned node pool current epoch e assigned waiting list shard beginning epoch e 1 eligible validators participate consensus rewarded epoch e 2 timeline aspects detailed section ix 1 iii related work elrond designed inspired ideas ethereum 6 omniledger 7 zilliqa 8 algorand 3 chainspace 9 architecture goes state art seen augmentation existing models improving performance focusing achieve better nash equilibrium state security scalability decentralization 1 ethereum ethereum s 6 success attributed introduction decentralized applications layer evm 10 solidity 11 web3j 12 dapps core features ethereum scalability proved pressing limitation considerable research solving problem results negligible point promising improvements proposed casper 13 prepares update replace current proof work pow consensus proof stake pos plasma based chains sharding expected available near future alleviating ethereum s scalability problem partially 14 compared ethereum elrond eliminates energy computational waste pow algorithms implementing spos consensus transaction processing parallelism sharding 2 omniledger omniledger 7 proposes novel scale distributed ledger preserves long term security permission operation ensures security correctness biasresistant public randomness protocol choosing large statistically representative shards process transactions commit transactions atomically shards omniledger introduces atomix efficient cross shard commit protocol concept phase client driven lock unlock protocol ensures nodes fully commit transaction shards obtain rejection proofs abort unlock 4 state affected partially completed transactions omniledger optimizes performance parallel intra shard transaction processing ledger pruning collectively signed state blocks low latency trust verify validation low value transactions consensus omniledger bft variation named byzcoinx increases performance robustness dos attacks compared omniledger elrond adaptive approach state sharding faster random selection consensus group improved security replacing validators set round seconds epoch 1 day 3 zilliqa zilliqa 8 transaction sharding architecture allows mining network process transactions parallel reach high throughput dividing mining network shards specifically design allows higher transaction rate nodes joining network key ensure shards process different transactions overlaps double spending zilliqa uses pbft 15 consensus pow establish identities prevent sybil attacks compared zilliqa elrond pushes limits sharding transaction sharding state sharding elrond completely eliminates pow mechanism uses spos consensus architectures building smart contract engine elrond aims evm compliance sc written ethereum run seamlessly vm aims achieve interoperability blockchains 4 algorand algorand 3 proposes public ledger keeps convenience efficiency centralized systems inefficiencies weaknesses current decentralized implementations leader set verifiers randomly chosen based signature applied block s quantity value selections immune manipulations unpredictable moment consensus relies novel message passing byzantine agreement enables community protocol evolve hard forks compared algorand elrond doesn t single blockchain instead increases transaction s throughput sharding elrond improves algorand s idea random selection reducing selection time consensus group 12 seconds second assumes adversaries adapt round 5 chainspace chainspace 9 distributed ledger platform high integrity transparent processing transactions uses language agnostic privacy friendly smart contracts extensibility sharded architecture allows linearly scalable transaction processing throughput s bac novel distributed atomic commit protocol guarantees consistency offers high auditability privacy features implemented modern zero knowledge techniques consensus ensured bft compared chainspace tps decreases node added shard elrond s approach influenced number nodes shard consensus group fixed size strong point chainspace approach language agnostic smart contracts elrond focuses building abstraction layer evm compliance projects use different approaches state sharding enhance performance elrond goes step anticipating blockchain size problem high throughput architectures uses efficient pruning mechanism elrond exhibits higher resistance sudden changes node population malicious shard takeover introducing shard redundancy new feature sharded blockchains iv scalability adaptive state sharding 1 sharding sharding databases method distributing data multiple machines scaling technique blockchains partition states transaction processing node process fraction transactions parallel nodes long sufficient number nodes verifying transaction system maintains high reliability security splitting blockchain shards allow process transactions parallel greatly improving transaction throughput efficiency sharding promises increase throughput validator network expands property referred horizontal scaling 2 sharding types comprehensive thorough introduction 16 emphasizes main types sharding network sharding transaction sharding state sharding network sharding handles way nodes grouped shards optimize communication message propagation inside shard faster propagation entire network challenge sharding approach mechanism maps nodes shards consideration possible attacks attacker gains control specific shard transaction sharding handles way transactions mapped shards processed account based system transactions assigned shards based sender s address state sharding challenging approach contrast previously described sharding mechanisms nodes store entire state statesharded blockchains shard maintains portion state transaction handling accounts different shards need exchange messages update states different shards order increase resiliency malicious attacks nodes shards reshuffled time time moving nodes shards 5 introduces synchronization overheads time taken newly added nodes download latest state imperative subset nodes redistributed epoch prevent times synchronization process 3 sharding directions sharding proposals attempt shard transactions 8 shard state 17 increases transaction s throughput forcing node store lots state data supercomputer 2 recently claim successfully performing transaction state sharding compromising storage processing power 13 sharding introduces new challenges like singleshard takeover attack cross shard communication data availability need abstraction layer hides shards conditional fact problems addressed correctly state sharding brings considerable overall improvements transaction throughput increase significantly parallel transaction processing transaction fees considerably reduced main criterias widely considered obstacles transforming advantages incentives mainstream adoption blockchain technology 4 elrond sharding approach dealing complexity combining network transaction state sharding elrond s approach designed following goals mind 1 scalability affecting availability increasing decreasing number shards affect negligibly small vicinity nodes causing downtimes minimizing updating states 2 dispatching instant traceability finding destination shard transaction deterministic trivial calculate eliminating need communication rounds 3 efficiency adaptability shards balanced possible given time method description calculate optimum number shards nsh epoch ei 1 nsh 1 defined threshold coefficient number transactions block tx variable optn represents optimal number nodes shard sh positive number represents number nodes shard vary totalni total number nodes eligible validators nodes waiting lists newly added nodes node pool shards epoch ei ntxb average number transactions block shards epoch ei nsh 0 considered 1 total number shards nsh 1 change number nodes totalni network changes blockchain utilization needs number nodes increases threshold nsplit epoch average number transactions block greater threshold number transactions block ntxb tx number nodes decreases threshold nmerge shown function computeshardsn 1 function computeshardsn totalni 1 nsh 2 nsplit nsh 1 optn sh 3 nmerge nsh 1 4 nsh 1 nsh 5 totalni 1 nsplit ntxb tx 6 nsh 1 totalni 1 optn sh 7 totalni 1 nmerge 8 nsh 1 totalni 1 optn 9 return nsh 1 epoch probability number active nodes changes aspect influences number shards calculate masks m1 m2 transaction dispatching 1 function computem1andm2 nsh 2 n math ceil log2nsh 3 m1 1 n 1 4 m2 1 n 1 1 5 return m1 m2 main goal increase throughput thousands transactions second diminish crossshard communication elrond proposes dispatching mechanism determines automatically shards involved current transaction routes transaction accordingly dispatcher consideration account address addr transaction sender receiver result number shard shard transaction dispatched 1 function computeshard nsh addr m1 m2 2 shard addr m1 3 shard nsh 4 shard addr m2 5 return shard entire sharding scheme based binary tree structure distributes account addresses favors scalability deals state transitions representation tree seen fig 2 presented tree structure merely logical representation account address space deterministic mapping e g shard allocation sibling computation etc leaves binary tree represent shards id number starting root node shard 0 shard leaf account addresses mapped transactions executed formula nsh dictates necessity 2 shards b address space split equal parts according bits address tree unbalanced c nsh power 2 case affects leaves 6 fig 2 example sharding tree structure level structure balanced number shards reaches power 2 unbalancing binary tree causes shards located lowest level half address space nodes shard located level higher argued active nodes allocated shards lower fee income block rewards affected problem solved having shard nodes redistributed randomly epoch detailed chronology section having balanced distribution nodes according tree level looking tree starting leaf going branches root encoding branches represents n bits account addresses associated originating transactions processed leaf shard going way root leaf information related evolution structure sibling shards parent shard split hierarchy shard split nsh increases shards merge nsh decreases easily calculated entire state sharding mechanism benefits structure keeping address associated state shard knowing nsh node follow redistribution process need communication allocation id s new shards incremental reducing number shards involves higher numbered shards removed example going nsh nsh 1 shards merged shard removed highest numbered shard shmerge nsh 1 finding shard number shmerge merged trivial according tree structure resulting shard sibling s number 1 function computesibling shmerge n 2 sibling shmerge xor 1 n 1 3 return sibling shard redundancy traceability state transitions fast scaling important determine sibling parent generic shard number p 1 function computeparentsiblings n p nsh 2 mask1 1 n 1 3 mask2 1 n 2 4 sibling p xor mask1 5 parent min p sibling 6 sibling nsh 7 sibling p xor mask2 8 sibling2 sibling xor mask1 9 parent min p sibling 10 sibling2 nsh sibling shard 11 return parent sibling null 12 13 sibling subtree 14 shards sibling sibling2 15 return parent sibling sibling2 16 sibling shard 17 return parent sibling null shard redundancy blockchain state sharding susceptible shard failure insufficient number online nodes shard distribution localized geographically unlikely case shard fails shard contacted nodes offline consensus reached 1 3 nodes responding high risk entire architecture relies superfull nodes 2 fully download block shard fully verifying displayed fig 3 protocol protection mechanism introduces tradeoff state holding structure enforcing shards tree level hold state siblings mechanism reduces communication eliminates bootstrapping sibling shards merging data context switching preserve security sharded public blockchains context switching crucial 7 refers reallocation active nodes shards fixed time interval random criteria elrond s approach context switching represents security improvement increases complexity required maintain consistency multiple states state transition biggest 7 fig 3 shard redundancy epochs footprint performance movement active nodes requires resync state blockchain transactions alongside eligible nodes new shard start epoch order maintain liveness 1 3 nodes uniformly distributed shards mechanism highly effective forming malicious groups 5 notarization meta chain network global data operations node joining network node leaving network eligible validator lists computation nodes assignment shard s waiting lists consensus agreement block specific shard challenges invalid blocks notarized metachain metachain consensus run different shard communicates shards facilitates cross shard operations round epoch metachain receives block headers shards necessary proofs challenges invalid blocks information aggregated blocks metachain consensus run blocks validated consensus group shards request information blocks miniblocks chapter vii eligible validators nodes waiting lists etc order securely process cross shard transactions details cross shard transaction execution communication shards metachain presented chapter vii cross shard transaction processing v consensus secure proof stake 1 consensus analysis blockchain consensus algorithm based proof work pow bitcoin ethereum blockchain platforms proof work node required solve mathematical puzzle hard calculate easy verify node finishes puzzle collect reward 18 proof work mechanisms successfully prevent double spending ddos sybil attacks cost high energy consumption proof stake pos novel efficient consensus mechanism proposed alternative intensive energy computational use proof work consensus mechanisms pos found new architectures like cardano 19 algorand 3 version ethereum pos node proposes block selected combination stake wealth randomness age mitigates pow energy problem puts important issues table stake attack higher centralization risk proof meme envisioned constellation 20 algorithm based node s historical participation network behaviour stored matrix weights blockchain supports changes time allows new nodes gain trust building reputation main drawback sybil attacks alleviated netflow algorithm delegated proof stake dpos found bitshares 21 steemit 22 eos 23 hybrid proof authority proof stake nodes responsible deploying new blocks elected stakeholders high throughput model susceptible human related social problems bribing corruption small number delegates makes system prone ddos attacks centralization 2 secure proof stake spos elrond s approach consensus combining random validators selection eligibility stake rating optimal dimension consensus group algorithm described steps 1 node ni defined tuple public key pk rating default 0 locked stake ni wishes participate consensus register smart contract sending transaction contains equal minimum required stake information pks public key derived pk nodeid signing process order use real wallet address 2 node ni joins node pool waits shard assignment end current epoch e shard assignment mechanism creates new set nodes containing nodes joined epoch e 8 nodes need reshuffled 1 3 shard nodes set reassigned waiting lists shards wj represents j s shard waiting list nsh represents number shards node secret key sk nature public ni pki ratingi stakei ni 2 wj 0 j nsh 3 end epoch joined node moved list eligible nodes ej shard j e current epoch ni 2 wj e 1 ni 62 wj e ni 2 ej e 4 node list ej selected optimally dimensioned consensus group terms security communication deterministic function based randomness source added previous block round r set variation parameters random number known shard nodes gossip predicted block actually signed previous consensus group property makes good source randomness prevents highly adaptive malicious attacks define selection function return set chosen nodes consensus group nchosen block proposer takes following parameters e r sigr 1 previous block signature nchosen f e r sigr 1 nchosen e 5 block created block proposer validators co sign based modified practical byzantine fault tolerance pbft 6 reason block proposer create block allocated time slot malicious offline etc round r randomness source block select new consensus group current block proposer acts malicious way rest group members apply negative feedback change rating decreasing cancelling chances particular node selected feedback function block proposer ni round number r parameter ratingmodifier 2 z computed feedbackfunction ff ni ratingmodifier r ratingmodifier 0 slashing occurs node ni loses stake consensus protocol remains safe face ddos attacks having high number possible validators list e hundreds nodes way predict order validators selected reduce communication overhead comes increased number shards consensus run composite block composite block formed ledger block block added shard s ledger having intra shard transactions cross shard transactions confirmation proof received multiple mini blocks holding cross shard transactions different shard consensus run composite block containing intra cross shard transactions consensus reached block header shard sent metachain notarization vi cryptographic layer 1 signature analysis digital signatures cryptographic primitives achieve information security providing properties like message authentication data integrity non repudiation 24 schemes existing blockchain platforms rely discrete logarithm dl problem way exponentiation function y ymod p scientifically proven calculating discrete logarithm base hard 25 elliptic curve cryptography ecc uses cyclic group points instead cyclic group integers scheme reduces computational effort key lengths 160 256 bits ecc provides security level rsa elgamal dsa provide key lengths 1024 3072 bits table 1 24 reason ecc provides similar security level smaller parameter lengths existing attacks elliptic curve groups weaker existing integer dl attacks complexity algorithms require average p p steps solve means elliptic curve prime p 256 bit length provides average security 2128 steps needed break 24 ethereum bitcoin use curve cryptography ecdsa signing algorithm security algorithm dependent random number generator generator produce different number query private key leaked 26 digital signature scheme eddsa schnorr variant based twisted edwards curves support fast arithmetic 27 contrast ecdsa provably nonmalleable meaning starting simple signature impossible find set parameters defines point elliptic curve 28 29 additionally eddsa doesn t need random number generator algorithm family crypto systems security level bit 80 128 192 256 integer factorization rsa 1024 3072 7680 15360 discrete logarithm dh dsa elgamal 1024 3072 7680 15360 elliptic curves ecdh ecdsa 160 256 384 512 symmetric key aes 3des 80 128 192 256 table 1 bit lengths public key algorithms different security levels 9 uses nonce calculated hash private key message attack vector broken random number generator reveal private key avoided schnorr signature variants gaining attention 8 30 native multi signature capability provably secure random oracle model 31 multisignature scheme combination signing verification algorithms multiple signers private public keys sign message producing single signature 32 33 signature checked verifier access message public keys signers sub optimal method node calculate signature concatenate results single string approach unfeasible generated string size grows number signers practical solution aggregate output single fixed size signature independent number participants multiple proposals schemes susceptible rogue key cancellation attacks solution problem introduce step signer needs prove possession private key associated public key 34 bellare neven 35 bn proposed secure multisignature scheme proof possession plain public key model discrete logarithm assumption 31 participants commit share ri propagating hash signers calculate function signer computes different challenge partial signature scheme sacrifices public key aggregation case verification aggregated signature requires public key signer recent paper gregory maxwell et al 29 proposes multi signature scheme plain public key model 36 discrete logarithm assumption omdl approach improves previous scheme 35 reducing communication rounds 3 2 reintroducing key aggregation higher complexity cost bls 4 interesting signature scheme weil pairing bases security computational diffie hellman assumption certain elliptic curves generates short signatures useful properties like batch verification signature aggregation public key aggregation making bls good candidate threshold multisignature schemes dan boneh manu drijvers gregory neven recently proposed bls multi signature scheme 5 ideas previous work 35 30 provide scheme defenses rogue key attacks scheme supports efficient verification pairings needed verify multi signature proof knowledge secret key works plain public key model advantage multi signature created communication rounds traceability security reasons consensus based reduced set validators requires public key signer context analysis concludes appropriate multi signature scheme block signing elrond bls multi signature 5 faster overall options communication rounds 2 block signing elrond block signing elrond uses curve cryptography based bls multi signature scheme bn256 bilinear group implements optimal ate pairing 256 bit barreto naehrig curve bilinear pairing defined e g0 g1 gt 1 g0 g1 gt elliptic curves prime order p defined bn256 e bilinear map e pairing function let g0 g1 generators g0 g1 let h0 hashing function produces points curve g0 h0 m g0 2 m set possible binary messages length signing scheme elrond employs second hasing function parameters known signers h1 m zp 3 signer private public key pair ski pki ski randomly chosen zp key pair property pki ski g1 holds let l pk1 pk2 pkn set public keys possible signers specific round case elrond set public keys nodes consensus group stages block signing process presented signing verification practical signing round 1 leader consensus group creates block transactions signs broadcasts block consensus group members practical signing round 2 member consensus group including leader receives block validate found valid signs bls sends signature leader sigi ski h0 m 4 sigi point g0 practical signing round 3 leader waits receive signatures specific timeframe receive 2 3 n 1 signatures timeframe consensus round aborted leader receive 2 3 n 1 valid signatures uses generate aggregated signature sigagg x h1 pki sigi b 5 sigagg point g0 leader adds aggregated signature block selected signers bitmap b 1 indicates corresponding signer list l signature added aggregated signature sigagg 10 practical verification given list public keys l bitmap signers b aggregated signature sigagg message m block verifier computes aggregated public key pkagg x h1 pki pki bi 6 result pkagg point g1 final verification e g1 sigagg e pkagg h0 m 7 e pairing function vii cross shard execution depth example cross shard transactions executed communication shards metachain occurs simplifying entire process shards metachain assuming user generates transaction wallet address shard 0 wants send erds user wallet address shard 1 steps depicted fig 4 required processing cross shard transaction mentioned chapter v consensus secure proof stake blocks structure represented block header contains information block block nonce round proposer validators timestamp etc list miniblocks shard contain actual transactions inside miniblock contains transactions sender current shard receiver shard sender different shard destination current shard case block shard 0 normally 3 miniblocks miniblock 0 containing intrashard transactions shard 0 miniblock 1 containing cross shard transactions sender shard 0 destination shard 1 miniblock 2 containing cross shard transactions sender shard 1 destination shard 0 transactions processed sender shard 1 finalized processing current shard limitation number miniblocks sender receiver block meaning multiple miniblocks sender receiver appear block 1 processing currently atomic unit processing cross shard execution miniblock transactions miniblock processed miniblock s execution retried round cross shard transaction strategy uses asynchronous model validation processing sender s shard receivers shard transactions dispatched sender s shard fully validate transaction initiated account shard mainly current balance receivers shard nodes need proof execution offered metachain signature verification check replay attack finally update balance receiver adding transaction shard 0 processes intra shard transactions miniblock 0 set cross shard transactions addresses shard 1 receiver miniblock 1 block header miniblocks sent metachain metachain notarizes block shard 0 creating new metachain block metablock contains following information miniblock sender shard id receiver shard id miniblock hash fig 4 cross shard transaction processing 11 shard 1 fetches hash miniblock 1 metablock requests miniblock shard 0 parses transaction list requests missing transactions executes miniblock 1 shard 1 sends metachain resulting block notarization cross transaction set considered finalized diagram shows number rounds required transaction finalized rounds considered inclusion miniblock miniblock notarised viii smart contracts execution smart contracts key element future blockchain architectures existing solutions avoid properly explain transactions data dependency context leads following scenarios 1 direct correlation smart contract transactions displayed fig 5 architecture use order scheduling means additional constraints time place shard smart contract executed 2 second scenario refers parallelism induced transactions involve correlated smart contracts 37 case reflected fig 6 adds additional pressure performance considerably increases complexity basically mechanism ensure contracts executed right order right place shard cover aspect elrond protocol proposes solution assigns moves smart contract shard static dependencies reside way sc calls dependencies shard cross shard locking unlocking needed elrond focuses implementation elrond virtual machine evm compliant engine evm compliance fig 5 independent transaction processing simple smart contracts executed order fig 6 mechanism correlated smart contracts executed sequentially fig 7 abstraction layer smart contracts extremely important adoption purposes large number smart contracts built ethereum s platform elrond virtual machine s implementation hide underlying architecture isolating smart contract developers system internals ensuring proper abstraction layer displayed fig 7 elrond cross chain interoperability implemented adapter mechanism virtual machine level proposed cosmos 38 approach requires specialized adapters external medium communication adapter sc chain interoperate elrond value exchange operated specialized smart contracts acting asset custodians capable taking custody adapted chain native tokens issuing elrond native tokens 1 vm infrastructure elrond builds vm infrastructure k framework executable semantic framework programming languages calculi type systems formal analysis tools defined 39 greatest advantage k framework smart contract languages unambiguously defined eliminating potential unspecified behavior bugs hard detect k framework executable sense semantic specifications languages directly working interpreters languages question specifically run programs specifications k framework core implementation directly generate interpreter programming languages referred backends sake execution speed ease interoperability elrond uses custom built k framework backend 2 smart contract languages great advantage k framework generate interpreter language defined k need additional programming means interpreters produced way correct construction 12 smart contract languages specified k framework specifications development elrond network support low level languages iele vm kevm wasm iele vm intermediate level language style llvm adapted blockchain built directly k specification implementation exists outside k framework 40 purpose human readable fast overcome limitations evm elrond uses slightly altered version iele changes related account address management smart contract developers program iele directly choose code solidity use solidity iele compiler seen fig 8 kevm version ethereum virtual machine evm written k 41 certain vulnerabilities evm fixed k version vulnerable features left entirely web assembly wasm binary instruction format stack based virtual machine running smart contracts wasm infrastructure enables developers write smart contracts c c rust c having language specification generating interpreter half challenge half integrating generated interpreter elrond network built common vm interface enables plug vm elrond node shown fig 9 vm adapter implements interface contract saved bytecode vm compiled runs corresponding vm 3 support formal modelling verification smart contract languages formally defined k framework possible perform formal verification smart contracts written languages necessary formally model requirements performed k framework 42 fig 8 elrond vm execution fig 9 elrond vm components 4 smart contracts sharded architecture smart contracts sharded architectures early stages research development pose challenges protocols like atomix 7 s bac 9 represent starting point dynamic smart contract dependencies resolved moving scs shard deployment time dependencies calculated solution currently research space 1 locking mechanism allows atomic execution smart contract different shards ensures involved scs executed time requires multiple interaction messages synchronization consensuses different shards 9 2 cross shard contract yanking proposal ethereum 2 0 smart contract code data caller shard execution time atomic execution needed locking mechanism mandatory moved sc block execution sc transactions locking mechanism simpler needs transfer internal state sc 43 following ethereum s model elrond following transaction types 1 sc construction deployment transactions receiver address data field contains smart contract code byte array 2 sc method invoking transaction non receiver address address associated code 3 payment transactions transaction non receiver address code elrond s approach problem use asynchronous cross shard execution model case smart contracts user creates smart contract execution transaction smart contract current shard transaction treated payment transaction value transaction subtracted sender account added block sender shard resides miniblock destination shard receiver account transaction notarized metachain processed destination shard destination shard transaction treated sc method invoking receiver address smart contract exists shard smart contract temporary account shadows sender account created balance transaction value smart contract called execution smart contract return results affects number 13 accounts different shards results affect shard accounts executed round accounts shard smart contract executed transactions called smart contract results created saving smart contract execution output accounts scr miniblocks created destination shard miniblocks notarized way cross shard transactions metachain processed respective shards accounts resides case smart contract calls dynamically smart contract shard saved intermediate result treated accounts solution multiple steps finalization cross shard smart contract need 5 rounds need locking state movement shards ix bootstrapping storage 1 timeline division proof stake systems tend generally divide timeline epochs epoch smaller rounds 19 timeline terminology differ architectures use similar approach epochs elrond protocol epoch fixed duration initially set 24 hours suffer updates testnet confirmation stages timeframe configuration shards remains unchanged system adapts scalability demands epochs modifying number shards prevent collusion epoch configuration shard needs change reshuffling nodes shards provide highest security level affect system s liveness introducing additional latency bootstrapping reason end epoch 1 3 eligible validators belonging shard redistributed non deterministically uniformly shards waiting lists prior start new epoch validator distribution shards determined additional communication displayed fig 10 node shuffling process runs multiple steps 1 new nodes registered current epoch ei land unassigned node pool end current epoch 2 1 3 nodes shard randomly selected reshuffled added assigned node pool 3 new number shards nsh 1 computed based number nodes network ki network usage 4 nodes previously shard s waiting lists currently synchronized added eligible validator s lists 5 newly added nodes unassigned node pool uniformly random distributed shards waiting lists epoch ei 1 6 reshuffled nodes assigned node pool redistributed higher ratios shards waiting lists need split epoch ei 2 rounds round fixed time duration 5 seconds suffer updates testnet confirmation stages round new block produced shard randomly selected set block validators including block proposer round set changed eligible nodes list detailed chapter iv described reconfiguration shards epochs arbitrary selection validators rounds discourages creation unfair coalitions diminishes possibility ddos bribery attacks maintaining decentralization high transactions throughput 2 pruning high throughput lead distributed ledger rapidly grows size increases bootstrapping cost time storage highlighted section xi 1 cost addressed efficient pruning algorithms summarize blockchain s state condensed structure pruning mechanism similar stable checkpoints pbft 15 compresses entire ledger state elrond protocol makes use efficient pruning algorithm 7 detailed let consider e current epoch current shard 1 shard nodes track account balances e merkle tree 44 2 end epoch block proposer creates state block sb e stores hash merkle tree s root block s header balances block s body 3 validators verify run consensus sb e 4 consensus reached block proposer store sb e shard s ledger making genesis block epoch e 1 5 end epoch e 1 nodes drop body sb e blocks preceding sb e mechanism bootstrapping new nodes efficient actually start valid state block compute following blocks instead history x security evaluation 1 randomness source elrond makes use random numbers operation e g random sampling block proposer validators consensus groups shuffling nodes shards end epoch features contribute elrond s security guarantees important use random numbers provably unbiasable unpredictable addition properties generation 14 fig 10 shuffling nodes end epoch random numbers needs efficient scalable high throughput blockchain architecture properties found asymmetric cryptography schemes like bls signing scheme important property bls private key sign message produces results similar achieved ecdsa deterministic k generation scheme random parameters sig sk h m 8 h hashing function hashes points curve sk private key 2 randomness creation elrond random number created round added block proposer block blockchain ensures random numbers unpredictable random number signature different block proposer previous randomness source creation random numbers detailed consensus round 1 new consensus group selected randomness source previous block header consensus group formed block proposer validators 2 block proposer signs previous randomness source bls adds signature proposed block header new randomness source broadcasts block consensus group 3 member consensus group validates randomness source block validation sends block signature block proposer 4 block proposer aggregates validators block signatures broadcasts block aggregated block signature new randomness source shard evolution randomness source round seen unbiasable verifiable blockchain new random number linked verified previous random number 3 k block finality scheme signed block round n final blocks n 1 n 2 n k signed furthermore final block reverted metachain notarizes final blocks ensure fork shard affect shards shards consideration final metachain blocks order affected metachain forks finality correctness verified block creation block validation chosen k parameter 1 ensures forks maximum 2 blocks length probability malicious super majority 2 3 n 1 selected shard 15 round consensus 10 9 33% nodes shard malicious case propose block sign let s block m notarized metachain metachain notarizes block m block m 1 built order create block m 1 consensus group agree block m malicious group agree block m group malicious super majority random seed group selection tampered probability selecting malicious super majority group 10 9 5 38 10 10 exact probability signing consecutive malicious blocks equals selecting subgroups 2 3 n 1 members malicious group consequently probability 10 18 furthermore consequently selected groups colluding blocks signed 4 fisherman challenge invalid block proposed malicious majority shard state root tampered invalid result including invalid changes state tree providing combined merkle proof number accounts honest node raise challenge proof honest nodes provide block transactions previous reduced merkle tree affected accounts applying challenged block smart contract states demonstrating invalid transaction state challenge proof provided bounded time frame block considered valid cost invalid challenge entire stake node raised challenge metachain detects inconsistency invalid transaction invalid state root presented challenges proofs traced consensus group slashed time challenger rewarded slashed problem malicious group hides invalid block nodes non malicious ones making mandatory current consensus propagate produced block sibling shard observer nodes data hidden anymore communication overhead reduced sending intrashard miniblock sibling shard cross shard miniblocks sent different topics accessible interested nodes end challenges raised multiple honest nodes security protection given setup p2p topics communication shard metachain defined set topics channels listened honest validator metachain accept messages channels solution introduces delay metachain case challenges low number highly improbable detected high probability detected nodes risk entire stake 5 shard reorganization epoch 1 3 n nodes shard redistributed uniformly non deterministically shards prevent collusion method adds bootstrapping overhead nodes redistributed doesn t affect liveness shuffled nodes participate consensus epoch redistributed pruning mechanism decrease time feasible explained section ix 2 6 consensus group selection round new set validators selected random seed commited block current round eligible nodes list case network desynchronization delays message propagation protocol recovery mechanism takes consideration round r randomness seed committed block order select new consensus groups round avoids forking allows synchronization block small time window round time validators group known minimizes attack vectors 7 node rating stake eligible validator s rating influences chances selected consensus group block proposer honest block gets committed blockchain rating increased s rating decreased way possible validator incentivized honest run date client software version increase service availability ensuring network functions designed 8 shard redundancy nodes distributed sibling shards tree s lowest level section iv 4 track s blockchain data application state introducing concept shard redundancy number nodes network decreases sibling shards need merged targeted nodes instantly initiate process shard merging xi understanding real problems 1 centralized vs decentralized blockchain initially instantiated alternative centralized financial system systems 45 freedom anonymity distributed architectures remains undisputed advantage performance analyzed global scale real world environment relevant metric measuring performance transactions second tps seen table 2 tps comparison traditional centralized systems decentralized novel architectures validated trusted efficient large scale reflects objective unsettling reality 46 47 48 49 scalability blockchain architectures critical unsolved problem instance example determining data storage bootstrapping implications current blockchain architectures suddenly functioning visa level throughput performing exercises magnitude multiple secondary problems obvious fig 11 16 architecture type dispersion tps average tps max limit visa distributed virtualization centralized 3500 55000 paypal distributed virtualization centralized 200 450 ripple private blockchain permissioned 1500 55000 neo private blockchain mixed 1000 10000 ethereum public blockchain decentralized 15 25 bitcoin public blockchain decentralized 2 7 table 2 centralized vs decentralized tps comparison xii blockchain performance paradigm process designing distributed architectures blockchain faces challenges challenging struggle maintain operability contextual pressure conditions main components determine performance pressure complexity system size transaction volume complexity element limits system performance consensus protocol complicated protocol determines bigger hotspot pow consensus architectures big performance penalty induced mining complexity aims system decentralized asic resilient 50 overrun problem pos makes trade simplifies network management concentrating computing power subset network yields complexity control mechanism system size expanding number nodes existing validated architectures forces performance degradation induces higher computational price paid sharding good approach shard size plays major role smaller shards agile likely affected malicious groups bigger shards safer reconfiguration affects system liveness transaction volume higher relevance compared item list represents transaction processing performance order correctly measure impact criteria analyzed considering following standpoints c1 transaction throughput transactions system process time unit known tps output system 51 c2 transaction finality fast particular transaction processed referring interval launch finalization input output path c1 transaction throughput single chain architectures low increased workarounds sidechain 52 sharded architecture like transaction throughput influenced number shards computing capabilities validators block proposers messaging infrastructure 8 general displayed fig 13 goes public despite importance metric provides fragmented view c2 transaction finality delicate aspect emphasizes system throughput 1000 tps process particular transaction computing capabilities validators block proposers messaging infrastructure transaction finality mainly affected dispatching algorithm decision routing protocol transaction executed existing state art architectures refuse mention aspect user standpoint extremely important displayed fig 11 storage estimation validated distributed architectures working average visa tps 17 fig 13 transaction throughput fig 14 total time required execute certain transaction start end considered elrond dispatching mechanism detailed section v allows improved time finality routing transactions directly right shard mitigating overall delays xiii conclusion 1 performance performance tests simulations presented fig 12 reflect efficiency solution highly scalable distributed ledger nodes join network sharding approach shows linearly increasing throughput chosen consensus model involves multiple communication rounds result highly influenced network quality speed latency availability simulations testnet worldwide network speed averages maximum theoretical limit suggest elrond exceeds average visa level 2 shards approaches peak visa level 16 shards fig 14 transaction finality 2 ongoing future research team constantly evaluating improving elrond s design effort compelling public blockchain architectures solving scalability adaptive state sharding maintaining security high energy efficiency secure proof stake consensus mechanism directions improvement include 1 reinforcement learning aim increase efficiency sharding process allocating frequently trading clients shard reduce overall cost 2 ai supervision create ai supervisor detects malicious behavioral patterns uncertain feature integrated protocol disrupting decentralization 3 reliability consensus factor existing protocol weighs stake rating plan add reliability metric computed distributed manner applying consensus protocol previously submitted blocks recent fig 12 network throughput measured transactions seconds global network speed 8 mb s 18 history 4 cross chain interoperability implements contribute standards like initiated decentralized identity foundation 53 blockchain interoperability alliance 54 5 privacy preserving transactions use zero knowledge succinct non interactive argument knowledge 55 protect identity participants offer auditing capabilities preserving privacy 3 overall conclusions elrond highly scalable public blockchain uses newly proposed secure proof stake algorithm genuine state sharded architecture achieve visa level throughput confirmation times seconds elrond s novel approach adaptive state sharding improves omniledger s proposal increasing security throughput built automatic transaction routing state redundancy mechanisms considerably reduce latencies shard pruning technique bootstrapping storage costs considerably reduced compared approaches newly introduced secure proof stake consensus algorithm ensures distributed fairness improves algorand s idea random selection reducing time needed random selection consensus group 12 seconds 100 ms method combining state sharding efficient secure proof stake consensus algorithm shown promising results initial estimations validated latest testnet results references 1 g hileman m rauchs 2017 global cryptocurrency benchmarking study social science research network rochester ny ssrn scholarly paper id 2965436 apr 2017 online available https papers ssrn com abstract 2965436 2 ethereum wiki sharding faq 2018 original date 2014 02 14t23 05 17z online available https github com ethereum wiki wiki sharding faq 3 y gilad r hemo s micali g vlachos n zeldovich algorand scaling byzantine agreements cryptocurrencies proceedings 26th symposium operating systems principles ser sosp 17 new york ny usa acm 2017 pp 51 68 online available http doi acm org 10 1145 3132747 3132757 4 d boneh b lynn h shacham short signatures weil pairing advances cryptology asiacrypt 01 lncs springer 2001 pp 514 532 5 d boneh m drijvers g neven compact multi signatures smaller blockchains advances cryptology asiacrypt 2018 ser lecture notes computer science vol 11273 springer 2018 pp 435 464 6 v buterin ethereum generation smart contract decentralized application platform 2013 online available https www ethereum org pdfs ethereumwhitepaper pdf 7 e kokoris kogias p jovanovic l gasser n gailly e syta b ford omniledger secure scale decentralized ledger sharding tech rep 406 2017 online available https eprint iacr org 2017 406 8 zilliqa technical whitepaper 2017 online available https docs zilliqa com whitepaper pdf 9 m al bassam sonnino s bano d hrycyszyn g danezis chainspace sharded smart contracts platform arxiv 1708 03778 cs aug 2017 arxiv 1708 03778 online available http arxiv org abs 1708 03778 10 g wood ethereum secure decentralised generalised transaction ledger 2017 online available https ethereum github io yellowpaper paper pdf 11 solidity solidity 0 4 21 documentation online available https solidity readthedocs io en v0 4 21 12 web3j 2018 online available https github com web3j 13 casper 2018 online available http ethresear ch c casper 14 state ethereum scaling march 2018 highlights ethcc plasma cash minimum viable plasma medium 2018 online available https medium com loom network state ethereum scaling march 2018 74ac08198a36 15 m castro b liskov practical byzantine fault tolerance proceedings symposium operating systems design implementation ser osdi 99 berkeley usa usenix association 1999 pp 173 186 online available http dl acm org citation cfm id 296806 296824 16 y jia op ed faces sharding blockchain scalability 2018 online available https bitcoinmagazine com articles op ed faces sharding blockchain scalability 17 merklix tree shard block validation j deadalnix s den 2016 online available https www deadalnix 2016 11 06 merklix tree shard block validation 18 s nakamoto bitcoin peer peer electronic cash system p 9 2008 19 building cardano introduction online available https whycardano com 20 constellation blockchain microservice operating system white paper 2017 original date 2018 01 05t20 42 05z online available https github com constellation labs whitepaper 21 bitshares delegated proof stake consensus 2014 online available https bitshares org technology delegated proof stake consensus 22 dantheman dpos consensus algorithm missing white paper 2017 online available https steemit com dpos dantheman dpos consensus algorithm missing white paper 23 eos io technical white paper v2 2018 original date 2017 06 06t07 55 17z online available https github com eosio documentation blob master technicalwhitepaper md 24 c paar j pelzl understanding cryptography textbook students practitioners berlin heidelberg springer verlag 2010 online available www springer com gp book 9783642041006 25 c schnorr efficient signature generation smart cards journal cryptology vol 4 pp 161 174 jan 1991 26 k michaelis c meyer j schwenk randomly failed state randomness current java implementations topics cryptology ct rsa 2013 ser lecture notes computer science springer berlin heidelberg feb 2013 pp 129 144 online available https link springer com chapter 10 1007 978 3 642 36095 4 9 27 d j bernstein p birkner m joye t lange c peters twisted edwards curves progress cryptology africacrypt 2008 ser lecture notes computer science springer berlin heidelberg jun 2008 pp 389 405 online available https link springer com chapter 10 1007 978 3 540 68164 9 26 28 poelstra schnorr signatures non malleable random oracle model 2014 online available https download wpsoftware net bitcoin wizardry schnorr mall pdf 29 c decker r wattenhofer bitcoin transaction malleability mtgox arxiv 1403 6676 cs vol 8713 pp 313 326 2014 arxiv 1403 6676 online available http arxiv org abs 1403 6676 30 g maxwell poelstra y seurin p wuille simple schnorr multi signatures applications bitcoin tech rep 068 2018 online available https eprint iacr org 2018 068 31 y seurin exact security schnorr type signatures random oracle model advances cryptology eurocrypt 2012 ser lecture notes computer science springer berlin heidelberg apr 2012 pp 554 571 online available https link springer com chapter 10 1007 978 3 642 29011 4 33 32 k itakura k nakamura public key cryptosystem suitable digital multisignatures 1983 33 s micali k ohta l reyzin accountable subgroup multisignatures extended abstract proceedings 8th acm conference computer communications security ser ccs 01 new york ny usa acm 2001 pp 245 254 online available http doi acm org 10 1145 501983 502017 34 t ristenpart s yilek power proofs possession securing multiparty signatures rogue key attacks advances cryptology eurocrypt 2007 ser lecture notes computer science springer berlin heidelberg 2007 pp 19 228 245 online available https link springer com chapter 10 1007 978 3 540 72540 4 13 35 m bellare g neven multi signatures plain public key model general forking lemma proceedings 13th acm conference computer communications security ser ccs 06 new york ny usa acm 2006 pp 390 399 online available http doi acm org 10 1145 1180405 1180453 36 d p le bonnecaze gabillon multisignatures secure diffie hellman problem plain public key model pairing based cryptography pairing 2009 ser lecture notes computer science springer berlin heidelberg aug 2009 pp 35 51 online available https link springer com chapter 10 1007 978 3 642 03298 1 3 37 t dickerson p gazzillo m herlihy e koskinen adding concurrency smart contracts proceedings acm symposium principles distributed computing ser podc 17 new york ny usa acm 2017 pp 303 312 online available http doi acm org 10 1145 3087801 3087835 38 j kwon e buchman cosmos network internet blockchains 2017 online available https cosmos network whitepaper 39 g ros u t f s erb anut overview k semantic framework journal logic algebraic programming vol 79 6 pp 397 434 2010 40 t kasampalis d guth b moore t serbanuta v serbanuta d filaretti g rosu r johnson iele intermediate level blockchain language designed implemented formal semantics tech rep 2018 41 e hildenbrandt m saxena x zhu n rodrigues p daian d guth g rosu kevm complete semantics ethereum virtual machine tech rep 2017 42 formal verification smart contracts works j rv blog online available https runtimeverification com blog formal verification smart contracts works 43 cross shard contract yanking online available https ethresear ch t cross shard contract yanking 1450 44 r c merkle certified digital signature advances cryptology crypto 89 proceedings ser lecture notes computer science springer new york ny aug 1989 pp 218 238 online available https link springer com chapter 10 1007 0 387 34805 0 21 45 veysov m stolbov financial system classification conventional dichotomy modern view social science research network rochester ny ssrn scholarly paper id 2114842 jul 2012 online available https papers ssrn com abstract 2114842 46 xrp digital asset payments online available https ripple com xrp 47 visa annual report 2017 2018 online available https s1 q4cdn com 050606653 files doc financials annual 2017 visa 2017 annual report pdf 48 paypal reports fourth quarter year 2017 results nasdaq pypl 2018 online available https investor paypal corp com releasedetail cfm releaseid 1055924 49 m schwarz crypto transaction speeds 2018 major cryptocurrencies 2018 online available https www abitgreedy com transaction speed 50 ethereum wiki mining 2018 original date 2014 02 14t23 05 17z online available https github com ethereum wiki wiki mininghttps github com ethereum wiki 51 transaction throughput online available https docs oracle com cd e17276 01 html programmer reference transapp throughput html 52 w martino m quaintance s popejoy chainweb proofof work parallel chain architecture massive throughput 2018 online available http kadena io docs chainweb v15 pd 53 dif decentralized identity foundation online available http identity foundation 54 h world blockchain interoperability alliance icon x aion x wanchain dec 2017 online available https medium com helloiconworld blockchain interoperability alliance icon x aion x wanchain 8aeaafb3ebdd 55 s goldwasser s micali c rackoff knowledge complexity interactive proof systems proceedings seventeenth annual acm symposium theory computing ser stoc 85 new york ny usa acm 1985 pp 291 304 online available http doi acm org 10 1145 22145 22178