b holochain scalable agent centric distributed computing draft alpha 1 xe2 x80 x93 2 15 2018 eric harris braun nicolas luck arthur brock1 1 ceptr llc abstract present scalable agent centric distributed computing platform use formalism characterize distributed systems applies existing distributed systems demonstrate benefits shifting data centric agent centric model present detailed formal specification holochain system analysis systemic integrity capacity evolution total system computational complexity implications use cases current implementation status approach data centric focus creating single shared data reality nodes introduction claim fundamental original stance results directly significant limitation blockchain scalability limitation widely known 3 solutions offered 4 holochain offers way forward directly addressing root datacentric assumptions blockchain approach ft distributed computing platforms achieved new level viability advent foundational cryptographic tools secure hashing algorithms public key encryption provided solutions key problems distributed computing verifiable tamper proof data sharing state nodes distributed system confirmation data provenance digital signature algorithms achieved hash chains monotonic data stores rendered intrinsically tamper proof confidently sharable nodes including hashes previous entries subsequent entries achieved combining cryptographic encryption hashes data public keys addresses agents allowing agents system mathematically verify data xe2 x80 x99s source hash chains help solve problem independently acting agents reliably sharing state different approaches use deep systemic consequences approaches demonstrated today xe2 x80 x99s canonical distributed systems ii paper builds largely recent work cryptographic distributed systems distributed hash tables multi agent systems ethereum wood eip 150 dht kademlia benet ipfs todo discussion references dr 1 git1 git nodes update hash chains fit degree overlapping shared state chain entries known commit objects nodes managed git explicitly action agent making pull requests merges approach agentcentric focus allowing nodes share independently evolving data realities iii 2 https git scm com https bitcoin org bitcoin pdf distributed systems formalism define simple generalized model distributed system xe2 x84 xa6 hash chains follows 1 let n set elements n1 n2 nn participating system elements n nodes agents 2 let node n consist set sn elements xcf x831 xcf x832 elements sn state node n purposes paper assume xe2 x88 x80 xcf x83i xe2 x88 x88 sn xcf x83i xi di xi hash chain d set non hash chain data elements 2 bitcoin2 bitcoin blockchain general xe2 x80 x9cproblem xe2 x80 x9d understood figuring choose block transactions variants experienced mining nodes collect transactions clients different orders committing single variant single globally shared chain 1 prior work 3 let h cryptographically secure hash function 3 4 add sources footnotes x0c2 1 set nodes n functions t v p e properties reliably known known identical set nodes trusted nodes respect functions known 4 let state transition function xcf x84 xcf x83i t xcf x84x xi t xcf x84d di t 3 1 xcf x84x xi t xi 1 xi 1 xi xe2 x88 xaa xi 1 x1 xi xi 1 2 channel c property messages transit trusted arrive exactly sent secure 3 2 3 channel c address node n h pkn pkn public key node n messages include digital signature message signed sender authenticated xi 1 h t h h t y y h xj j 3 3 h header note sequence headers creates chain tree general case linking header previous header s transaction b di 1 xcf x84d xcf x83i t purposes paper assume untrusted nodes e independently acting agents solely control insecure channel raison d xe2 x80 x99e xcc x82tre cryptographic tools mentioned allow individual nodes trust system assumption cryptography immediately makes visible state data node system uses version functions different property referred trustless system simply means locus trust shifted state data nodes refer systemic reliance intrinsic data integrity iv c detailed discussion trust distributed systems ft 5 let v t v function takes t extra validation data v verifies validity t valid calls transition function t v validation function 4 data element accessible hash content addressable dr 6 let t function takes transaction t evaluates function v valid uses xcf x84 transform s input stimulus function 7 let p x function create transactions t trigger functions v xcf x84 p triggered state changes passage time p processing function b data centric agent centric systems 8 let c channel allows nodes n communicate node unique address c nodes communicate network definition bitcoin understood system xe2 x84 xa6bitcoin 9 let e function changes functions v p e evolution function 2 v e v e block v output xe2 x80 x9cproof work xe2 x80 x9d hash crack algorithm v confirms validity v structure validity e according double spend rules5 explanation formalism allows model separately key aspects agents separate agent xe2 x80 x99s state cryptographically secured hash chain x holds arbitrary data d split process updating state steps 1 validation new transactions t validation function v t v 2 actual change internal state s x d state transition functions xcf x84x xcf x84d finally distinguish 1 state transitions triggered external events stimuli received t 2 node xe2 x80 x99s internal processing p x results calling v xcf x84 internally created transaction define key properties distributed systems 1 xe2 x88 x80n m xe2 x88 x88 n xn xm means enforced 3 t n accepts transactions clients adds d mempool build block later use triggering v 4 p mining process including xe2 x80 x9cproof ofwork xe2 x80 x9d algorithm composes v xcf x84x hash cracked 5 pointer x0c3 5 e formally defined mapped informally decision humans operating nodes install new versions bitcoin software point establishes central aspect bitcoin xe2 x80 x99s blockchain applications xe2 x80 x99 general strategy solving avoiding problems encountered decentralized systems trying maintain network state nodes local chain contrast xe2 x84 xa6git constraint xn xm nodes n m matching git xe2 x80 x99s core intent allow different agents act autonomously divergently shared code base impossible states match lens formalism aspects xe2 x84 xa6git understood follows ft 1 validation function v e v default checks structural validity e commit object xe2 x80 x99s content note git support signing commits validation problem distributed systems consist entirely multiple vantage points definition distributed world events don xe2 x80 x99t happen sequence observers blockchain specifically heart matter choosing block nodes receiving transactions different orders use xe2 x80 x9cconsensus xe2 x80 x9d e single vantage point enforce nodes blockchains don xe2 x80 x99t record universal ordering events xe2 x80 x93 manufacture single authoritative ordering events xe2 x80 x93 stringing tiny fragment local vantage points global record passed validation rules use word consensus best dubious description systemic requirement nodes carry identical values xn especially algorithm ensuring sameness essentially digital lottery powered expensive computation primary design feature randomize node gets run vn node preference e gets added xn term consensus normally implies deliberation regard differences work crafting perspective holds parties simply selecting party xe2 x80 x99s dataset random contrast agent centric distributed system git xe2 x80 x99s merge command provides processes recognizable consensus xe2 x80 x99s automated accurate term hash crack algorithm applied xe2 x84 xa6bitcoin xe2 x80 x9cproof luck xe2 x80 x9d process simply sameness consensus start data centric viewpoint naturally throws xe2 x80 x9cexperience xe2 x80 x9d agents favor xe2 x80 x99s harder design engage processes actually real world properties consensus constraint keeping nodes xe2 x80 x99 states adopted consciously fit specific purpose particularly problematic unfortunately legacy data centric viewpoint held unconsciously adopted generalized distributed computing systems intent doesn xe2 x80 x99t specifically include need model xe2 x80 x9cdigital matter xe2 x80 x9d universally absolute location having advantages conceptual simplicity immediately creates scalability issues worse makes hard advantages inherent agent centric approach 2 stimulus function t xe2 x84 xa6git consists set git commands available user dr 3 state transition function xcf x84x internal git function adds commit object xcf x84d git function adds code index triggered add 4 e similarly xe2 x84 xa6bitcoin formally defined xe2 x84 xa6git leave depth application formalism xe2 x84 xa6git excercise reader underscore core difference xe2 x84 xa6bitcoin xe2 x84 xa6git lies formers constraint xe2 x88 x80n m xe2 x88 x88 n xn xm direct consequence xe2 x84 xa6bitcoin size xn grows necessarily nodes xe2 x84 xa6bitcoin grow size necessarily case xe2 x84 xa6git lies core bitcoin xe2 x80 x99s scalability issues xe2 x80 x99s surprising data centric approach bitcoin comes fact stated intent create digitally transferable xe2 x80 x9ccoins xe2 x80 x9d e model distributed digital system property matter known location centralized computer systems doesn xe2 x80 x99t appear problem centralized systems designed allow think data centric perspective allow believe kind data objectivity data exists like physical object sitting someplace having location allow think terms absolute frame correct truth data time sequence suggests xe2 x80 x9cconsensus xe2 x80 x9d converge truth fact property information data exists vantage point observer fact makes digitally transferable xe2 x80 x9ccoins xe2 x80 x9d hard iv generalized distributed computation previous section described general formalism distributed systems compared git bitcoin example agent centric vs data centric distributed system systems provides generalized computation sense framework writing computer programs creating applications lets add following constraints formalism iii x0c4 2 let m virtual machine execute code follows 1 respect machine m values sn interpreted executable code results code execution accessible m code values machine state 2 xe2 x88 x83t nodes n t trigger execution code transaction values calls ethereum 4 let xce xb9n second entry xn set form p p public key identifying information appropriate use particular xe2 x84 xa6hc note entry format xn xe2 x80 x99s content entry agent identity entry 5 xe2 x88 x80ex xe2 x88 x88 dn let appx xe2 x88 x88 fapp validate transactions involve entries type ex set fv application validation functions ft ethereum6 provides current premier example generalized distributed computing blockchain model ethereum approach comes ontology replicating data certainty single physical computer stratum bunch distributed nodes blockchain strategy creating single data reality cryptographic chain commiting computations instead monetary transactions bitcoin blocks approach live constraints listed described wood eip 150 bulk paper understood specification validation function vn described state transition function xcf x83t 1 xe2 x89 xa1 xce xa5 xcf x83 t specification constraints met unfortunately data centric legacy inherited ethereum blockchain model immediately observable high compute cost7 difficulty scaling8 3 let initial entry xn n identical consist set dna e1 e2 f1 f2 p1 p2 ex definitions entry types added chain fx functions defined executable m refer set fapp app1 app2 px system properties things declare expected operating parameters application specificed example resilience factor defined set property dr b holochain proceed describe agent centric distributed generalized computing system nodes confidently participate system constrained maintaining chain state nodes broad strokes holochain application consists network agents maintaining unique source chain transactions paired shared space implemented validating monotonic sharded distributed hash table dht node enforces validation rules data dht providing provenance data source chains originated formalism holochain based application xe2 x84 xa6hc defined 1 xn source chain n 6 7 8 6 let function vsys ex e v checks e form specified entry definition ex xe2 x88 x88 dna function system entry validation function https github com ethereum wiki wiki white paper link benchmarkng find scholarly article 7 let w overall validation function v e v xe2 x89 xa1 x fv ex v xe2 x88 xa7 vsys ex e v 8 let fi subset fapp distinct fv xe2 x88 x80fx t xe2 x88 x88 fi exists t t trigger fx t functions fi exposed functions 9 functions fapp fv fi internal functions allow called functions 10 let channel c authenticated 11 let dht define distributed hash table authenticated channel follows let xe2 x88 x86 set xce xb41 xce xb42 xce xb4x set key value key hash h value value xe2 x88 x86 dht state b let fdht dhtput dhtget set functions dhtput xce xb4key value adds xce xb4key value xe2 x88 x86 ii dhtget key value xce xb4key value xe2 x88 x86 c assume x y xe2 x88 x88 n xce xb4i xe2 x88 x88 xe2 x88 x86x xce xb4i xe2 x88 x88 xe2 x88 x86y allow y calls dhtget key xce xb4i retrieved x channel x added xe2 x88 x86y x0c5 dht sufficiently mature number ways ensure property 11c current alpha version use modified version kademlia implemented libp2p 12 let dhthc augment dht follows xe2 x88 x80 xce xb4key value xe2 x88 x88 xe2 x88 x86 constrain value entry type defined dna furthmore enforce function dhtx y modifies xe2 x88 x86 uses fv y validate y records valid note validation phase include contacting source nodes involved generating y gather information context transaction iv c 2 b enforce elements xe2 x88 x86 changed monotonically elements xce xb4 added xe2 x88 x86 removed c include fdht functions defined d allow sets xce xb4 xe2 x88 x88 xe2 x88 x86 include elements defined allow node n discard xce xb4x xe2 x88 x88 xe2 x88 x86n number closer regards d x y nodes greater q e nodes able construct v xce xb4 sets including n turn means nodes responsible holding xce xb4 xe2 x88 x86m system meet resilience set r n participating storing xce xb4 note results network adapting changes topology dht state migrations regulating number networkwide redundant copies xce xb4i xe2 x88 x88 xe2 x88 x86 match r according node uptime dhthc validating monotonic sharded dht 13 xe2 x88 x80n xe2 x88 x88 n assume n implements dhthc xe2 x88 x86 subset d non hash chain state data fdht available n note functions directly available functions fapp defined dna ft e let d x y symmetric unidirectional distance metric hash space defined h example xor metric defined kademlia note metric applied entries nodes alike addresses values hash function h e xce xb4key h xce xb4value h pkn union sets v xce xb4 given node xe2 x80 x99s perspective overlap list note q xe2 x89 xa5 r 14 let fsys set syscommit sysget functions dr syscommit e uses system validation function v e v add e x successful calls dhtput h e e f let r parameter dhthc set dependent characteristics deemed beneficial maintaining multiple copies entries dht given application r resilience factor g allow node maintain set m mn metrics mn nodes mn contains node xe2 x80 x99s direct experience n respect metric experience nodes n enforce metric kept uptime keeps track percentage time node experienced available process nodes sharing metrics gossip refer iv c 3 details h enforce xe2 x88 x80 xce xb4 xe2 x88 x88 xe2 x88 x86n node n maintains set v xce xb4 n1 nq q closest nodes xce xb4 seen n expected n hold xce xb4 resiliency maintained taking account node uptimes choosing value q q x uptime ni xe2 x89 xa5 r 0 whith uptime n xe2 x88 x88 0 1 4 1 b sysget k dhtget k c additional system functions defined b 15 allow functions fapp defined dna functions fsys 16 let m arbitrary message include fsys function syssend ato m called nfrom trigger function appreceive afrom m dna node nto mechanism node node messaging 17 allow definition entries dna mark entry types private enforce entry xcf x83x type xcf x83x xe2 x88 x88 xe2 x88 x86 note entries type sent node node messages 18 let system processing function p set functions fapp registered system callbacks based criteria e g notification rejected puts dht passage time etc c systemic integrity validation appeal data centric approach distributed computing comes fact prove x0c6 nodes reliably data provides strong general basis prove integrity system case bitcoin x holds transactions unspent transaction outputs allows nodes verify future transactions double spend case ethereum x holds ammounts pointers machine state proving consistency nodes data sets fundamental integrity systems started assumption iii distributed systems independently considered confidence rc unclear measure concrete confidence level xce xa8 xce xb1 realworld contexts real world decisions confidence mainly dependent human agent xe2 x80 x99s vantage point set data hand maybe intuition find adequate soft criteria order comprehend concept objectively relate notion conveyed woods quote proceed defining measure confidence aspect xce xb1 conditional probability case given context overall wish provide system users guaranteed matter individuals systems organizations interact absolute confidence possible outcomes outcomes come xce xa8 xce xb1 xe2 x89 xa1 p xce xb1 c context c models information available agent including basic intuitive assumptions consider fundamental example cryptographically signed messages asymetric keys applied field cryptographic systems basically coins term crypto currency central aspect context xce xb1signature provides ability know certainty given message xe2 x80 x99s real author authorreal agent indicated solely locally available data message xe2 x80 x99s meta information cryptographic signature authorlocal gain confidence deem hard agent possession private key create valid signature given message dr idea xe2 x80 x9cabsolute confidence xe2 x80 x9d important attempt understand formally generally distributed systems 1 let xce xa8 xce xb1 measure confidence agent aspects system participates 0 xe2 x89 xa4 xce xa8 xe2 x89 xa4 1 0 represents confidence 1 represents absolute confidence 2 let rn xce xb11 xce xb12 define set aspects system agent n xe2 x88 x88 n measures confidence rn requirements n respect xe2 x84 xa6 3 let xce xb5n xce xb1 thresholding function node n xe2 x88 x88 n respect xce xb1 xce xa8 xce xb1 xce xb5 xce xb1 n stop participating system reject participation resulting fork 4 let ra let rc partitions r xe2 x88 x80 xce xb1 xe2 x88 x88 ra xce xb5 xce xb1 1 xe2 x88 x80 xce xb1 xe2 x88 x88 rc xce xb5 xce xb1 1 4 3 ft acting agents proof xe2 x88 x80n m xe2 x88 x88 n xn xm blockchain based system better understood choice use nodes use agency decide stop interacting nodes based detecting x state longer matches called xe2 x80 x9cproof enforcement xe2 x80 x9d appropriately known fork essentially results partitioning network heart matter trust single agent system eip 150 section 1 1 driving factors read 4 2 value xce xa8 6 1 rejected ra value xce xa8 xce xb5 xce xb1 rejected rc ra absolute requirements rc considered requirements formally separated system characteristics absolute confidence ra xce xb1signature xe2 x89 xa1 authorreal authorlocal 4 4 appeal aspect check authorship locally e need 3rd party direct trusted communication channel real author confidence aspect certain cryptographic system depends context c xce xa8signature p authorreal authorlocal c 4 5 constrain context remove possibility adversary gaining access agent xe2 x80 x99s private key exclude possible future existence computing devices algorithms easily calculate brute force key assign constructed confidence level 1 e xe2 x80 x9cabsolute confidence xe2 x80 x9d constraints c admit xce xa8signature 1 real world events instance mt gox hack 20149 clear aim describe relationships detail order point set ra absolute requirements xe2 x80 x99t reach trivial statements statements content integrity local state agent following descarte xe2 x80 x99s way 9 xe2 x80 x9dmost missing bitcoins stolen straight mt gox hot wallet time beginning late 2011 xe2 x80 x9d nilsson15 x0c7 wish provide generalized means decentralized multi agent systems built expend differing levels resources validate designed holochain allow validation functions set contextually application expose contexts explicitly conceivably build holochain application deliberately makes choices validation functions implement partial characteristics blockchains holochain understood framework opens spectrum decentralized application architectures blockchain happens specific instance end spectrum following sections categories validation algorithms exist stacked order build decentralized systems able maintain integrity introducing absolute truth agent forced accept consider 1 intrinsic data integrity application low level routines utilize non trivial structured data types structured implies existence model describing interpret raw bits instance type pieces structure relate includes certain assumptions set possible values certain value combinations meaningful violate intrinsic integrity data type consider example cryptographically signed message m body signature author author given form public key data type conveys assumption elements body signature author correspond constrained cryptographic algorithm assumed determined definition type intrinsic data integrity given instance validated looking data checking signature applying cryptographic algorithm constitutes central type xe2 x80 x99s priori model validation yields result xe2 x88 x88 true f alse means confidence intrinsic data integrity absolute e xce xa8intrinsic 1 generally define intrinsic data integrity transaction type xcf x86 aspect xce xb1 xcf x86 intrinsic xe2 x88 x88 ra expressed existence deterministic local validation function v xce xb1 t transactions t xe2 x88 x88 xcf x86 depend inputs t note intrinsic data integrity message example assumptions message xe2 x80 x99s real author aspect xce xb1signature previous section definition focus aspects don xe2 x80 x99t claims system properties non local agent consideration roots sequence inferences constitutes validity confidence system xe2 x80 x99s high level aspects integrity consistent environmental inputs ft questioning confidence thought project famous statement cogito ergo sum reference frame multi agent systems stating agents honest confidence fact perceive certain stimulus present particular abstract priori model matches stimulus contradiction e agent sees certain piece data possible interpret certain way conclusion drawn posteriori application sophisticated models context dependent assumptions context inherent model heart agent centric outlook claim taken account design decentralized multi agent systems shows aspect system includes assumptions agents non local events rc e priori confidence xce xa8 1 facing truth multi agent systems find little value trying force absolute truth xe2 x88 x80n m xe2 x88 x88 n xn xm instead frame problem dr 1 fit purpose solutions applied order optimize application contextualized confidences xce xa8 xce xb1 2 violation threshold xce xb5 xce xb1 actions agents detected managed agent 3 system integrity maintained point time path regain perceive agent centric solution requirements holographic management systemintegrity agent node system application specific validation routines sets validation rules lie heart decentralized application vary applications according context agent carefully keeps track representation portion reality importance context given application manage trade having high confidence thresholds xce xb5 xce xb1 low need resources complexity example consider different use cases transactions 1 receipt email message trying validate spam 2 commit monetary transaction trying validate double spend contexts different consequences agent wish evaluate differently willing x0c8 2 membranes provenance distributed systems rely mechanisms restrict participation nodes processes restriction compromise systemic integrity systems restrictions based nodes xe2 x80 x99 identity declared type authority collected history nodes xe2 x80 x99 behaviors know permissioned swanson15 systems restrictions based properties nodes known permissionless permissionless multi agent systems principle threat systemic integrity comes sybil attacks douceur02 adversary tries overcome system xe2 x80 x99s validation rules spawning large number compromised nodes permissioned permissionless systems mechanisms exists gate participation formally xe2 x88 x80t xe2 x88 x88 xe2 x88 x86 xe2 x88 x83 xce xb7 h xe2 x86 x92 n r xce xb7 h t n1 n2 nr dr case xe2 x84 xa6bitcoin xe2 x84 xa6ethereum m ignores value n makes determination solely z demonstrates xe2 x80 x9cproof xe2 x80 x9d proof x work stake sufficient gating protect sybilattacks giving data centric fallacy forcing ab solute truth xe2 x88 x80n m xe2 x88 x88 n xn xm reveals xe2 x80 x99t discard transaction provenance agent centric distributed systems instead rely central facts data 1 originates source 2 historical sequence local source reason xe2 x84 xa6hc splits system state data parts 1 node responsible maintain entire xn source chain ready confirm state nodes asked 2 nodes responsible share portions nodes xe2 x80 x99 transactions transactions xe2 x80 x99 meta data dht shard meta data includes validity status source optionally source xe2 x80 x99s chain headers provide historical sequence dht provides distributed access xe2 x80 x99 transactions evaluations validity 4 6 function xce xb7 maps range h hash function h r nodes r redundant shards given transaction t 12i having list nodes xce xb7 h t allows agent compare party viewpoints t transaction xe2 x80 x99s source s randomization hash function h ensures viewpoints represent unbiased sample r adjusted depending application xe2 x80 x99s constraints chosen trade costs system integrity properties provide sufficient infrastructure create system integrity detecting nodes don xe2 x80 x99t play rules like changing history content source chain appendix c detail tooling appropriate different contexts including ones detailed analysis source chain history required example financial transaction auditing depending application xe2 x80 x99s domain neighborhoods vulnerable sybil attacks sufficiently large percentage compromised nodes introduce bias sample agent evaluate given transaction holochain allows applications handle sybil attacks domain specific membrane functions chose inherently model agency system permission granted declined programmatic decentralized manner allowing applications appropriately land spectrum permissioned permissionless appendix d provide membrane schemes chosen outer membrane application nodes cross order talk node application secondary membrane inside application means nodes join permissionless participate aspects application integrity critical condition need provide certain criteria order pass membrane application crucial validation holochain applications maintain systemic integrity introducing consensus computationally expensive absolute truth 1 single node uses provenance independently verify single transaction sources involved transaction 2 holochain application ft let m n xcf x86 z binary function evaluates transactions type xcf x86 submitted n xe2 x88 x88 n accepted z arbitrary extra information needed evaluation m membrane function note component validation function v t v initial formalism5 transactions resembles knowledge gets constructed social fields interaction described sociological theory social constructivism properties dht conjunction hash function provide deterministically defined set nodes e neighborhood transaction easily construct transaction lands given neighborhood formally x0c9 recieved nodes result changing mother runs independently inherently permissioned application specific rules joining continuing participation application xe2 x80 x99s network provide benefit given holochain application tune expense validation contextually appropriate level 3 5 xe2 x88 x80m xe2 x88 x88 m let function gabout m return set nodes important node gossip defined properties m 6 define subsets gwith m according correlation means low vs high confidence value c gossip world model pull consisting nodes low confidence means need frequent gossip raise node xe2 x80 x99s confidence nodes include respect given node hold published entries hold entries responsible holding close node e lowest kbucket relies routing e subset k bucket b push consisting nodes high confidence implies need frequent gossip spread information node nodes include ones given node high confidence bad actor e directly experienced bad acting recevied bad actor gossipe nodes high confidence able bad actor evaluation dr ft far focused parts validation function v verify elments x maintaining system integrity distributed systems requires nodes mechanisms sharing information nodes broken validation rules excluded participation exist additionally forms bad acting live content transaction patterns transacting detrimental system example denial service attacks holochain uses gossip nodes share information experience behavior nodes informally information node xe2 x80 x99s world model section describe nature holochain xe2 x80 x99s gossip protocols build maintain node xe2 x80 x99s world model 12f described world model uptime metric maintaing redundant copies entries iv c 2 defined membrane function determines node shall accept transaction allowed function arbitrary data z main source data comes world model formally 1 recall node maintains set m metrics m nodes knows note terms formalism world model node xe2 x80 x99s non chain state data d 2 let m tuple tuples xc2 xb5 c self xc2 xb5 c record experience xc2 xb5 node respect given metric confidence c exprience directly experienced xe2 x80 x9dhearsay xe2 x80 x9d recieved nodes 3 allow class entries stored xn metric mw act signed declaration experience n node entries warrants warrants allow use standard tooling holochain provenance based verifyable claims nodes network propagate orthogonally usual dht methods gossip nodes need xe2 x80 x9dhear xe2 x80 x9d claims decisions interacting nodes 4 xe2 x88 x80m xe2 x88 x88 m let function gwith m return set nodes important node gossip defined probabilistc weighting information 7 todo describe gossip trigger function based pull vs pull distinction demostrates gossip happens computational costs gossip depend set metrics particular application needs track maintain system integrity application strong membership membrane uptime metrics necessary gossip balance resillience depend apriori knowledge nodes involved application applications loose membership membranes substantial number metrics complex membrane functions metrics require substantial compute effort holochain design intentionally leaves parameters loosly specificed applications built fit purpose 4 calm logical monotonicity todo description calm multi agent systems works case v complexity distributed systems section discuss complexity proposed architecture decentralized systems compare increasingly adopted blockchain pattern x0c10 formally describing complexity decentralized multi agent systems non trivial task complex approaches suggested marir2014 reason happens unclarity misunderstandings communities discussing complexity scalability bitcoin example bitcoin reddit order able ball park comparison approach current status quo decentralized application architecture proceed modeling worst case time complexity single node xe2 x84 xa6systemn ode system xe2 x84 xa6system functions number state transitions e transactions n number nodes system m transaction flood 90% network block size time xe2 x80 x99t pushed 4mb 12s respectively according croman et al 16 b ethereum let xe2 x84 xa6ethereum ethereum main network n number transactions m number fullclients network time complexity processing single transaction single node function code execution triggered given transaction plus constant c ftxi n m bitcoin similarly bitcoin result blockchain design decision maintain single state xe2 x88 x80n m xe2 x88 x88 n xn xm xe2 x80 x9cthis avoided costs uncertainty ensue likely kill confidence entire system xe2 x80 x9d eip 150 node process transaction sent resulting time complexity node ft let xe2 x84 xa6bitcoin bitcoin network n number transactions m number validating nodes e miners 10 xe2 x84 xa6bitcoin new transaction issued given node check transaction xe2 x80 x99s signature checks bitcoinwiki especially check transaction xe2 x80 x99s output transaction reject double spendings resulting time complexity c n x ftxi n m 5 1 transaction time complexity big o notation node function number transactions xe2 x84 xa6bitcoinn ode xe2 x88 x88 o n2 5 2 complexity handled bitcoin node 11 depend m number total nodes system node validate exactly set transactions system xe2 x80 x99s time complexity function number transactions number nodes results xe2 x84 xa6bitcoin xe2 x88 x88 o n2 m 5 3 note quadratic time complexity bitcoin xe2 x80 x99s transaction validation process creates main bottleneck reduces network xe2 x80 x99s gossip bandwidth node validate transaction passing order average 10 11 sake simplicity focusing lower bound system xe2 x80 x99s complexity neglecting nodes crucial operation network light clients clients involved process validation inherently participants result transactions model values separate parameters 5 5 0 dr c n 5 4 xe2 x84 xa6ethereumn ode xe2 x88 x88 o n xc2 xb7 favg n m 5 6 users incentivized hold average complexity favg n m code run ethereum small execution payed gas restrictions block pn gas limit words complexity 0 ftxi n m burdened nodes system systemic properties users running complex code ethereum bump network xe2 x80 x99s limits node process set transactions time complexity system node multiplied m xe2 x84 xa6ethereum xe2 x88 x88 o nm xc2 xb7 ftxi n m c 5 7 blockchain examples blockchain systems need non trivial computational overhead order work proof work hash crack process called mining overhead function number transactions directly number nodes omitted complexity analysis total energy consumption bitcoin miners today greater country iceland coppock17 x0c11 complexity c dlog m e 5 9 receiving state transition data node gossip q neighbors result r copies state transition entry stored system r different nodes nodes validate entry application specific logic complexity shall v n m combined results system wide complexity state transition given c dlog m e q r xc2 xb7 v n m z z dht lookup 5 10 validation implies following system complexity o notation xe2 x84 xa6holochain xe2 x88 x88 o n xc2 xb7 log m v n m 5 11 overall system complexity order enable comparison reason case holochain loss generality e dependent specific holochain application load system shared equally nodes assumptions given state transition probabil1 ity originating certain node m term lookup complexity needs divided m describe average lookup complexity node blockchain systems node transaction vast majority state transitions particular node involved stochastic closeness node xe2 x80 x99s public key xe2 x80 x99s hash entry xe2 x80 x99s hash triggers node xe2 x80 x99s involvement assume hash function h uniform distribution hash values results probability certain node r nodes 1 discard entry m times r average time complexity handled average node x11 x10n xe2 x84 xa6holochainn ode xe2 x88 x88 o xc2 xb7 log m v n m 5 12 m dr ft neglecting complexity blockchain xe2 x80 x99s consensus algorithm like silly mistake blockchains set block time average time blocks fixed parameter system keeps homeostasis adjusting hash crack xe2 x80 x99s difficulty according network xe2 x80 x99s total hash rate given network given set mining nodes given total hash rate complexity hash crack constant system grows miners come line increases networks total hashrate difficulty needs increase order average block time constant approach benefit higher total hashrate xhr increased difficulty adversary influence system creating biased blocks render party able double spend attacks blockchains subsidize mining depending high xhr economically impossible attacker overpower trusted miners direct relationship network xe2 x80 x99s total trusted hash rate level security mining power attacks means confidence xce xa8blockchain agent integrity system function system xe2 x80 x99s hash rate xhr precisely cost work cost xhr needed provide looking certain transaction t given hacker acts economically rationally confidence t added xn upper bound x12 x13 cost xhr xce xa8blockchain t min 1 5 8 value t order confidence unconstrained mining process architecture blockchain cost xhr includes setup mining hardware energy consumption grow linearly value exchanged system d holochain let xe2 x84 xa6hc given holochain system let n sum public12 e dht state transitions transactions let agents xe2 x84 xa6hc trigger total let m number agents nodes system putting new entry dht involves finding node responsible holding specific entry case according kademlia time 12 private 17 state transitions e confined local xn completely scope node xe2 x80 x99s agency don xe2 x80 x99t affect parts system directly omitted complexity analysis xe2 x84 xa6hc distributed system n note factor m represents average number state transactions node e load node highly application specific value priori expected lower bound nodes process state transitions produce overhead added architecture decentralized system node look complexity log m unknown application specific complexity v n m validation routines drive system xe2 x80 x99s complexity conceivable think holochain applications lot complexity validation routines basically possible mimic blockchain xe2 x80 x99s consensus vali x0c12 dation requirement enforcing validating node communicates nodes adding entry dht half nodes surely host applications little complexity specific state transitions application involve little complexity holochain app complexity needed rest system fast scalable section vi proceed providing real world use cases showing non trivial holochain applications built validation complexity o 1 resulting total time complexity node o log m high confidence integrity introducing proof work vi use cases social media 3 network transport libp2p including end end encryption 4 javascript virtual machine otto https github com robertkrimen otto 5 lisp virtual machines zygomys https github com glycerine zygomys additionally created benchmarking suite examine processing bandwidth storage scenarios compared ethereum applications similar scenarios seen https github com holochain benchmarks implement scalability tests large scale applications roadmap todo appendix dhthc 1 dhtputlink base link tag base link keys tag arbitrary string associates tuple link tag key base 2 dhtgetlinks base tag base key keys tag arbitrary string returns set links base identified tag dr consider simple implementation micro blogging holochain 1 fi fpost text node ffollow node fread text 2 fv fisoriginator 2 dht customized version libp2p ipfs xe2 x80 x99s kademlia implementation ft present use cases applications built holochain considering context use case affects complexity evaluation integrity validation design 1 30k lines code 3 dhtmod key newkey key newkey keys adds newkey modifier xcf x83key xe2 x88 x88 xe2 x88 x86 calls dhtputlink key newkey xe2 x80 x9creplacedby xe2 x80 x9d describe o 1 complexity 4 dhtdel key key key marks xcf x83key xe2 x88 x88 xe2 x88 x86 deleted b dpki identity 5 modification dhtget mod del appendix b fsys c money mutual credit vs coins complexity transaction higher complexity o n2 o log n holo currency white paper vii implementation time writing fully operational implementation system described paper includes separate virtual machines writing dna functions javascript lisp proofof concept implementations number applications including twitter clone slack like chat system dpki set mix libraries useful building applications 1 sys functions appendix c patterns trust management tools holochain available app developers use considered requirements system level globally parameterized application 1 countersigning todo 2 notaries todo xe2 x80 x93 xe2 x80 x9cthe network notary xe2 x80 x9d 3 publish headers e g chain rollback detection 4 source chain examination todo x0c13 5 blocked lists e g ddos spam etc ments passports identity cards agent entry second entry x 6 appendix d membranes xe2 x80 xa2 invitation natural approaches membrane crossing space agents provide identity rely invitation agents membrane invitation xe2 x80 x93 xe2 x80 x93 admin set application xe2 x80 x99s dna variable shared dht mutable constant xe2 x80 x93 multiple users applying social triangulation xe2 x80 xa2 proof service cryptographic proof delivery service hosting application intend leverage technique distributed cloud hosting application holo build holochain holo hosting white paper detail xe2 x80 xa2 proof work application xe2 x80 x99s requirement anonymity cryptographic hash cracking work applied blockchains useful work new members asked contribute community puzzle proof domain knowledge examples xe2 x80 x93 test knowledge local maps proof citizenship xe2 x80 x93 dna sequencing xe2 x80 x93 protein folding xe2 x80 x93 seti ft xe2 x80 xa2 proof identity reputation given presence applications chains attach identity reputation chain agent wants join crucial pillar ecosystem holochain applications plan deliver system level application called dpki distributed public key infrastructure function main identity reputation platform prototype app developed prior writing paper xe2 x80 x93 publication scientific article xe2 x80 xa2 proof stake payment depost payment agent certified dr xe2 x80 xa2 immune system blacklisting nodes don xe2 x80 x99t play application rules xe2 x80 xa2 proof presence use notarized acknowledgments docu thank steve sawin review paper latex 2 xce xb5 support dupont quinn dupont experiments algorithmic governance history ethnography dao failed decentralized autonomous organization http www iqdupont com assets documents dupont 2017 preprint algorithmic governance pdf eip 150 gavin wood ethereum secure decentralised generalised transaction ledger http yellowpaper io kademlia petar maymounkov david mazieres kademlia peer peer information system base xor metric https pdos csail mit edu petar papers maymounkov kademlia lncs pdf zhang13 zhang h wen y xie h yu n distributed hash table theory platforms applications croman et al 16 kyle croman christian decker ittay eyal adem efe gencer ari juels ahmed kosba andrew miller prateek saxena elaine shi emin gn sirer dawn song roger wattenhofer scaling blockchains financial cryptography data security springer verlag 2016 bitcoin reddit u mike hearn u awemany u nullc et al https www reddit com r bitcoin comments 3a5f1v mike hearn want scaling csa7exw context 3 st j8jfak3q sh 6e445294 reddit discussion 2015 marir2014 marir toufik mokhati farid bouchelaghem seridi hassina tamrabet zouheyr xe2 x80 x9d complexity measurement multi agent systems xe2 x80 x9d multiagent system technologies 12th german conference mates 2014 stuttgart germany september 23 25 2014 proceedings springer international publishing 2014 https doi org 10 1007 978 3 319 11584 9 13 coppock17 mark coppock worlds cryptocurrency mining uses electricity iceland https www digitaltrends com computing national x0c14 dr ft bitcoin ethereum mining use significant electrical power 2fiptps2002 pdf international workshop peer bitcoinwiki bitcoin protocol peer systems retrieved 23 april 2016 https en bitcoin wiki protocol rules 22tx holocurrency arthur brock eric harris braun 2017 22 messages bitcoin wiki holo cryptocurrency infrastructure global scale ipfs juan benet ipfs content addressed versioned stable value p2p file system draft 3 https holo host holo currency wp https ipfs io ipfs qmr7gsqm93cx5eag6a6yrznde1fqv7ul6x1o4k7zrja3lx nilsson15 nilsson kim 19 april 2015 missing mtgox ipfs draft3 pdf bitcoins xe2 x80 x9d retrieved 10 december 2015 libp2p juan benet david dias libp2p specification http blog wizsec jp 2015 04 https github com libp2p specs missing mtgox bitcoins html oxford oxford online dictionary swanson15 tim swanson consensus service brief https en oxforddictionaries com definition report emergence permissioned distributed provenance ledger systems april 6 2015 douceur02 douceur john r 2002 xe2 x80 x9dthe sybil attack xe2 x80 x9d https pdfs semanticscholar org f3a2 https www microsoft com en research 2daa64fc82fcda47e86ac50d555ffc24b8c7 pdf publication sybil attack http%3a% 2f%2fresearch microsoft com%2fpubs%2f74220% x0c