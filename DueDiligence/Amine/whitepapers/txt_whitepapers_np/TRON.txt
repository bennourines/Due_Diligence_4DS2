b Advanced Decentralized Blockchain Platform Whitepaper Version 2 0 TRON Protocol Version 3 2 TRON Foundation December 10th 2018 San Francisco \x0c1 Introduction 4 1 1 Vision 4 1 2 Background 4 1 3 History 5 1 4 Terminology 6 Address/Wallet 6 ABI 6 API 6 Asset 6 Bandwidth Points (BP) 6 Block 6 Block Reward 6 Block Header 6 Cold Wallet 7 DApp 7 gRPC 7 Hot Wallet 7 JDK 7 KhaosDB 7 LevelDB 7 Merkle Root 7 Public Testnet (Shasta) 8 RPC 8 Scalability 8 SUN 8 Throughput 8 Timestamp 8 TKC 8 TRC 10 8 TRX 8 2 Architecture 9 2 1 Core 10 2 2 Storage 10 2 2 1 Blockchain Storage 10 2 2 2 State Storage 10 1 \x0c2 3 Application 10 2 4 Protocol 11 2 4 1 Protocol Buffers 11 2 4 2 HTTP 11 2 5 TRON Virtual Machine (TVM) 11 2 6 Decentralized Exchange (DEX) 11 2 7 Implementation 12 3 Consensus 3 1 Delegated Proof of Stake (DPoS) 4 Account 13 13 16 4 1 Types 16 4 2 Creation 16 4 3 Structure 16 5 Block 5 1 Block Header 18 18 5 1 1 Raw Data 18 5 1 2 Witness Signature 19 5 1 3 Block ID 19 5 2 Transaction 19 5 2 1 Signing 19 5 2 2 Bandwidth Model 19 5 2 3 Fee 20 5 2 4 Transaction as Proof of Stake (TaPoS) 20 5 2 5 Transaction Confirmation 21 5 2 6 Structure 21 6 TRON Virtual Machine (TVM) 23 6 1 Introduction 23 6 2 Workflow 23 6 3 Performance 25 6 3 1 Lightweight Architecture 25 6 3 2 Robust 25 6 3 3 High Compatibility 25 6 3 4 Low Cost 25 7 Smart Contract 26 7 1 Introduction 26 7 2 Energy Model 26 7 3 Deployment 27 2 \x0c7 4 Trigger Function 27 7 5 TRON Solidity 27 8 Token 28 8 1 TRC 10 Token 28 8 2 TRC 20 Token 28 8 3 Beyond 29 9 Governance 30 9 1 Super Representative 30 9 1 1 General 30 9 1 2 Election 30 9 1 3 Reward 30 a Vote Reward 30 b Block Reward 31 c Reward Calculation 31 9 2 Committee 32 9 2 1 General 32 9 2 2 Dynamic Network Parameters 32 9 2 3 Create Proposal 36 9 2 4 Vote Proposal 36 9 2 5 Cancel Proposal 36 9 3 Structure 10 DApp Development 36 37 10 1 APIs 37 10 2 Networks 37 10 3 Tools 37 10 4 Resources 37 11 Conclusion 39 3 \x0c1 Introduction 1 1 Vision TRON is an ambitious project dedicated to the establishment of a truly decentralized Internet and its infrastructure The TRON Protocol one of the largest blockchain based operating systems in the world offers public blockchain support of high throughput high scalability and high availability for all Decentralized Applications (DApps) in the TRON ecosystem The July 2018 acquisition of BitTorrent further cemented TRON\xe2\x80\x99s leadership in pursuing a decentralized ecosystem 1 2 Background The introduction of Bitcoin in 2009 revolutionized society\xe2\x80\x99s perception of the traditional financial system in the wake of the Great Recession (2007 2008) As centralized hedge funds and banks collapsed from speculation in opaque financial derivatives blockchain technology provided a transparent universal ledger from which anybody could glean transaction information The transactions were cryptographically secured using a Proof of Work (PoW) consensus mechanism thus preventing double spend issues In late 2013 the Ethereum white paper proposed a network in which smart contracts and a Turing complete Ethereum Virtual Machine (EVM) would allow developers to interact with the network through DApps However as transaction volumes in Bitcoin and Ethereum peaked in 2017 it was apparent from the low transaction throughput times and high transaction fees that cryptocurrencies like Bitcoin and Ethereum in their existing state were not scalable for widespread adoption Thus TRON was founded and envisioned as an innovative solution to these pressing scalability challenges 4 \x0c1 3 History The TRON Foundation was established in July 2017 in Singapore In December 2017 TRON had launched its open source protocol The Testnet Blockchain Explorer and Web Wallet were all launched by March 2018 TRON Mainnet launched shortly afterward in May 2018 marking the Odyssey 2 0 release as a technical milestone In June 2018 TRON declared its independence with the creation of the Genesis block along with the July 2018 acquisition of BitTorrent In October 2018 TRON launched the TRON Virtual Machine (TVM) a complete developers\xe2\x80\x99 toolset and 360 support system The TRON roadmap involves combining BitTorrent\xe2\x80\x99s 100 million users with the TRON network via Project Atlas as well as fostering the developer community to launch exciting new DApps on the TRON network1 1 V1 0 is available at https //tron network/static/doc/white_paper_v_1_0 pdf 5 \x0c1 4 Terminology Address/Wallet An address or wallet consisting of account credentials on the TRON network are generated by a key pair which consists of a private key and a public key the latter being derived from the former through an algorithm The public key is usually used for session key encryption signature verification and encrypting data that could be decrypted by a corresponding private key ABI An application binary interface (ABI) is an interface between two binary program modules usually one of these modules is a library or an operating system facility and the other is a user run program API An application programming interface (API) is mainly used for user clients development With API support token issuance platforms can also be designed by developers themselves Asset In TRON\ s documents asset is the same as token which is also denoted as TRC 10 token Bandwidth Points (BP) To keep the network operating smoothly TRON network transactions use BP as fuel Each account gets 5000 free daily BP and more can be obtained by freezing TRX for BP Both TRX and TRC 10 token transfers are normal transactions costing BP Smart contract deployment and execution transactions consume both BP and Energy Block Blocks contain the digital records of transactions A complete block consists of the magic number block size block header transaction counter and transaction data Block Reward Block production rewards are sent to a sub account (address/wallet) Super Representatives can claim their rewards on Tronscan or through the API directly Block Header A block header is part of a block TRON block headers contain the previous block\xe2\x80\x99s hash the Merkle root timestamp version and witness address 6 \x0cCold Wallet Cold wallet also known as offline wallet keeps the private key completely disconnected from any network Cold wallets are usually installed on cold devices (e g computers or mobile phones staying offline) to ensure the security of TRX private key DApp Decentralized Application is an App that operates without a centrally trusted party An application that enables direct interaction/agreements/communication between end users and/or resources without a middleman gRPC gRPC2 (gRPC Remote Procedure Calls) is an open source remote procedure call (RPC) system initially developed at Google It uses HTTP/2 for transport Protocol Buffers as the interface description language and provides features such as authentication bidirectional streaming and flow control blocking or nonblocking bindings and cancellation and timeouts It generates cross platform client and server bindings for many languages Most common usage scenarios include connecting services in microservices style architecture and connecting mobile devices and browser clients to backend services Hot Wallet Hot wallet also known as online wallet allows user\ s private key to be used online thus it could be susceptible to potential vulnerabilities or interception by malicious actors JDK Java Development Kit is the Java SDK used for Java applications It is the core of Java development comprising the Java application environment (JVM+Java class library) and Java tools KhaosDB TRON has a KhaosDB in the full node memory that can store all the newly forked chains generated within a certain period of time and supports witnesses to switch from their own active chain swiftly into a new main chain See 2 2 2 State Storage for more details LevelDB LevelDB was initially adopted with the primary goal to meet the requirements of fast R/W and rapid development After launching the Mainnet TRON upgraded its database to an entirely customized one catered to its very own needs See 2 2 1 Blockchain Storage for more details Merkle Root A Merkle root is the hash of all hashes of all transactions included as part of a block in a blockchain network See 3 1 Delegated Proof of Stake (DPoS) for more details 2 https //en wikipedia org/wiki/GRPC 7 \x0cPublic Testnet (Shasta) A version of the network running in a single node configuration Developers can connect and test features without worrying about the economic loss Testnet tokens have no value and anyone can request more from the public faucet RPC3 In distributed computing a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network) which is coded as if it were a normal (local) procedure call without the programmer explicitly coding the details for the remote interaction Scalability Scalability is a feature of the TRON Protocol It is the capability of a system network or process to handle a growing amount of work or its potential to be enlarged to accommodate that growth SUN SUN replaced drop as the smallest unit of TRX 1 TRX = 1 000 000 SUN Throughput High throughput is a feature of TRON Mainnet It is measured in Transactions Per Second (TPS) namely the maximum transaction capacity in one second Timestamp The approximate time of block production is recorded as Unix timestamp which is the number of milliseconds that have elapsed since 00 00 00 01 Jan 1970 UTC TKC Token configuration TRC 10 A standard of crypto token on TRON platform Certain rules and interfaces are required to follow when holding an initial coin offering on TRON blockchain TRX TRX stands for Tronix which is the official cryptocurrency of TRON 3 https //en wikipedia org/wiki/Remote_procedure_call 8 \x0c2 Architecture TRON adopts a 3 layer architecture divided into Storage Layer Core Layer and Application Layer The TRON protocol adheres to Google Protobuf which intrinsically supports multi language extension Figure 1 TRON 3 layer Architecture 9 \x0c2 1 Core There are several modules in the core layer including smart contracts account management and consensus A stack based virtual machine is implemented on TRON and an optimized instruction set is used In order to better support DApp developers Solidity4 was chosen as the smart contract language followed by future support of other advanced languages In addition TRON\ s consensus mechanism is based on Delegated Proof of Stake (DPoS) and many innovations were made in order to meet its unique requirements 2 2 Storage TRON designed a unique distributed storage protocol consisting of Block Storage and State Storage The notion of a graph database was introduced into the design of the storage layer to better meet the need for diversified data storage in the real world 2 2 1 Blockchain Storage TRON blockchain storage chooses to use LevelDB which is developed by Google and proven successful with many companies and projects It has high performance and supports arbitrary byte arrays as both keys and values singular get put and delete batched put and delete bi directional iterators and simple compression using the very fast Snappy algorithm 2 2 2 State Storage TRON has a KhaosDB in the full node memory that can store all the newly forked chains generated within a certain period of time and supports witnesses to switch from their own active chain swiftly into a new main chain It can also protect blockchain storage by making it more stable from being terminating abnormally in an intermediate state 2 3 Application Developers can create a diverse range of DApps and customized wallets on TRON Since TRON enables smart contracts to be deployed and executed the opportunities of utility applications are unlimited 4 Solidity official documentation https //solidity readthedocs io/ 10 \x0c2 4 Protocol TRON protocol adheres to Google Protocol Buffers5 which is a language neutral platform neutral and extensible way of serializing structured data for use in communications protocols data storage and more 2 4 1 Protocol Buffers Protocol Buffers (Protobuf) is a flexible efficient automated mechanism for serializing structured data similar to JSON or XML but much smaller faster and simpler Protobuf ( proto) definitions can be used to generate code for C++ Java C# Python Ruby Golang and Objective C languages through the official code generators Various third party implementations are also available for many other languages Protobuf eases development for clients by unifying the API definitions and also optimizing data transfers Clients can take the API proto from TRON\xe2\x80\x99s protocol repository and integrate through the automatically generated code libraries As a comparison Protocol Buffers is 3 to 10 times smaller and 20 to 100 times faster than XML with less ambiguous syntax Protobuf generates data access classes that are easier to use programmatically 2 4 2 HTTP TRON Protocol provides a RESTful HTTP API alternative to the Protobuf API They share the same interface but the HTTP API can be readily used in javascript clients 2 5 TRON Virtual Machine (TVM) The TVM is a lightweight Turing complete virtual machine developed for TRON\xe2\x80\x99s ecosystem The TVM connects seamlessly with the existing development ecosystem to provide millions of global developers with a custom built blockchain system that is efficient convenient stable secure and scalable 2 6 Decentralized Exchange (DEX) 5 Google Protocol Buffers official documentation https //developers google com/protocol buffers/ 11 \x0cThe TRON network natively supports decentralized exchange functions A decentralized exchange consists of multiple trading pairs A trading pair (notation \xe2\x80\x9cExchange\xe2\x80\x9d) is an Exchange Market between TRC 10 tokens or between a TRC 10 token and TRX Any account can create a trading pair between any tokens even if the same pair already exists on the TRON network Trading and price fluctuations of the trading pairs follow the Bancor Protocol6 The TRON network stipulates that the weights of the two tokens in all trading pairs are equal so the ratio of their balances is the price between them For example consider a trading pair containing two tokens ABC and DEF ABC has a balance of 10 million and DEF has a balance of 1 million Since their weights are equal 10 ABC = 1 DEF This means that the ratio of ABC to DEF is 10 ABC per DEF 2 7 Implementation The TRON blockchain code is implemented in Java and was originally a fork from EthereumJ 6 Bancor Protocol official website https //about bancor network/protocol/ 12 \x0c3 Consensus 3 1 Delegated Proof of Stake (DPoS) The earliest consensus mechanism is the Proof of Work (PoW) consensus mechanism This protocol is currently implemented in Bitcoin7 and Ethereum8 In PoW systems transactions broadcast through the network are grouped together into nascent blocks for miner confirmation The confirmation process involves hashing transactions using cryptographic hashing algorithms until a merkle root has been reached creating a merkle tree Figure 2 8 TRX transactions are hashed into the merkle root This merkle root is then included in the block header which is attached to the previously confirmed blocks to form a blockchain This allows for easy and transparent tracking of transactions timestamps and other related information 7 8 Bitcoin whitepaper https //bitcoin org/bitcoin pdf Ethereum whitepaper https //github com/ethereum/wiki/wiki/White Paper 13 \x0cCryptographic hashing algorithms are useful in network attack prevention because they possess several properties9 \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f Input/Output length size\xe2\x80\x8b The algorithm can pass in an input of any length in size and outputs a fixed length hash value Efficiency\xe2\x80\x8b The algorithm is relatively easy and fast to compute Preimage resistance\xe2\x80\x8b For a given output \xe2\x80\x8bz \xe2\x80\x8b it is impossible to find any input \xe2\x80\x8bx\xe2\x80\x8b such that h(x) =\xe2\x80\x8b \xe2\x80\x8bz \xe2\x80\x8b In other words the hashing algorithm \xe2\x80\x8bh(x)\xe2\x80\x8b is a one way function in which only the output can be found given an input The reverse is not possible Collision resistance\xe2\x80\x8b It is computationally infeasible to find any pairs \xe2\x80\x8bx1\xe2\x80\x8b \xe2\x89\xa0 \xe2\x80\x8b \xe2\x80\x8b such that \xe2\x80\x8bh(x1\xe2\x80\x8b \xe2\x80\x8b) \xe2\x80\x8b x2 \xe2\x80\x8b = h(x2\xe2\x80\x8b )\xe2\x80\x8b \xe2\x80\x8b In other words the probability of finding two different inputs hashing to the same output is extremely low This property also implies \xe2\x80\x8bsecond preimage resistance\xe2\x80\x8b Second preimage resistance\xe2\x80\x8b Given \xe2\x80\x8bx\xe2\x80\x8b1\xe2\x80\x8b and thus \xe2\x80\x8bh(x\xe2\x80\x8b1\xe2\x80\x8b) \xe2\x80\x8b it is computationally infeasible to find any \xe2\x80\x8bx\xe2\x80\x8b2\xe2\x80\x8b such that \xe2\x80\x8bh(x\xe2\x80\x8b1\xe2\x80\x8b) = h(x\xe2\x80\x8b2)\xe2\x80\x8b \xe2\x80\x8b While this property is similar to \xe2\x80\x8bcollision resistance \xe2\x80\x8b the property differs in that it is saying an attacker with a given \xe2\x80\x8bx1\xe2\x80\x8b \xe2\x80\x8b will find it computationally infeasible to find any \xe2\x80\x8bx2\xe2\x80\x8b \xe2\x80\x8b hashing to the same output Deterministic\xe2\x80\x8b maps each input to one and only one output Avalanche effect\xe2\x80\x8b a small change in the input results in an entirely different output These properties give the cryptocurrency network its intrinsic value by ensuring attacks do not compromise the network When miners confirm a block they are rewarded tokens as a built in incentive for network participation However as the global cryptocurrency market capitalization steadily increased the miners became centralized and focused their computing resources on hoarding tokens as assets rather than for network participation purposes CPU miners gave way to GPUs which in turn gave way to powerful ASICs In one notable study the total power consumption of Bitcoin mining has been estimated to be as high as 3 GW10 comparable to Ireland\xe2\x80\x99s power consumption This same study projected total power consumption to reach 8 GW in the near future To solve the energy waste issue the Proof of Stake (PoS) consensus mechanism was proposed by many new networks In PoS networks token holders lock their token balances to become block validators The validators take turns proposing and voting on the next block However the problem with standard PoS is that validator influence correlates directly to the amount of tokens locked up This results in parties hoarding large amounts of the network\xe2\x80\x99s base currency wielding undue influence in the network ecosystem The TRON consensus mechanism uses an innovative Delegated Proof of Stake system in which 27 Super Representatives (SRs) produce blocks for the network Every 6 hours TRX account holders who freeze their accounts can vote for a selection of SR candidates with the top 27 candidates deemed the SRs Voters may choose SRs based on criteria such as projects sponsored by SRs to PAAR C PELZL J \xe2\x80\x8bUnderstanding Cryptography A Textbook for Students and Practitioners\xe2\x80\x8b 2010 ed Springer Verlag Berlin Heidelberg 2010 10 https //www sciencedirect com/science/article/pii/S2542435118301776 9 14 \x0cincrease TRX adoption and rewards distributed to voters This allows for a more democratized and decentralized ecosystem SRs\xe2\x80\x99 accounts are normal accounts but their accumulation of votes allows them to produce blocks With the low throughput rates of Bitcoin and Ethereum due to their PoW consensus mechanism and scalability issues TRON\xe2\x80\x99s DPoS system offers an innovative mechanism resulting in 2000 TPS compared to Bitcoin\xe2\x80\x99s 3 TPS and Ethereum\xe2\x80\x99s 15 TPS The TRON protocol network generates one block every three seconds with each block awarding 32 TRX to Super Representatives A total of 336 384 000 TRX will be awarded annually to the 27 SRs Each time an SR finishes block production rewards are sent to a sub account in the super ledger SRs can check but not directly make use of these TRX tokens A withdrawal can be made by each SR once every 24 hours transferring the rewards from the sub account to the specified SR account The three types of nodes on the TRON network are Witness Node Full Node and Solidity Node Witness nodes are set up by SRs and are mainly responsible for block production and proposal creation/voting Full nodes provide APIs and broadcast transactions and blocks Solidity nodes sync blocks from other Full Nodes and also provide indexable APIs 15 \x0c4 Account 4 1 Types The three types of accounts in the TRON network are regular accounts token accounts and contract accounts 1 Regular accounts are used for standard transactions 2 Token accounts are used for storing TRC 10 tokens 3 Contract accounts are smart contract accounts created by regular accounts and can be triggered by regular accounts as well 4 2 Creation There are three ways to create a TRON account 1 Create a new account through API 2 Transfer TRX into a new account address 3 Transfer any TRC 10 token into a new account address An offline key pair consisting of an address (public key) and a private key and not recorded by the TRON network can also be generated The user address generation algorithm consists of generating a key pair and then extracting the public key (64 byte byte array representing x y coordinates) Hash the public key using the SHA3 256 function (the SHA3 protocol adopted is KECCAK 256) and extract the last 20 bytes of the result Add 41 to the beginning of the byte array and ensure the initial address length is 21 bytes Hash the address twice using SHA3 256 function and take the first 4 bytes as verification code Add the verification code to the end of the initial address and obtain the address in base58check format through base58 encoding An encoded Mainnet address begins with T and is 34 bytes in length 4 3 Structure The three different account types are Normal AssetIssue and Contract An Account contains 7 parameters 1 account_name\xe2\x80\x8b the name for this account \xe2\x80\x93 e g BillsAccount 2 type\xe2\x80\x8b what type of this account is \xe2\x80\x93 e g 0 (stands for type \xe2\x80\x98Normal\xe2\x80\x99) 3 balance\xe2\x80\x8b balance of this account \xe2\x80\x93 e g 4213312 16 \x0c4 vote\xe2\x80\x8b received votes on this account \xe2\x80\x93 e g {(\xe2\x80\x9c0x1b7w\xe2\x80\xa69xj3\xe2\x80\x9d 323) (\xe2\x80\x9c0x8djq\xe2\x80\xa6j12m\xe2\x80\x9d 88) \xe2\x80\xa6 (\xe2\x80\x9c0x82nd\xe2\x80\xa6mx6i\xe2\x80\x9d 10001)} 5 asset\xe2\x80\x8b other assets expected TRX in this account \xe2\x80\x93 e g {<\xe2\x80\x9cWishToken\xe2\x80\x9d 66666> <\xe2\x80\x9dDogie\xe2\x80\x9d 233>} 6 latest_operation_time\xe2\x80\x8b the latest operation time of this account Protobuf data structure message\xe2\x80\x8b \xe2\x80\x8bAccount\xe2\x80\x8b { \xe2\x80\x8bmessage\xe2\x80\x8b \xe2\x80\x8bVote\xe2\x80\x8b { \xe2\x80\x8bbytes\xe2\x80\x8b vote_address = \xe2\x80\x8b1\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b vote_count = \xe2\x80\x8b2\xe2\x80\x8b } \xe2\x80\x8bbytes\xe2\x80\x8b accout_name = \xe2\x80\x8b1\xe2\x80\x8b AccountType type = \xe2\x80\x8b2\xe2\x80\x8b \xe2\x80\x8bbytes\xe2\x80\x8b address = \xe2\x80\x8b3\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b balance = \xe2\x80\x8b4\xe2\x80\x8b \xe2\x80\x8brepeated\xe2\x80\x8b Vote votes = \xe2\x80\x8b5\xe2\x80\x8b map<\xe2\x80\x8bstring\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b> asset = \xe2\x80\x8b6\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b latest_operation_time = \xe2\x80\x8b10\xe2\x80\x8b } enum\xe2\x80\x8b \xe2\x80\x8bAccountType\xe2\x80\x8b { Normal = \xe2\x80\x8b0\xe2\x80\x8b AssetIssue = \xe2\x80\x8b1\xe2\x80\x8b Contract = \xe2\x80\x8b2\xe2\x80\x8b } 17 \x0c5 Block A block typically contains a block header and several transactions Protobuf data structure message\xe2\x80\x8b \xe2\x80\x8bBlock\xe2\x80\x8b { BlockHeader block_header = \xe2\x80\x8b1\xe2\x80\x8b \xe2\x80\x8brepeated\xe2\x80\x8b Transaction transactions = \xe2\x80\x8b2\xe2\x80\x8b } 5 1 Block Header A block header contains \xe2\x80\x8braw_data\xe2\x80\x8b w \xe2\x80\x8b itness_signature\xe2\x80\x8b and \xe2\x80\x8bblockID\xe2\x80\x8b Protobuf data structure message\xe2\x80\x8b \xe2\x80\x8bBlockHeader\xe2\x80\x8b { \xe2\x80\x8bmessage\xe2\x80\x8b \xe2\x80\x8braw\xe2\x80\x8b { \xe2\x80\x8bint64\xe2\x80\x8b timestamp = \xe2\x80\x8b1\xe2\x80\x8b \xe2\x80\x8bbytes\xe2\x80\x8b txTrieRoot = \xe2\x80\x8b2\xe2\x80\x8b \xe2\x80\x8bbytes\xe2\x80\x8b parentHash = \xe2\x80\x8b3\xe2\x80\x8b \xe2\x80\x8buint64\xe2\x80\x8b number = \xe2\x80\x8b4\xe2\x80\x8b \xe2\x80\x8buint64\xe2\x80\x8b version = \xe2\x80\x8b5\xe2\x80\x8b \xe2\x80\x8bbytes\xe2\x80\x8b witness_address = \xe2\x80\x8b6\xe2\x80\x8b } \xe2\x80\x8bbytes\xe2\x80\x8b witness_signature = 2 \xe2\x80\x8b \xe2\x80\x8b \xe2\x80\x8bbytes\xe2\x80\x8b blockID = \xe2\x80\x8b3\xe2\x80\x8b } 5 1 1 Raw Data Raw data is denoted as \xe2\x80\x8braw_data\xe2\x80\x8b in Protobuf It contains the raw data of a message containing 6 parameters 1 2 3 4 5 timestamp\xe2\x80\x8b timestamp of this message \xe2\x80\x93 e g 1543884429000 txTrieRoot\xe2\x80\x8b the Merkle Tree\xe2\x80\x99s Root \xe2\x80\x93 e g 7dacsa\xe2\x80\xa63ed parentHash\xe2\x80\x8b the hash of the last block \xe2\x80\x93 e g 7dacsa\xe2\x80\xa63ed number\xe2\x80\x8b the block height \xe2\x80\x93 e g 4638708 version\xe2\x80\x8b reserved \xe2\x80\x93 e\xe2\x80\x8b g 5 18 \x0c6 witness_address\xe2\x80\x8b the address of the witness packed in this block \xe2\x80\x93 e g 41928c 4d21 5 1 2 Witness Signature Witness signature is denoted as \xe2\x80\x8bwitness_signature\xe2\x80\x8b in Protobuf which is the signature for this block header from the witness node 5 1 3 Block ID Block ID is denoted as \xe2\x80\x8bblockID\xe2\x80\x8b in Protobuf It contains the atomic identification of a block A Block ID contains 2 parameters 1 hash\xe2\x80\x8b the hash of block 2 number\xe2\x80\x8b the hash and height of the block 5 2 Transaction 5 2 1 Signing TRON\xe2\x80\x99s transaction signing process follows a standard ECDSA cryptographic algorithm with a SECP256K1 selection curve A private key is a random number and the public key is a point on the elliptic curve The public key generation process consists of first generating a random number as a private key and then multiplying the base point of the elliptic curve by the private key to obtain the public key When a transaction occurs the transaction raw data is first converted into byte format The raw data then undergoes SHA 256 hashing The private key corresponding to the contract address then signs the result of the SHA256 hash The signature result is then added to the transaction 5 2 2 Bandwidth Model Ordinary transactions only consume bandwidth points but smart contract operations consume both energy and bandwidth points There are two types of bandwidth points available Users can gain bandwidth points from freezing TRX while 5000 free bandwidth points are also available daily When a TRX transaction is broadcast it is transmitted and stored in the form of a byte array over the network Bandwidth Points consumed by one transaction = number of transaction bytes multiplied by bandwidth points rate For example if the byte array length of a transaction is 200 then the transaction consumes 200 bandwidth points However if a TRX or token transfer results in the target account being created then only the bandwidth points consumed to create the account will be deducted and additional bandwidth points will not be deducted In an account creation scenario the network will first consume the bandwidth points that the transaction initiator gained 19 \x0cfrom freezing TRX If this amount is insufficient then the network consumes the transaction initiator\xe2\x80\x99s TRX In standard TRX transfer scenarios from one TRX account to another the network first consumes the bandwidth points gained by the transaction initiator for freezing TRX If that is insufficient it then consumes from the free 5000 daily bandwidth points If that is still not enough then the network consumes the TRX of the transaction initiator The amount is calculated by the number of bytes in the transaction multiplied by 10 SUN Thus for most TRX holders who may not necessarily freeze their TRX to participate in SR voting the first step is automatically skipped (since TRX balance frozen = 0) and the 5000 daily free bandwidth powers the transaction For TRC 10 token transfers the network first verifies whether the total free bandwidth points of the issued token asset are sufficient If not the bandwidth points obtained from freezing TRX are consumed If there is still not enough bandwidth points then it consumes the TRX of the transaction initiator 5 2 3 Fee TRON network generally does not charge fees for most transactions however due to system restrictions and fairness bandwidth usage and transactions do take in certain fees Fee charges are broken down into the following categories 1 Normal transactions cost bandwidth points Users can use the free daily bandwidth points (5000) or freeze TRX to obtain more When bandwidth points are not enough TRX will be used directly from the sending account The TRX needed is the number of bytes * 10 SUN 2 Smart contracts cost energy (Section 6) but will also need bandwidth points for the transaction to be broadcasted and confirmed The bandwidth cost is the same as above 3 All query transactions are free It doesn\xe2\x80\x99t cost energy or bandwidth TRON network also defines a set of fixed fees for the following transactions 1 Creating a witness node 9999 TRX 2 Issuing a TRC 10 token 1024 TRX 3 Creating a new account 0 1 TRX 4 Creating an exchange pair 1024 TRX 5 2 4 Transaction as Proof of Stake (TaPoS) TRON uses TaPoS to ensure the transactions all confirm the main blockchain while making it difficult to forge counterfeit chains In TaPoS the networks require each transaction include part of the hash of a recent block header This requirement prevents transactions from being replayed on forks not including the referenced block and also signals the network that a particular user and their 20 \x0cstake are on a specific fork This consensus mechanism protects the network against Denial of Service 51% selfish mining and double spend attacks 5 2 5 Transaction Confirmation A transaction is included in a future block after being broadcast to the network After 19 blocks are mined on TRON (including its own block) the transaction is confirmed Each block is produced by one of the top 27 Super Representatives in a round robin fashion Each block takes ~3 seconds to be mined on the blockchain Time may slightly vary for each Super Representative due to network conditions and machine configurations In general a transaction is considered fully confirmed after ~1 minute 5 2 6 Structure Transaction APIs consist of the following functions message\xe2\x80\x8b \xe2\x80\x8bTransaction\xe2\x80\x8b { \xe2\x80\x8bmessage\xe2\x80\x8b \xe2\x80\x8bContract\xe2\x80\x8b { \xe2\x80\x8benum\xe2\x80\x8b \xe2\x80\x8bContractType\xe2\x80\x8b { AccountCreateContract = \xe2\x80\x8b0\xe2\x80\x8b // Create account/wallet TransferContract = \xe2\x80\x8b1\xe2\x80\x8b // Transfer TRX TransferAssetContract = \xe2\x80\x8b2\xe2\x80\x8b // Transfer TRC10 token VoteWitnessContract = \xe2\x80\x8b4\xe2\x80\x8b // Vote for Super Representative (SR) WitnessCreateContract = \xe2\x80\x8b5\xe2\x80\x8b // Create a new SR account AssetIssueContract = \xe2\x80\x8b6\xe2\x80\x8b // Create a new TRC10 token WitnessUpdateContract = \xe2\x80\x8b8\xe2\x80\x8b // Update SR information ParticipateAssetIssueContract = \xe2\x80\x8b9\xe2\x80\x8b // Purchase TRC10 token AccountUpdateContract = \xe2\x80\x8b10\xe2\x80\x8b // Update account/wallet information FreezeBalanceContract = \xe2\x80\x8b11\xe2\x80\x8b // Freeze TRX for bandwidth or energy UnfreezeBalanceContract = \xe2\x80\x8b12\xe2\x80\x8b // Unfreeze TRX WithdrawBalanceContract = \xe2\x80\x8b13\xe2\x80\x8b // Withdraw SR rewards once per day UnfreezeAssetContract = \xe2\x80\x8b14\xe2\x80\x8b // Unfreeze TRC10 token UpdateAssetContract = \xe2\x80\x8b15\xe2\x80\x8b // Update a TRC10 token\xe2\x80\x99s information ProposalCreateContract = \xe2\x80\x8b16\xe2\x80\x8b // Create a new network proposal by any SR ProposalApproveContract = \xe2\x80\x8b17\xe2\x80\x8b // SR votes yes for a network proposal ProposalDeleteContract = \xe2\x80\x8b18\xe2\x80\x8b // Delete a network proposal by owner CreateSmartContract = \xe2\x80\x8b30\xe2\x80\x8b // Deploy a new smart contract TriggerSmartContract = \xe2\x80\x8b31\xe2\x80\x8b // Call a function on a smart contract GetContract = \xe2\x80\x8b32\xe2\x80\x8b // Get an existing smart contract UpdateSettingContract = \xe2\x80\x8b33\xe2\x80\x8b // Update a smart contract\xe2\x80\x99s parameters ExchangeCreateContract = \xe2\x80\x8b41\xe2\x80\x8b // Create a token trading pair on DEX ExchangeInjectContract = \xe2\x80\x8b42\xe2\x80\x8b // Inject funding into a trading pair 21 \x0cExchangeWithdrawContract = \xe2\x80\x8b43\xe2\x80\x8b // Withdraw funding from a trading pair ExchangeTransactionContract = \xe2\x80\x8b44\xe2\x80\x8b // Perform token trading UpdateEnergyLimitContract = \xe2\x80\x8b45\xe2\x80\x8b // Update origin_energy_limit on a smart contract } } } 22 \x0c6 TRON Virtual Machine (TVM) 6 1 Introduction TRON Virtual Machine (TVM) is a lightweight Turing complete virtual machine developed for the TRON\ s ecosystem Its goal is to provide a custom built blockchain system that is efficient convenient stable secure and scalable TVM initially forked from EVM11 and can connect seamlessly with the existing solidity smart contract development ecosystem Based on that TVM additionally supports DPoS consensus TVM employs the concept of Energy Different from the Gas mechanism on EVM operations of transactions and smart contracts on TVM are free with no TRX consumed Technically executable computation capacity on TVM is not restricted by total holding amount of tokens 6 2 Workflow The compiler first translates the Solidity smart contract into bytecode readable and executable on the TVM The TVM then processes data through opcode which is equivalent to operating the logic of a stack based finite state machine Finally the TVM accesses blockchain data and invokes External Data Interface through the Interoperation layer 11 EVM Ethereum Virtual Machine (https //github com/ethereum/ethereumj) 23 \x0cFigure 3 TVM Workflow 24 \x0c6 3 Performance 6 3 1 Lightweight Architecture TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance 6 3 2 Robust TRX transfers and smart contract execution cost bandwidth points only instead of TRX which exempts TRON from being attacked Bandwidth consumption is predictable and static since each computational step cost is fixed 6 3 3 High Compatibility TVM is compatible with EVM and will be compatible with more mainstream VMs in the future Thereby all smart contracts on EVM are executable on TVM 6 3 4 Low Cost Due to TVM\xe2\x80\x99s bandwidth setup development costs are reduced and developers can focus on the logic development of their contract code TVM also offers all in one interfaces for contract deployment triggering and viewing to offer the convenience for developers 25 \x0c7 Smart Contract 7 1 Introduction A smart contract is a protocol that digitally verifies contract negotiation They define the rules and penalties related to an agreement and also automatically enforce those obligations The smart contract code facilitates verifies and enforces the negotiation or performance of an agreement or transaction From a tokenization perspective smart contracts also facilitate automatic funds transfers between participating parties should certain criteria be met TRON smart contracts are written in the Solidity language Once written and tested they can be compiled into bytecode then deployed onto the TRON network for the TRON Virtual Machine Once deployed smart contracts can be queried via their contract addresses The contract Application Binary Interface (ABI) shows the contract\xe2\x80\x99s call functions and is used for interacting with the network 7 2 Energy Model The maximum energy limit for deploying and triggering a smart contract is a function of several variables \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f \xe2\x97\x8f Dynamic energy from freezing 1 TRX is 50 000 000 000 (Total Energy Limit) / (Total Energy Weight) Energy limit is the daily account energy limit from freezing TRX Remaining daily account energy from freezing TRX is calculated as Energy Limit Energy Used Fee limit in TRX is set in smart contract deploy/trigger call Remaining usable TRX in the account Energy per TRX if purchased directly (10 SUN = 1 Energy) = 100 000 SRs can vote on adjustment There are two consumption scenarios to calculate for maximum energy limit for deployment and trigger The logic can be expressed as follows const\xe2\x80\x8b const\xe2\x80\x8b const\xe2\x80\x8b const\xe2\x80\x8b const\xe2\x80\x8b R F E L T = = = = = Dynamic Energy Limit Daily account energy \xe2\x80\x8bfrom\xe2\x80\x8b freezing TRX Remaining daily account energy \xe2\x80\x8bfrom\xe2\x80\x8b freezing TRX Fee limit \xe2\x80\x8bin\xe2\x80\x8b TRX set \xe2\x80\x8bin\xe2\x80\x8b deploy/trigger call Remaining usable TRX \xe2\x80\x8bin\xe2\x80\x8b account 26 \x0cconst\xe2\x80\x8b C = Energy per TRX \xe2\x80\x8bif\xe2\x80\x8b purchased directly // Calculate M defined as maximum energy limit for deployment/trigger of smart contract if\xe2\x80\x8b F > L*R let\xe2\x80\x8b M = min(E+T*C L*R) else let\xe2\x80\x8b M = E+T*C 7 3 Deployment When a TRON solidity smart contract is compiled the TRON Virtual Machine reads the compiled bytecode The bytecode consists of a section for code deployment contract code and the Auxdata The Auxdata is the source code\xe2\x80\x99s cryptographic fingerprint used for verification The deployment bytecode runs the constructor function and sets up the initial storage variables The deployment code also calculates the contract code and returns it to the TVM The ABI is a JSON file that describes a TRON smart contract\xe2\x80\x99s functions This file defines the function names their payability the function return values and their state mutability 7 4 Trigger Function Once the TRON smart contracts are deployed their functions can be triggered individually either via TronStudio or through API calls State changing functions require Energy while read only functions execute without Energy 7 5 TRON Solidity TRON Solidity is a fork from Ethereum\xe2\x80\x99s Solidity language TRON modifies the original project to support TRX and SUN units (1 TRX = 1 000 000 SUN) The rest of the language syntax is compatible with Solidity ^0 4 24 Thus the Tron Virtual Machine (TVM) is almost 100% compatible with EVM instructions 27 \x0c8 Token 8 1 TRC 10 Token In the TRON network each account can issue tokens at the expense of 1024 TRX \xe2\x80\x8bTo issue tokens the issuer needs to specify a token name the total capitalization the exchange rate to TRX circulation duration description website maximum bandwidth consumption per account total bandwidth consumption and the amount of token frozen Each token issuance can also configure each account\xe2\x80\x99s maximum daily token transfer Bandwidth Points the entire network\xe2\x80\x99s maximum daily token transfer Bandwidth Points total token supply locking duration in days and the total amount of tokens locked 8 2 TRC 20 Token TRC 20 is a technical standard used for smart contracts implementing tokens supported by the TRON Virtual Machine It is fully compatible with ERC 20 The interface is as follows contract\xe2\x80\x8b TRC20Interface { \xe2\x80\x8bfunction\xe2\x80\x8b \xe2\x80\x8btotalSupply\xe2\x80\x8b() \xe2\x80\x8bpublic\xe2\x80\x8b \xe2\x80\x8bconstant\xe2\x80\x8b \xe2\x80\x8breturns\xe2\x80\x8b (uint) \xe2\x80\x8bfunction\xe2\x80\x8b \xe2\x80\x8bbalanceOf\xe2\x80\x8b(address tokenOwner) \xe2\x80\x8bpublic\xe2\x80\x8b \xe2\x80\x8bconstant\xe2\x80\x8b \xe2\x80\x8breturns\xe2\x80\x8b (uint balance) \xe2\x80\x8bfunction\xe2\x80\x8b \xe2\x80\x8ballowance\xe2\x80\x8b(address tokenOwner address spender) \xe2\x80\x8bpublic\xe2\x80\x8b \xe2\x80\x8bconstant returns\xe2\x80\x8b (uint remaining) \xe2\x80\x8bfunction\xe2\x80\x8b \xe2\x80\x8btransfer\xe2\x80\x8b(address to uint tokens) \xe2\x80\x8bpublic\xe2\x80\x8b \xe2\x80\x8breturns\xe2\x80\x8b (bool success) \xe2\x80\x8bfunction\xe2\x80\x8b \xe2\x80\x8bapprove\xe2\x80\x8b(address spender uint tokens) \xe2\x80\x8bpublic\xe2\x80\x8b r \xe2\x80\x8b eturns\xe2\x80\x8b (bool success) \xe2\x80\x8bfunction\xe2\x80\x8b \xe2\x80\x8btransferFrom\xe2\x80\x8b(address from address to uint tokens) \xe2\x80\x8bpublic returns\xe2\x80\x8b (bool success) \xe2\x80\x8bevent\xe2\x80\x8b T \xe2\x80\x8b ransfer\xe2\x80\x8b(address indexed from address indexed to uint tokens) \xe2\x80\x8bevent\xe2\x80\x8b A \xe2\x80\x8b pproval\xe2\x80\x8b(address indexed tokenOwner address indexed spender uint tokens) } From a developer\xe2\x80\x99s perspective there are several differences between TRC 10 and TRC 20 Some of the key differences are that TRC 10 tokens are accessible by APIs and smart contracts while TRC 20 tokens allow for interface customization but are only accessible within smart contracts 28 \x0cFrom a cost perspective TRC 10 tokens have transaction fees that are 1000 times lower than TRC 20 but carry bandwidth costs for API transfers and deposits Transfers and deposits in smart contracts for TRC 10 tokens cost both bandwidth and energy 8 3 Beyond Since TRON uses the same Solidity version as Ethereum more token standards could be readily ported to TRON 29 \x0c9 Governance 9 1 Super Representative 9 1 1 General Every account in the TRON network can apply and have the opportunity to become a Super Representative (denoted as SR) Everyone can vote for SR candidates The top 27 candidates with the most votes will become SRs with the right and obligation to generate blocks The votes are counted every 6 hours and the SRs will change accordingly To prevent malicious attacks there is a cost to becoming an SR candidate When applying 9999 TRX will be burned from the applicant\xe2\x80\x99s account Once successful such account can join the SR election 9 1 2 Election TRON Power (denoted as TP) is needed to vote and the amount of TP depends on the voter\xe2\x80\x99s frozen assets (TRX) TP is calculated in the following way 1 T P = 1 T RX f rozen to get bandwidth Every account in the TRON network has the right to vote for their own SRs After the release (unfreeze available after 3 days) users won\ t have any frozen assets and lose all TP accordingly As a result all votes become invalid for the ongoing and future voting round unless TRX is frozen again to vote Note that the TRON network only records the most recent vote which means that every new vote will negate all previous votes 9 1 3 Reward a Vote Reward 30 \x0cAlso known as Candidate Reward which the top 127 candidates updated once every round (6 hours) will share 115 200 TRX as mined The reward will be split in accordance with the vote weight each candidate receives Each year the total reward for candidates will be 168 192 000 TRX Total vote reward per round Why 115 200 TRX every round 115 200 T RX = total vote reward per round (V R/round) V R/round = 16 T RX/block \xc3\x97 20 blocks/min \xc3\x97 60 mins/hr \xc3\x97 6 hrs/round Notice this is set by WITNESS_STANDBY_ALLOWANCE = 115 200 TRX See dynamic network parameters Total vote reward per year Why 168 192 000 TRX every year 168 192 000 T RX = total vote reward per year (V R/year) V R/year = 115 200 T RX/round \xc3\x97 4 rounds/day \xc3\x97 365 days/year b Block Reward Also known as Super Representative Reward which the top 27 candidates (SRs) who are elected every round (6 hours) will share roughly 230 400 TRX as mined The reward will be split evenly between the 27 SRs (minus the total reward blocks missed due to network error) A total of 336 384 000 TRX will be awarded annually to the 27 SRs Total block reward per round Why 230 400 TRX every round 230 400 T RX = total block reward per round (BR/round) B R/round = 32 T RX/bloc \xc3\x97 20 blocks/min \xc3\x97 60 mins/hr \xc3\x97 6 hrs/round Notice the unit block reward is set by WITNESS_PAY_PER_BLOCK = 32 TRX See dynamic network parameters Total block reward per year Why 336 384 000 TRX every year 336 384 000 T RX = total block reward per year (BR/year) B R/year = 230 400 T RX/round \xc3\x97 4 rounds/day \xc3\x97 365 days/year January 1 2021 There will be no inflation on the TRON network before January 1 2021 and the TRON Foundation will award all block rewards and candidate rewards prior to that date c Reward Calculation 31 \x0cSR reward calculation total reward = vote reward (V R) + block reward (BR) candidate received V R = total V R \xc3\x97 votes SR total votes total BR \xe2\x88\x92 block missed \xc3\x97 32 27 Note the reward is calculated per SR per round (6 hours) BR = Rank 28 to rank 127 SR candidate reward calculation total reward = vote reward (V R) candidate received V R = total V R \xc3\x97 votes SR total votes Note the reward is calculated per SR candidate per round (6 hours) 9 2 Committee 9 2 1 General The committee is used to modify TRON dynamic network parameters such as block generation rewards transaction fees etc The committee consists of the 27 SRs in the current round Each SR has the right to propose and vote on proposals When a proposal receives 19 votes or more it is approved and the new network parameters will be applied in the next maintenance period (3 days) 9 2 2 Dynamic Network Parameters 0 MAINTENANCE_TIME_INTERVAL a Description Modify the maintenance interval time in ms Known as the SR vote interval time per round b Example [6 * 3600 * 1000] ms which is 6 hours c Range [3 * 27* 1000 24 * 3600 * 1000] ms 1 ACCOUNT_UPGRADE_COST a Description Modify the cost of applying for SR account b Example [9 999 000 000] SUN which is 9 999 TRX c Range [0 100 000 000 000 000 000] SUN 2 CREATE_ACCOUNT_FEE a Description Modify the account creation fee 32 \x0c3 4 5 6 7 b Example [100 000] SUN which is 1 TRX c Range [0 100 000 000 000 000 000] SUN TRANSACTION_FEE a Description Modify the amount of fee used to gain extra bandwidth b Example [10] SUN/byte c Range [0 100 000 000 000 000 000] SUN/byte ASSET_ISSUE_FEE a Description Modify asset issuance fee b Example [1024 000 000] SUN which is 1024 TRX c Range [0 100 000 000 000 000 000] SUN WITNESS_PAY_PER_BLOCK a Description Modify SR block generation reward Known as unit block reward b Example [32 000 000] SUN which is 32 TRX c Range [0 100 000 000 000 000 000] SUN WITNESS_STANDBY_ALLOWANCE a Description Modify the rewards given to the top 127 SR candidates Known as total vote reward per round b Example [115 200 000 000] SUN which is 115 200 TRX c Range [0 100 000 000 000 000 000] SUN CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT a Description Modify the cost of account creation Combine dynamic network parameters #8 to get total account creation cost C REAT E_N EW _ACCOU N T _F EE_IN _SY ST EM _CON T RACT \xc3\x97 C REAT E_N EW _ACCOU N T _BAN DW IDT H_RAT E b Example [0] SUN c Range [0 100 000 000 000 000 000] SUN 8 CREATE_NEW_ACCOUNT_BANDWIDTH_RATE 33 \x0ca Description Modify the cost of account creation Combine dynamic network parameters #7 to get total account creation cost C REAT E_N EW _ACCOU N T _F EE_IN _SY ST EM _CON T RACT \xc3\x97 C REAT E_N EW _ACCOU N T _BAN DW IDT H_RAT E b Example [1] c Range [0 100 000 000 000 000 000] 9 ALLOW_CREATION_OF_CONTRACTS a Description To turn on Tron Virtual Machine (TVM) b Example True set to activate and effect since 10/10/2018 23 47 UTC c Range True/False 10 REMOVE_THE_POWER_OF_THE_GR a Description Remove the initial GR genesis votes b Example True effected at 11/4/2018 08 46 UTC c Range True/False Notice cannot set back to False from True 11 ENERGY_FEE a Description Modify the fee of 1 energy b Example 20 SUN c Range [0 100 000 000 000 000 000] SUN 12 EXCHANGE_CREATE_FEE a Description Modify the cost of trading pair creation Known as the cost of creating a trade order b Example [1 024 000 000] SUN which is 1024 TRX c Range [0 100 000 000 000 000 000] SUN 13 MAX_CPU_TIME_OF_ONE_TX a Description Modify the maximum execution time of one transaction Known as the timeout limit of one transaction b Example 50 ms c Range 34 \x0c[0 1000] ms 14 ALLOW_UPDATE_ACCOUNT_NAME a Description Modify the option to let an account update their account name b Example False which is available to propose from java tron Odyssey v3 2 c Range True/False Notice cannot set back to False from True 15 ALLOW_SAME_TOKEN_NAME a Description Modify the validation of allowing different token have a duplicate name b Example False which is available to propose from java tron Odyssey v3 2 c Range True/False Notice cannot set back to False from True 16 ALLOW_DELEGATE_RESOURCE a Description Modify the validation of allowing to issue token with a duplicate name so the tokenID\xe2\x80\x8b of the token in long integer data type would be the only atomic identification of a token b Example False which is available to propose from java tron Odyssey v3 2 c Range True/False Notice cannot set back to False from True 17 TOTAL_ENERGY_LIMIT a Description Modify the whole network total energy limit b Example [50 000 000 000 000 000] SUN which is 50 000 000 000 TRX c Range [0 100 000 000 000 000 000] SUN 18 ALLOW_TVM_TRANSFER_TRC10 a Description Allow TRC 10 token transfer within smart contracts ALLOW_UPDATE_ACCOUNT_NAME ALLOW_SAME_TOKEN_NAME ALLOW_DELEGATE_RESOURCE proposals must all be approved before proposing this parameter change b Example False which is available to propose from java tron Odyssey v3 2 c Range True/False Notice cannot set back to False from True 35 \x0c9 2 3 Create Proposal Only the SR accounts have the rights to propose a change in dynamic network parameters 9 2 4 Vote Proposal Only committee members (SRs) can vote for a proposal and the member who does not vote in time will be considered as a disagree The proposal is active for 3 days after it is created The vote can be changed or retrieved during the 3 days voting window Once the period ends the proposal will either succeed (19+ votes) or fail (and end) 9 2 5 Cancel Proposal The proposer can cancel the proposal before it becomes effective 9 3 Structure SRs are the witnesses of newly generated blocks A witness contains 8 parameters 1 address\xe2\x80\x8b the address of this witness \xe2\x80\x93 e g 0xu82h\xe2\x80\xa67237 2 voteCount\xe2\x80\x8b number of received votes on this witness \xe2\x80\x93 e g 234234 3 pubKey\xe2\x80\x8b the public key for this witness \xe2\x80\x93 e g 0xu82h\xe2\x80\xa67237 4 url\xe2\x80\x8b the url for this witness \xe2\x80\x93 e g https //www noonetrust com 5 totalProduced\xe2\x80\x8b the number of blocks this witness produced \xe2\x80\x93 e g 2434 6 totalMissed\xe2\x80\x8b the number of blocks this witness missed \xe2\x80\x93 e g 7 7 latestBlockNum\xe2\x80\x8b the latest height of block \xe2\x80\x93 e g 4522 8 isjobs\xe2\x80\x8b a boolean flag Protobuf data structure message\xe2\x80\x8b \xe2\x80\x8bWitness\xe2\x80\x8b{ \xe2\x80\x8bbytes\xe2\x80\x8b address = \xe2\x80\x8b1\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b voteCount = \xe2\x80\x8b2\xe2\x80\x8b \xe2\x80\x8bbytes\xe2\x80\x8b pubKey = \xe2\x80\x8b3\xe2\x80\x8b \xe2\x80\x8bstring\xe2\x80\x8b url = \xe2\x80\x8b4\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b totalProduced = \xe2\x80\x8b5\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b totalMissed = \xe2\x80\x8b6\xe2\x80\x8b \xe2\x80\x8bint64\xe2\x80\x8b latestBlockNum = \xe2\x80\x8b7\xe2\x80\x8b \xe2\x80\x8bbool\xe2\x80\x8b isJobs = \xe2\x80\x8b8\xe2\x80\x8b } 36 \x0c10 DApp Development 10 1 APIs The TRON network offers a wide selection of over 60+ HTTP API gateways for interacting with the network via Full and Solidity Nodes Additionally TronWeb is a comprehensive JavaScript library containing API functions that enable developers to deploy smart contracts change the blockchain state query blockchain and contract information trade on the DEX and much more These API gateways can be directed towards a local privatenet the Shasta testnet or the TRON Mainnet 10 2 Networks TRON has both a Shasta testnet as well as a Mainnet Developers may connect to the networks by deploying nodes interacting via TronStudio or using APIs via the TronGrid service The TronGrid service consists of load balanced node clusters hosted on AWS servers worldwide As DApp development scales up and API call volumes increase TronGrid successfully fields the increase in API traffic 10 3 Tools TRON offers a suite of development tools for enabling developers to create innovative DApps TronBox is a framework that allows developers to test and deploy smart contracts via the TronWeb API TronGrid is a load balanced and hosted API service that allows developers to access the TRON network without having to run their own node TronGrid offers access to both the Shasta testnet as well as the TRON Mainnet TronStudio is a comprehensive Integrated Development Environment (IDE) that enables developers to compile deploy and debug their Solidity smart contracts TronStudio contains an internal full node that creates a private local environment for smart contract testing prior to deployment The TronWeb API library connects developers to the network via a wide selection of HTTP API calls wrapped in JavaScript 10 4 Resources The TRON Developer Hub is a comprehensive API documentation12 site tailored towards developers wishing to build on the TRON network The Developer Hub provides a high level conceptual understanding of TRON and walks users through the details of interacting with the 12 Developer Hub https //developers tron network/ 37 \x0cnetwork The guides walk developers through node setup deployment and interaction with smart contracts API interaction and implementation building sample DApps and using each of the developer tools Additionally developer community channels are available through Discord13 13 Discord https //discordapp com/invite/GsRgsTD 38 \x0c11 Conclusion TRON is a scalable blockchain solution that has employed innovative methods for tackling challenges faced by legacy blockchain networks Having reached over 2M transactions per day with over 700K TRX accounts and surpassing 2000 TPS TRON has enabled the community in creating a decentralized and democratized network 39 \x0c 