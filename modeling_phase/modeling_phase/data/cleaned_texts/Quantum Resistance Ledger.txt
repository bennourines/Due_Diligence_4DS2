b quantum resistant ledger qrl info theqrl org october 2016 revised abstract private digital monies secure computing advances achieve longevity design issuance cryptocurrency ledger utilising hash based digital signatures resistant classical quantum computing attack presented 1 introduction concept peer peer internet ledger value recorded blockchain secured proof work reported 2008 11 bitcoin remains widely cryptocurrency date hundreds similar cryptocurrency ledgers subsequently created exceptions rely elliptic curve public key cryptography ecdsa generate digital signatures allow transactions verified securely commonly signature schemes today ecdsa dsa rsa theoretically vulnerable quantum computing attack valuable explore design construction quantum resistant blockchain ledger counter potential advent sudden non linear quantum computing advance 2 bitcoin transaction security currently possible spend unspent transaction outputs bitcoin address creating transaction containing valid elliptic curve secp256k1 signature private key x xe2 x88 x88 n x 2256 specific bitcoin address truly randomly generated private key kept secret lost funds reasonably expected address chance specific bitcoin private key collision 1 2256 probability bitcoin address key collision estimated birthday problem number bitcoin addresses generated result 0 1% chance collision 5 4x1023 14 transaction signed ecdsa public key sending address revealed stored blockchain best practice addresses november 2016 49 58% entire bitcoin ledger balance held addresses exposed public keys 1 3 quantum computing attack vectors rsa dsa ecdsa remain secure based computational difficulty factorisation large integers discrete logarithm problem elliptic curve discrete logarithm problem shor xe2 x80 x99s quantum algorithm 1994 solves factorisation large integers discrete logarithms polynomial time quantum computer theoretically reconstitute private key given ecdsa public key thought ecdsa vulnerable quantum attack rsa use smaller keysizes 1300 1600 qubit 211 quantum computer able solve 228 bit ecdsa public quantum computer development passed 25 qubits factorisation small numbers 15 21 august 2015 nsa deprecated elliptic curve cryptography ostensibly based 1 x0cupon quantum computing concerns unclear advanced quantum computing presently breakthroughs field publicised allow cryptographic protocols common usage internet post quantum secure somewhat anti establishment origins bitcoin find earliest target adversary quantum computer significant quantum computing advance occur publicly node developers implement quantum resistant cryptographic signature schemes bitcoin encourage users balances ecdsa based addresses new quantum safe addresses mitigate proportion effected addresses reasonable disable public key recycling protocol level planned upgrade result possible movement 1 million coins belonging satoshi nakamoto associated price volatility favourable scenario silent non linear quantum computing advance followed nuanced quantum computing attack bitcoin addresses exposed public keys thefts devastating effect bitcoin exchange price new heavy sell pressure complete loss confidence system scale thefts known role bitcoin store value xe2 x80 x99digital gold xe2 x80 x99 badly damaged extreme consequences world context authors believe reasonable experiment quantum resistant cryptographic signatures cryptocurrency ledger potentially create backup value store event black swan 4 quantum resistant signatures important cryptographic systems believed quantum resistant hash based cryptography code based cryptography lattice based cryptography multivariate quadratic equations cryptography secret key cryptography schemes thought resist classical quantum computing attack given sufficiently long key sizes forward secure hash based digital signature schemes exist minimal security requirements rely collision resistance cryptographic hash function changing chosen hash function produces new hash based digital signature scheme hash based digital signatures studied represent primary candidate post quantum signatures future chosen class post quantum signature qrl 5 hash based digital signatures quantum resistant hash based signatures rely security way cryptographic hash function takes message m outputs hash digest h fixed length n e sha 256 sha 512 cryptographic hash function computationally infeasible brute force m h pre image resistance brute force h h2 h2 hash h second pre image resistance whilst hard find messages m1 6 m2 produce h collision resistance grover xe2 x80 x99s quantum algorithm attempt find hash collision perform pre image attack find m requiring o 2n 2 operations maintain 128 bit security hash digest length n 256 bit selected assuming perfect cryptographic hash function hash based digital signatures require public key pk verification private key sk signing message hash based time signatures ots discussed suitability inclusion blockchain ledger 5 1 lamport diffie ots 1979 lamport described hash based time signature message length m bits usually output collision resistant hash function keypair generation creates m pairs random secret keys 2 x0cskjm xe2 x88 x88 0 1 n j xe2 x88 x88 0 1 e private key sk sk01 sk11 sk0m sk1m let f way hash function 0 1 n xe2 x86 x92 0 1 n m pairs public keys generated pkjm f skjm e public key pk pk01 pk11 pk0m pk1m signing involves bitwise inspection message hash select skj e bit 0 skj sk0 bit 1 skj sk1 creating signature s skj1 skjm reveals half private key verify signature bitwise j xe2 x88 x88 0 1 inspection message hash checks pkj f skj m assuming grover xe2 x80 x99s algorithm 128 bit security desired message length fixed hash output sha256 m 256 n 256 resulting pk sk 16kb signature 8kb ots lamport signature generated quickly suffers large key signature extension transaction sizes making impractical public blockchain ledger 5 2 winternitz ots message digest m length m bits secret public keys length n bits way function f 0 1 n xe2 x86 x92 0 1 n winternitz parameter w xe2 x88 x88 n w 1 general idea winternitz time signature apply iterating hash function list random secret keys sk xe2 x88 x88 0 1 n sk sk1 skm w creating chains hashes length w xe2 x88 x92 1 ending public keys pk xe2 x88 x88 n 0 1 n w xe2 x88 x921 pkx f 2 skx pk pk1 pkm w unlike bitwise inspection message digest lamport signature instead message parsed w bits time extract number xe2 x88 x88 n 2w xe2 x88 x92 1 signature generated sx f skx s s1 sm w growing w providing tradeoff smaller keys signatures increased computational effort 10 w xe2 x88 x921 verification involves simply generating pkx f 2 xe2 x88 x92i sx m s confirming public keys match sha 2 sha 256 way cryptographic hash function f m 256 n 256 w 8 bytes 1kb results pk sk s size m w n 8 w xe2 x88 x921 generate pk requires f hash iterations m 8160 ots keypair generation w2 w 16 keys signatures halve size 1048560 impractical 5 3 winternitz ots w ots buchmann introduced variant original winternitz ots changing iterating way function instead applied random number x repeatedly time parameterised key k generated previous iteration fk x strongly unforgeable adaptive chosen message attacks pseudo random function prf security proof computed given parameters 3 eliminates need collision resistant hash function family performing random walk function instead simple iteration huelsing introduced variant w ots enabling creation smaller signatures equivalent bit security addition bitmask xor iterative chaining function 6 difference w ots 2011 variant w ots w ots message parsed log2 w bits time w decreasing hash function iterations increasing keys signature sizes w ots briefly described security parameter n xe2 x88 x88 n corresponding length message m keys signature bits determined cryptographic hash function chosen winternitz parameter w xe2 x88 x88 n w 1 usually 4 16 l computed l number n bit string elements wots key signature l l1 l2 l1 d log2 l1 w xe2 x88 x92 1 m e l2 b c 1 log2 w log2 w keyed hash function fk 0 1 n xe2 x86 x92 0 1 n k xe2 x88 x88 0 1 n pseudocode fk m hash p ad k p ad m 3 x0cwhere p ad x x 10b xe2 x88 x92 x xe2 x88 x921 x b chaining function cik x r input x xe2 x88 x88 0 1 n iteration counter key k xe2 x88 x88 k randomisation elements r r1 rj xe2 x88 x88 0 1 n xe2 x88 x97j j xe2 x89 xa5 defined follows figure 1 w ots chaining function ci x r x 0 xe2 x88 x921 fk ck x r xe2 x8a x95 ri 0 figure 2 example hash chain generation bitwise xor previous iteration ck randomisation element followed fk result fed iteration ck 5 3 1 signature key create secret key sk l w xe2 x88 x92 1 n bit strings chosen uniformly random prf l secret key sk sk1 skl remaining w xe2 x88 x921 n bit strings r r1 rw xe2 x88 x921 function key k chosen uniformly random 5 3 2 verification key public key pk pk0 pk1 pkl r k cw xe2 x88 x921 sk1 r cw xe2 x88 x921 sk2 r cw xe2 x88 x921 skl r k k k note pk0 contains r k 5 3 3 signing perform signature message m length m parsed m m1 ml1 mi xe2 x88 x88 0 w xe2 x88 x92 1 creating base w representation m 4 x0cnext checksum c length l2 calculated appended c l1 x w xe2 x88 x92 1 xe2 x88 x92 mi 1 m c b b0 bl signature s s1 sl cbki sk1 r cbkl skl r 5 3 4 verification verify signature b b1 bl reconstructed m l pk ckw xe2 x88 x921 xe2 x88 x92b1 s1 cw xe2 x88 x921 xe2 x88 x92b sl signature valid k w ots provides security level n xe2 x88 x92 w xe2 x88 x92 1 xe2 x88 x92 2log lw bits 3 typical signature w 16 sha 256 n m 256 ln bits 2 1kb 6 merkle tree signature schemes whilst time signatures provide satisfactory cryptographic security signing verifying transactions major drawback safely ledger address based transformation public key single ots keypair lead extremely restrictive blockchain ledger funds sending address need single transaction performed funds risk theft solution extend signature scheme incorporate valid ots signature ledger address allowing signatures ots keypairs pre generated binary hash tree known merkle tree logical way achieve 6 1 binary hash tree general idea merkle tree inverted tree composed parent nodes computed hashing concatenation child sibling nodes upwards layers root existence node leaf cryptographically proven computing root merkle tree formed n base leaves height merkle root h n 2h starting leaf hashes layer 0 counting upwards layer nodes leaf node created hypothetical ledger use case hashing randomly pre generated ots public key tree seen node pair leaf hashes formed hashing concatenation child hashes 5 x0cfigure 3 merkle tree signature scheme example continues upwards layers tree confluence root hash tree known merkle root example tree diagram taking merkle root public key pre computed ots keypairs generate cryptographically secure valid time signatures merkle root binary hash tree transformed ledger address possibly iterative hashing appended checksum signature s message m given ots keypair includes signature s ots key number n merkle authentication path e ots keypair 0 n 0 s s n ot s public key 0 h1 h2 h5 h6 root given ots public key leaf hash deduced s parent nodes computed children fact shortened s s n h2 h6 root s valid verifying ots public key s m checking hashes merkle authentication path recreate matching merkle root public key 6 2 state merkle signature scheme mss securely relies ots keys dependent state signatures signed transactions recorded ordinarily real world usage potentially problem immutable public blockchain ledger ideal storage medium stateful cryptographic signature scheme newer hash based cryptographic signature scheme called sphincs offers practical stateless signatures 2128 bit security reported 2015 2 6 3 hypertrees problem basic mss number signatures possible limited ots keypairs pre generated prior calculation merkle tree key generation signature time grow exponentially height tree h meaning trees larger 256 ots keypairs temporally computationally expensive generate strategy defer computation key tree generation extend number ots keypairs available use tree composed merkle trees called hypertree general idea sign merkle root child tree ots key leaf hash parent merkle tree known 6 x0ccertification tree figure 4 linking merkle trees simple form height h 2 certification tree precomputed 21 ots keypairs signature required new signature merkle tree signature tree 0 computed signed certification tree ots keypairs signature tree composed n leaf hashes corresponding ots keypairs serve sign messages required ots keypair signature tree signature tree signature tree 1 signed second ots keypair certification tree batch signatures possible signature s hypertree construction slightly complicated include 1 signature tree s n merkle path root 2 certification tree s child tree merkle root n merkle path root theoretically possible nest layers trees certification tree extend original mss infinitely signature size grows linearly additional tree signed whilst hypertree signature capacity increases exponentially 6 3 1 hypertree examples demonstrate easily mss extended hypertree construction consider initial certification tree height h1 5 25 leaf hashes associated ots keypairs merkle root tree transformed generate ledger address merkle tree signature tree identical size h2 5 25 leaves ots keypairs instantiated 32 signatures possible signature tree created total number signatures possible 2h1 h2 case 210 1024 macbook pro 2 7ghz i5 8gb ram creating ots keypairs merkle certification tree sizes yielded following results unoptimised python code winternitz ots 24 0 5s 25 1 2s 26 3 5s 28 15 5s hypertree consisting initial generation 24 trees takes 1s compared 15 5s standard 28 mss tree signature capacity increasing depth height hypertree continues trend hypertree composed chained 24 certification trees signature tree size 24 capable 220 1 048 576 signatures added cost signature size creation time 2 5s 7 x0cfigure 5 hypertree construction requirement hypertree symmetrical composed initially trees later extended later signing layers trees signatures ledger address start small eventually rise hypertree depth increased merkle hypertree create sign transactions ledger address likely require 212 transactions ability sign computational ease 220 times securely hypertree depth h 5 sufficient 6 4 xmss extended merkle signature scheme xmss reported buchmann et al 2011 published ietf draft year 4 7 provably forward secure existentially unforgeable chosen message attacks minimal security requirements prf second pre image resistant hash function scheme allows extension time signatures merkle tree major difference use bitmask xor child nodes prior concatenation hashes parent node use bitmask xor allows collision resistant hash function family replaced figure 6 xmss tree construction leaves tree ots keypair hashes root child l trees hold ots public keys l pieces forming base leaves winternitz ots time signatures 2011 variant described 8 x0cfigure 7 xmss construction 8 bit length xmss public key 2 h dlogle 1 n xmss signature length l h n length xmss secret signature key 2n buchmann reports performance intel r i5 2 5 ghz xmss tree height h 20 w 16 cryptographic hash function sha 256 m 256 million signatures parameters hardware signing took 7ms verification 0 52ms key generation 466 seconds security level achieved parameters 196 bits public key size 1 7kb private key 280 bits signature 2 8kb xmss attractive scheme main drawback extremely long key generation time 6 5 xmss tree performance unoptimised python library constructed qrl testnode formation 4096 leaf xmss tree h 12 keys bitmasks generated hash based prf took 32s hardware described macbook pro 2 7ghz i5 8gb ram included generation prf 8000 bitmasks 300 000 sk fragments efficient merkle tree traversal algorithm need perform w xe2 x88 x921 hashes secret key chain function wots 2w xe2 x88 x921 wots contribute dramatic performance improvement conventional mss complete signature size 5 75kb achieved construction 11 75kb hexadecimal string encoding including ots keypair n signature xmss auth route ots public key xmss tree public key including prf public key seed xmss tree root trees signature capacities generated prf random seed following performance obtained h 9 512 4 2s h 10 1024 8 2s h 11 2048 16 02s 9 x0c7 proposed signature scheme 7 1 security requirements design qrl important cryptographic security signature scheme secure classical quantum computing attack present day future decades xmss sha 256 w 16 offers 196 bit security predicted safety brute force computational attack year 2164 9 7 2 qrl signatures extensible stateful asymmetrical hypertree signature scheme composed chained xmss trees proposed dual benefit utilising validated signature scheme allowing generation ledger addresses ability sign transactions avoiding lengthy pre computation delay seen giant xmss constructions w ots chosen hash based time signature scheme security performance reasons 7 3 7 3 1 hypertree construction key signature sizes number trees hypertree grows key signature sizes grow linearly signature capacity rises exponentially sizes xmss tree derived public keys signatures based 2011 description w 16 m 256 h tree height sha 256 chosen cryptographic hash algorithm xe2 x80 xa2 h 2 22 signatures public key 0 59kb signature 2 12kb 0 4s xe2 x80 xa2 h 5 25 signatures public key 0 78kb signature 2 21kb 0 6s xe2 x80 xa2 h 12 212 signatures public key 1 23kb signature 2 43kb 32s xe2 x80 xa2 h 20 220 signatures public key 1 7kb signature 2 69kb 466s 3 trade creating xmss hypertree 4 trees j 3 h 5 eventual signature capacity 220 3s compared 466s signature 8 84kb instead 2 69kb acceptable 7 3 2 asymmetry creating asymmetrical tree allows early signatures place single xmss tree construction extended required later signatures cost overall signature capacity rationale likely consequence blockchain ledger application wallet user option signature capacity versus signature key sizes maximum tree depth j 2 suffice circumstances 10 x0cfigure 8 asymmetrical hypertree 7 4 qrl hypertree specification following default parameters adopted standard hypertree construction xe2 x80 xa2 j 0 j xe2 x88 x88 0 xe2 x89 xa4 x xe2 x89 xa4 2 h 12 h xe2 x88 x88 1 xe2 x89 xa4 x xe2 x89 xa4 14 upper bound signatures possible 236 minimum signature size 2 21kb maximum signature size 7 65kb e single xmss tree h 12 4096 signatures available extended trees h 14 required users additional trees unlikely required 7 4 1 example qrl signature assuming complicated hypertree construction j 2 h 14 signature transaction message m n ots keypair position xmss tree require xe2 x80 xa2 signature tree j 2 ots signature m n merkle authentication proof merkle root signature tree xe2 x80 xa2 certification tree j 1 ots signature merkle root signature tree j 2 n merkle authentication proof merkle root xe2 x80 xa2 original xmss tree j 0 ots signature merkle root j 1 n merkle authentication proof merkle root verification involves generating ots public key m signature confirming supplied merkle authentication proof generates signature tree merkle root message ots signature ots public key generated supplied merkle authentication proof recreate certification tree merkle root message certification tree ots signature signature valid merkle root highest tree original xmss tree j 0 correctly generated notice ots public keys required verification xmss tree signature fact merkle root tree deduced omitted hypertree signature verification sending ledger address known computed derivative merkle root highest xmss certification tree j 0 qrl signature accounts later signature scheme stateful wallet implementation retain update n xmss tree generated hypertree given address 11 x0c7 5 prf prf seed hmac drbg 7 6 deterministic wallet single seed possible generate large xmss tree suffice users prolonged period secure source entropy generate seed passed secure prf function generate set pseudorandom keys generate tree drawback xmss tree user confined single address public key exposure concern mss bitcoin ethereum address derived associated public key single private public key create single address xmss address derived public key pk contains merkle root public seed seed remains constant number ots keypairs compute tree varies merkle root change variation single addition subtraction single ots keypair derived address change feature wallet node software generate numerous variations xmss tree extending contracting required initial seed allowing unique addresses required generated record information safe stateful compact manner computationally trivial 8 cryptocurrency design parameters remainder white paper set proposed design parameters qrl ledger focus ledger public blockchain highly secure classical quantum computing attack vectors draft aspect subject potential change 8 1 fees larger transaction sizes compared ledgers necessitates transaction fee paid transaction author opinion artificial fee markets bitcoin unnecessary run counter ideal open public blockchain ledger transaction pays minimum fee valid minimum fee miners willing accept float set market e nodes miners competitively set lower bound fees absolute minimum value enforced protocol level miners order transactions mempool inclusion block discretion 8 2 8 2 1 blocks block times bitcoin time blocks roughly 10 minutes natural variance occasion lead fairly long periods block mined newer ledger designs ethereum improved benefit shorter block times 15 seconds loss security miner centralisation high rates orphan stale blocks ethereum uses modified version greedy heaviest observed subtree protocol allows stale orphan blocks included blockchain rewarded 13 5 qrl plans safely use block time 60 seconds 8 2 2 block rewards new block created include xe2 x80 x99coinbase xe2 x80 x99 transaction containing mining address reward equal sum coinbase reward combined sum transaction fees block block reward calculated mining node block follows coin emission schedule 12 x0c8 2 3 blocksize avoid controversy box adaptive solution modelled bitpay proposal increase blocksize based multiple x median size y z blocks employed 12 use median prevents gaming miners include overstuffed blocks alter mean blocksize x z hard consensus rules network obey maximum blocksize b simply calculated b xy 8 3 currency unit denominations qrl use monetary token quantum plural quanta base currency unit quantum divisible smallest element follows xe2 x80 xa2 1 quantum plural quanta xe2 x80 xa2 10 xe2 x88 x929 shor transaction involving fraction quantum actually large integer shor units transaction fees paid calculated shor units 8 4 accounts qrl address designed extensible supports wide range formats bytes address descriptor encode information describe hash function signature scheme address format additional parameters typical account address represented follows q01070050d31c7f 123995f 097bc98209e9231d663dc26e06085df 55dc2f 6af e3c2cd62e8271a6bd 8 4 1 structure qrl addresses structured following way bytes count description desc data 0 2 3 n 3 address descriptor n depend address format moment address format supported sha256 2x sha256 2x qrl address composed 39 bytes internal format api module project representational purposes e user interface debugging logs possible address represented hexstring prefixed q 79 hexadecimal characters appropriate user related purposes rejected api bits count description desc hash verh 0 2 3 35 36 40 3 32 4 hash function sha2 256 desc pk sha2 256 desc hash 4 bytes pythonic pseudocode represented follows q desc 3 hash 32 v erh 4 13 x0c8 4 2 descriptor bits count description hf sig p1 p2 p3 0 3 4 7 8 11 12 15 16 23 4 4 4 4 8 hash function signature scheme parameters 1 ie height etc address format parameters 2 case xm ss parameters follows bits count description hf sig p1 af p2 p3 0 3 4 7 8 11 12 15 16 23 4 4 4 4 8 sha2 256 shake128 shake256 xmss xmss height 2 address format sig signature type value description 0 1 15 xmss reserved future expansion value description 0 1 2 3 15 sha2 256 shake 128 shake 256 reserved future expansion value description 0 1 15 sha256 2x reserved future expansion hf hash function af address format 8 5 8 5 1 coin issuance issuance qrl initial issuance following xe2 x80 xa2 initial supply 52 xc2 xb7 106 quanta xe2 x80 xa2 allocated foundation 13 xc2 xb7 106 quanta xe2 x80 xa2 initial total supply 65 xc2 xb7 106 quanta xe2 x80 xa2 eventual total supply 105 xc2 xb7 106 40 xc2 xb7 106 quanta distributed exponential decay emission schedule approximately 200 years 14 x0c8 6 coin emission schedule defining feature bitcoin scarcity fixed upper limit issuance underlying monetary token qrl follow bitcoin regard fixed upper limit coin supply 105 xc2 xb7 106 quanta smoothly exponential decay block reward favoured hard ceiling coin supply eliminate volatility associated bitcoin xe2 x80 x99halving xe2 x80 x99 phenomenon total coin supply x 105 xc2 xb7 106 minus coins created genesis block y exponentially reduce z0 downwards forever decay curve assumes distribution rewards approximately 200 years 2218ad 105189120 blocks generated approximate rate 1 block 60 seconds remaining coin supply block t zt calculated zt z0 e xe2 x88 x92 xce xbbt 0 coefficient xce xbb calculated xce xbb lnz t t total number blocks emission schedule final quanta block reward b calculated block b zt xe2 x88 x921 xe2 x88 x92 zt references 1 http oxt charts 2 d bernstein sphincs practical stateless hash based signatures 2015 3 j buchmann security winternitz time signature scheme 4 j buchmann xmss xe2 x80 x93 practical forward secure signature scheme based minimal security assumptions 2011 5 v buterin ethereum whitepaper 2013 6 hulsing w ots shorter signatures hash based signature schemes 2013 7 hulsing xmss extended hash based signatures 2015 8 karina efficient software implementation hash based signature scheme mss variants 2015 9 lenstra selecting cryptographic key sizes 2001 10 r merkle certified digital signature crypto 435 1989 11 s nakamoto bitcoin peer peer electronic cash system 2008 12 s pair simple adaptive blocksize limit 2016 13 yonatan sompolinsky accelerating bitcoin xe2 x80 x99s transaction processing fast money grows trees chains 2014 14 toshi birthday paradox 2013 15 x0c