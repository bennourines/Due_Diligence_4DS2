b decentralized data exchange powered ethereum dock protocol v0 5 subject change march 12 2018 x0ctable contents 1 abstract 4 2 summary 4 2 1 problem definition 3 high level overview vision 4 5 3 1 users 5 3 2 applications data providers consumers 5 3 3 proposal voting mechanism 5 4 possible future use cases 6 4 1 automatic relationship mapper 6 4 2 work application performance mapper 6 5 usage ethereum reasons 6 6 core dock protocol features 7 6 1 data exchange model 7 6 2 encrypted secure snapshots data 7 6 3 voting utility 8 7 reasoning steps 8 8 possibility public data 8 9 data exchange model 9 9 1 chainpoint modification 9 9 2 chain data 10 9 3 chain data 11 10 user application contract pairs 11 11 chain data attribution verification 11 12 chain vouching signaling 12 13 public registry 13 13 1 verification 13 13 2 reverse address lookup 14 2 x0c14 data types standard formats 14 14 1 initial format types 14 14 2 data format signaling 15 15 snapshots individual key value pairs format data 16 15 1 rare number updates 16 16 experience format example 16 17 token model 16 17 1 long term trust building 17 17 2 token utility 17 17 3 fiat denominated fee oracle 17 17 4 token incentivization 18 17 5 reasoning including users data exchange 18 economy 17 6 fee model 20 17 7 token burn 20 17 8 game theoretic effects 20 17 9 participation voting 20 18 possible issues hurdles 21 18 1 chain scaling transaction flooding 21 18 2 need eth gas users 21 18 3 transition standalone chain 22 18 4 long con game data providers 22 18 5 token user experience 22 18 6 centralized exchange rate oracle censorship 22 18 7 applications share decrypted data 23 19 team 23 20 external resources 25 3 x0c1 abstract recent years centralized platforms revolutionized way individuals find jobs employment build reputation establish professional networks result platforms retain ownership massive amounts professionals xe2 x80 x99 data information exist closed networks applications disincentivized sharing information data competitive marketplace reliance data monetization business purposes platform wants hold advantage competitors dock protocol aims solve fundamental data hoarding problem implementing protocol actually encourages data exchange platforms utilizing secure ethereum mainchain data encryption token model dock protocol allow users control data exchange applications dock token model simultaneously motivate applications exchange information making beneficial platforms involved transaction users applications primary needs met users control data applications receive compensation data exchange 2 summary dock protocol special purpose decentralized data exchange protocol protocol intended incentivize exchange work experience reviews professional connections expanded include type shareable data addition tokens serve proposal voting utility guide evolution development changes dock protocol token holders contribute proposals vote changes updates xe2 x80 x99d like implemented applications receive tokens data exchange users absolute control data use hosted party service 2 1 problem definition internet changed job market forever average professional person changes jobs 12 times career freelancing profession grows year currently 35% current workforce perform freelancers percentage projected accelerate 40% 2020 professionals rely centralized platforms find work opportunities sustain careers $200 billion industry controlled data monopolies including linkedin upwork glassdoor platforms centralize user data making impossible individuals transfer hard earned experiences reviews ultimately value 4 x0cresult industry provides fragmented experiences internet connected previous years linkedin provided open api 30 000 apps built api innovation flourished february 2015 linkedin announcement stating restrict public api access consequently businesses died industry innovation slowed strongly believe users personal data able easily share applications believe innovation aiding companies pursuing believe connected internet power technology potential global impact improving lives 3 high level overview vision 3 1 users use dock protocol easily port data participating applications users access automatically updated profile information employment history data type platform data integrated fashion bound single platform employment data freelancing personal reviews users possess signed verified content choose shared owning data choose share data received platforms user opt sharing particular data specific application choosing 3 2 applications data providers consumers application data provider data providers special chain non user accounts request push signed data users xe2 x80 x99 profile important note application publish data directly blockchain sends user individually examples data cv updates platform reviews ratings freelance transactional data git commits application specific data application able consume data user requires spending tokens access data alignment interests user application achieved dock token model section 17 3 3 proposal voting mechanism community participation voting proposal creation crucial continued growth development dock mechanism iterative changes updates dock protocol network voting mechanism enables dock engage community user base maintaining system evolves according needs users 5 x0c4 possible future use cases considering value linkedin single data silo captured easy imagine valuable open data protocol protocol combines friction plethora different types data relevant helping people find right type work dock help create future applications possible today existing applications problem data sharing dock solves problem aligning interests work related data sharing crypto economic model making technical integration simple possible 4 1 automatic relationship mapper current applications need able observe type interaction users application map relationship social graph contact list dock protocol makes possible party application receive push updates user xe2 x80 x99s interactions application case user acts sovereign data broker applications gives user control data information party application turn update state upgrade relationship social graph data format acquaintance colleague based external application data data turn pushed user 4 2 work application performance mapper example party integration current business applications task managers collaborative document writers file storage applications pushing interactions user dock protocol interaction based work related data turn selectively party applications assess individual work history performance party applications create reputation scores network centrality scores performance reviews vouch individual works specific company 5 usage ethereum reasons ethereum main chain chosen preferred chain dock protocol run benefits 1 2 3 4 1 network effect strong ecosystem multiple good scaling roadmaps easy integration party smart contracts applications erc201 token standard easy integration wallets exchanges https github com ethereum eips blob master eips eip 20 token standard md 6 x0c6 core dock protocol features 6 1 data exchange model dock uses ipld2 specification developed ipfs perform content addressable data exchange furthermore users form ad hock publish subscribe pubsub network content ipld addressable content default encrypted receivers chain stored public key need direct exchange packet user application encrypted data packages partially replicated nodes nodes decipher stored packages encrypted destiny application xe2 x80 x99s public key ipfs makes possible discover resolve integrity packages originator package needing online originator online discovery data considerably faster originators data need online data pushed fresh published network 6 2 encrypted secure snapshots data app homer age 30 likes beer data hash abcdef encrypted data ipfs ipfs aaaaaaa app user contract address aaauuu 5 hash abcdef ipfs aaaaaa user history address aaauuu entry 5 app b user contract address bbbuuu 3 hash abcdef ipfs bbbbbb encrypted data ipfs encrypted app b ipfs bbbbbb data default encrypted decrypted parties exchanging data user selectively decides perform push updates data format specific application encrypting content receiver xe2 x80 x99s public key encryption versioning happen following order 1 user stores snapshot hash data created shared application pushed user application wants latest version data snapshot hashes sense possible tie data specific time blockchain needing entire history useful data 2 https ipld io 7 x0c2 unencrypted snapshot create hash hash includes previous version hash recent ethereum transaction block hash previous snapshot hash 3 user takes snapshot hash encrypts application xe2 x80 x99s public key includes ipfs addressable hash data application user pair smart contract 4 application observes dock ethereum application user pair contract recognizes package addressed application requests encrypted package ipfs user intermediary node 6 3 voting utility voting protocol dependent ipfs data stored hold hash ipfs data store data stored includes proposal answer choices start end time author vote identifiers metamask verify qualified cast vote based number dock tokens held wallet contract calculate number votes attributed person 7 reasoning steps dock makes use ipfs fully content addressable compatible possible ethereum ecosystem applications smart contracts writing ipfs adoption ethereum smart contracts picking trajectory indicates going standard soon data anchored newly created application user pair contract specific application user write capability contract effectively updatable verifiable symmetric hash exchange channel application user snapshot versioning publicly verified channel encrypting updates different applications xe2 x80 x99 public keys user remains control receives interpret push updates ipfs hashes content publicly available data exposed public unencrypted form public knows push update happened 8 possibility public data users opt publish specific unencrypted data formats ipfs directly way receive data validate integrity verify latest version having data requests user envision users opt publish core insensitive data manner data include limited 1 8 x0c2 3 4 5 location education licenses certifications public contact information work email users need aware data published fashion dock protocol ipfs irreversibly internet taken 9 data exchange model 9 1 chainpoint modification dock utilizes open source standard anchoring data blockchains called chainpoint3 chainpoint originally developed bitcoin blockchain anchoring data single chain dock uses modified specification chainpoint enables anchoring updates data formats single blockchain including single block addition makes possible prove update created time specific block achieved making following chainpoint blockchain receipt modifications changes gray context jsonld context document type type chainpoint receipt described targethash hash value unencrypted snapshot anchored hex string format prevhash hash value previous hash blockchain transaction referenced currentblock current ethereum block hash referenced time update merkleroot merkle root tree hex string format proof array hash objects connecting targethash merkleroot anchors array methods employed anchor data blockchain s ipfs address address encrypted file chainpoint data encrypted data shared specific applications structured exactly 3 https tierion com chainpoint 9 x0cthe user party selectively sharing data application user application contract party knows fact latest update data application know latest data depending user wants share important application receiving encrypted data know receiving latest version tracked publicly chain application decrypts update key use freely sharing data application user control application shares data parties including currentblock hash establish earliest update generated user possible define exact time created ethereum block hashes unpredictable provable user know certainty update shared publicly time block creation prevhash hash ethereum transaction included previous connected update way user prove certain update happened fork older update prevhash field important applications permanently connect ethereum main network want share relevant anchoring data decide check anchoring ethereum prove given time information chainpoint protocol standard chainpoint white paper4 9 2 chain data chain data solely chainpoint anchoring data includes xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 chainpoint versioning content hashes merkle roots merkle proofs git hashes ethereum dock contract statepossibly external id verifiers case civic predetermined user data stored encrypted unencrypted form chain application infer content snapshot hashes chain data applications download encrypted versioned chain data ipfs hash pointers won xe2 x80 x99t able sense user creates newly encrypted version specifically application encryption updates application data access control user choose publish unencrypted updates data ipfs directly applications directly download updates ipfs prior permission user 4 https github com chainpoint whitepaper blob master chainpoint white paper pdf 10 x0c9 3 chain data chain data includes data format information including prior updates snapshots encrypted unencrypted form long user opts share data selectively application stored encrypted data require storage unencrypted data performing client encryption chainpoint anchoring relevant user application contract requires additional storage ipfs slightly higher computational resources client nonetheless majority users operations storage requirements met mobile devices depending semantics ipfs addressable data chain content hashes data found published publicly hashed snapshot form chain underlying data published ipfs network overall fashion accessible chain data 10 user application contract pairs user generates new contract keeping track status application makes possible push separate updates different applications chain additionally attribution pushed simple 3rd party applications easily identify applications interacting particular user proving data receive fact coming application user application user write access mutual contract makes simple track tit tat data payment exchange applications user s contract application enforcement stepwise relationship relatively trivial contract main benefit accommodate ethereum xe2 x80 x99s reasonable limitation state transition block contract having user application pair contracts party initiate multiple state transitions data updates block 11 chain data attribution verification applications receiving data users know data format originally pushed application application user contract applications sign pushed content ipfs packet version hash user publishes userapplication contract data format ipfs package signed user manually withhold content signature application case application sign version hash chain round 11 x0capplications levels verification requirements loose verification requirements require data user mid level requirements require content signature application strong verification requirements include onchain signing version hash user pushed blockchain 12 chain vouching signaling account sign chain data format snapshot hashes account signals rest network content version hash meaningful correct vouching signatures created fashion appear unilateral user contract repository vouchers user pointing signed transaction content use cases include limited 1 2 3 4 5 employers vouching truthfulness employees xe2 x80 x99 work history schools vouching truthfulness students xe2 x80 x99 credentials students school vouching integrity student identity services vouching citizens xe2 x80 x99 identity information applications vouching truthfulness application related data format vouching verify authenticity underlying data instead secondary trust reputation layer needs assess good signal individual signature users control sign publish signatures blockchain user vouch published content publish contract signing publishing signatures versions data fully discretion signing party data compression purposes ethereum transaction hashes verified snapshot data signed entity ensures signature output remain small verifiable user application chain update hashes signature hash signature stack user controlled 12 x0c13 public registry public registry developed dock expect broader domain association methods emerge soon ethereum community actively monitor community developments decide method makes sense domain association ethereum addresses order facilitate simple application authentication existing services improve user experience dock introduce additional service allow map domain ethereum address public service allow domain owners associate domain s ethereum address use publish sign data internally way mapping ethereum address domain internally public registry ethereum smart contract known ethereum address 13 1 verification order verify domain names add proper file domain namespace instance claims domain example com corresponds ethereum address xe2 x80 x9c1234abcd xe2 x80 x9d create file xe2 x80 x9cexample com 1234abcd xe2 x80 x9d contents xe2 x80 x9c1234abcd xe2 x80 x9d step invoke given ethereum address contract method desired domain step involves use oracle perform http dns request resolution validate domain authority ethereum address associated domain wants change address domain remove original verification file adding new address registry contract try revalidate existing domain remove verification fails domain exists add example com veri xef xac x81cation succeeded yes verify new domain yes add domain registry remove domain verify domain yes fail adding domain veri xef xac x81cation succeeded 13 x0cthere options data verified 1 http url file domain namespace content ethereum address 2 dns record txt record value ethereum address xe2 x80 x9c1234abcd example com txt 1234abcd xe2 x80 x9d options added later time possible use verification method domain case valid check required consider domain verified 13 2 reverse address lookup mapping sided possible lookup ethereum address given domain verified domain names stored registry sure valid domain stored 14 data types standard formats dock data formats essentially equivalent microformats5 ethereum smart contracts type data formats type content possible dock web microformats community resume based microformat example universally machine readable6 based team xe2 x80 x99s background remote com commence example resume work history data format dock proposed microformat model content addressable ipfs anchored modified chainpoint approach data formats prescribed dock ethereum smart contract users choose create snapshot share use data formats community settles data formats useful users long large number applications accepts 14 1 initial format types mapping sided possible lookup ethereum address given domain verified domain names stored registry sure valid domain stored dock initially create number ready data formats data formats opt voluntary users applications theoretically non employment related data formats dock approach data format examples include limited 1 employment history format resume 2 social graph mutually signed contacts 5 6 http microformats org wiki main page http microformats org wiki hresume 14 x0c3 licenses relevant certifications licenses 4 education education history 5 application specific formats format data consists key value fields keys nested format data creator application determine actual data stored json xml csv format format types updated central party implies application wants alter structure data format established previously arbitrarily tell clients change format clients need opt updating format partially data format signaling important data formats power network greater inertia change time larger dock network predict clients signaling upgrade data formats semi automatically ultimately stored data useful long applications accept format refrained including auto update format method seen historically closed source api software vendors way 3rd party applications relying format able claim data service openly available 14 2 data format signaling believe major reason digital formats long time industry standards users standards way signaling use prefer currently good way converge rapidly single preferred standard introduce data format signaling convergence mechanism dock applications token holders able signal contracts data formats accept simple list data format names voting method public signaling method signals non binding effect way enforced contract applications users scan ethereum chain dock application user contracts signals number tokens associated addresses applications users modify signaling accordingly 15 x0c15 snapshots individual key value pairs format data smallest atomic unit data format versioned key value pair upper bound large set pairs large number pairs requires frequent updating advise snapshot individual pairs 15 1 rare number updates number updates sparse advise snapshot overall data formats snapshot hashes merkle roots way individual pairs merkle leafs possible selectively share individual pairs verifying application pair date version hash ethereum blockchain 16 experience format example tag data type experience event summary computer scientists employer remote com inc location san francisco 37 7749 xc2 xb0 n 122 4194 xc2 xb0 w start unix time 1511377952 end unix time 1577836800 multiple experience formats combined constitute employment history format 17 token model today applications naturally incentivized hoard data users user data non accessible user party applications 16 x0cmore malicious data strategies include user data gathering open ecosystem integration return data party applications shutting party application data access example microsoft xe2 x80 x99s internal strategy xe2 x80 x9cembrace extend extinguish7 xe2 x80 x9d linkedin utilized similar tactics application malicious manner applications advantage data outcompete providing data return common problem solved token based modeling 17 1 long term trust building token xe2 x80 x99s utility allows applications exchange data user controlling sharing data makes long term trust protocol possible users brokers data applications incentivized exchanging data long term users reasonably sure data opt sharing specific data specific applications 17 2 token utility token means exchange dock contract system possible token holders vote regular poll features developed dock contract system important dock intended sovereignty data user incentivize application ecosystem collaboration token intended solve commons problem data sharing web adding polling mechanism way chain governance new commons 17 3 fiat denominated fee oracle token costs exit fees denominated fiat possible future stable cryptocurrency basecoin dai etc reach market maturity reasonable long term real world stability important users applications able predict long term costs effect approach token price open market goes proportionally fewer tokens bought users applications price goes tokens bought users applications open market long term lot stability predictability exchange rate token 7 http www economist com node 298112 17 x0c17 4 token incentivization tokens incentivize applications share data users applications users control applications access update data important note tokens incentivize users share data applications imperative motivate applications opposed users data platforms currently operate applications share data peers competitors use create competitive advantage major problem today xe2 x80 x99s data landscape understood clear token incentive model encourages applications share data hoard absolutely necessary order model like work properly users control data drawback users value data terms money receive user data disproportionally valuable application user applications create added value simply created marketplace users sell data applications money race instead dock users value data receive money return price applications pay applications share data user paid user new type market mechanism believe extremely important test dock xe2 x80 x99s core contribution cryptoeconomics 17 5 reasoning including users data exchange economy tokens encourage users share data lead issues users send faulty data effort maximize profits additionally users practice deceitful tactics like faking accounts playing system mean attaining income users burdened worrying value data users included token economy consider microtransactions payments involving data daily basis incentivizing applications users dock protocol user experience easy possible action discourage malicious tactics applications provide compensation applications accessing users xe2 x80 x99 data users pay applications data instead time user sends data attributed application payment triggered dock protocol payment necessarily simply rerouted tokens include creating burned tokens surpassing original created initially 18 x0cfor example imagine user sends data created application application b dock protocol verifies transaction triggers payment sent application b application application b xe2 x80 x99s payment access data application c accesses data tokens paid application c burned removed total supply tokens dock protocol 1 app 1 2 user app 1 3 user 5 app 2 1 2 3 4 5 6 7 6 4 protocol app 3 7 user app 2 app pays consumed data contract proxies payment user user noti xef xac x81es protocol pay data usage app 1 protocol pays app created data app consumes data contact proxies payment user user sees data consumed discard transaction user sharing data submits update smart contract designated receiving application contract tracking hashes updates submitted user hash update application consumed paid user push update application paid previous way ensure order continuously receive updates application forced pay tokens similar tit tat relationship bittorrent enforced smart contract ensures applications consume updates constant data updates app user contract update null paid update null user submits update app user contract update aaa paid update null user app user contract update aaa paid update null user user xe2 x80 x99t submit update app pays xef xac x81rst app pays xef xac x81rst update app app user contract update aaa paid update aaa user submit update app user contract update bbb paid update aaa user 19 x0c17 6 fee model model applications indirectly pay applications access data applications able control applications receive data users remain ultimate control data fee model associated data exchange final modified percentage payment associated data changeable chain percentage mechanism application pays flat rate fee user data party application data included 100% fee burned unusable 17 7 token burn number reasons burning dock tokens effective mechanism 1 cost applications acquire user data 2 simultaneously users receive tokens incentive avoid malicious behavior 3 general token holders benefit total supply outstanding tokens decreasing burning mechanism 4 percentage token burn act anti spam anti ddos mechanism smart contract 17 8 game theoretic effects dock protocol represents sided market8 dock demonstrates unique dynamic user marketplace monetary incentive interact product data real value users receive system ultimate control data data portability major benefit users current major data platforms offer complete control personal data users motivated monetary gains impartial applications quality data believe lead users choosing best data providers applications overall quality data increase cycle protocol 17 9 participation voting users token holders dock able participate evolution protocol network voting updates protocol ensure individual users represented token mechanics 8 https www aeaweb org articles id 10 1257 jep 23 3 125 20 x0cwhen new proposal published dock token holders able use tokens enable right vote new proposal token holders able vote token representing vote number tokens required submit application length voting period end results vote finalized based majority votes minimum number votes participants required order results vote finalized vote disqualified minimum participation important mention tokens locked voting 18 possible issues hurdles 18 1 chain scaling transaction flooding dock protocol need relatively high transaction throughput smart contract operate large number users applications currently ethereum support required number transactions global system ethereum community momentarily scaling efforts intended solve problem regardless type global state blockchain system prone transaction flooding issues witnessed similar issues past example fake transactions generated bitcoin network attack method theoretically dock protocol experience denial service attack difference mainchain require number tokens performing attack long period time prove extremely costly 18 2 need eth gas users dock smart contract protocol reliant ethereum mainchain ethereum smart contracts mainchain rely ether pay gas requirement running smart contracts users applications need ethereum dock tokens order use dock protocol applications need order send execute transactions users need send snapshot data latest user related data complicates matters users applications makes dock protocol difficult issues mitigated use background automation hosted wallets hosted services 21 x0c18 3 transition standalone chain possible scaling efforts ethereum mainchain produce adequate results possible transactions ethereum mainchain expensive average transaction moving forward event reserve right create new standalone global chain strongly use case choice left chain dedicated solely dock protocol smart contract procedures place ensure transition smooth possible best method transition publicly known snapshot date applications clients users upgraded client switches mainchain certain snapshot date 18 4 long con game data providers data providers theoretically set large number fake user accounts accounts filled meaningless data applications unknowingly pay faulty data allow data providers steal tokens accounts quickly detected applications data false rendering strategy useless applications point detect data coming certain users useless simply stop paying updates accounts regular registration signup process application want steal tokens applications means prevent malicious behavior 18 5 token user experience end users want cognitive load buying small ether setting wallet data application approving applications required order users sovereign control data tokens believe similar bitcoin mainstream adoption majority users opt performing tasks automatically hosted party service 18 6 centralized exchange rate oracle censorship centralized oracle providing token fiat life exchange rates dock smart contract possible central failure point following scenarios technically possible 22 x0c1 proxied exchange rate received centralized exchanges bad oracle relays bad data 2 oracle making dock smart contract rely known exchange rate fee calculation 3 oracle shut hackers authorities 4 oracle hacked relays false exchange rate data 18 7 applications share decrypted data applications decrypt share user related data applications approved user application receives user related data restriction regards data user stop sharing new data application sharing non permitted applications users opt data sharing opt relationship time simply updating user application pair contract anymore positive negative beneficial allowing users option share certain updates basic data public manner means snapshot hash commit dock user application pair contract committed ipfs user unencrypted format allows discover data ipfs use having ask permission notify user pay tokens application use cases useful applications users negative wrongly configured clients possibly leak data way publishing unencrypted data ipfs user publishes unencrypted data ipfs return delete data forever public domain create issues certain user groups 19 team nick macario co founder previously founder branded nick multi time founder technology executive exit previous company branded professional networking site grew millions users recognized awards publications elina cadouri co founder previously co founder outsource com elina multi time founder veteran marketplace operator previous company outsource com freelance marketplace transacting tens thousands jobs millions dollars revenue 23 x0cstenli duka cto previously motivemetrics stenli seasoned stack engineer led multiple teams passion machine learning natural language processing complex algorithms previously spent time motive metrics director engineering evgeniy zabolotniy lead blockchain engineer previously branded evgeniy brings 10 years experience systems architect developer security specialist previously worked nick branded founding team core team member 3 years todd scheuring head design previously honeybook todd brings 10 years design interactive development experience prior dock senior ux designer honeybook led design network growth teams jeffry harrison director partnerships previously muse jeffrey brings years industry experience sales recruiting prior dock team lead muse helped grow sales team 3 40 responsible largest deals company achieved gabriel moncarz data scientist previously sabre corp gabriel brings 10 years experience data scientist computer engineer magister quantitative finance magister data mining big data knowledge discovery previously sabre corp fausto woelflin senior engineer previously ampush fausto senior engineer develops python based microservices elasticsearch flask cassandra docker previously ampush piotr swies blockchain engineer previously hunted hive piotr software engineer architect stack developer 10 years experience skilled designing implementing distributed systems microservices architecture previously hunted hive sergey ermakovich lead frontend developer previously branded sergey brings 10 years experience specializing end web development reactive functional programming rfp ui architecture sergey comes branded team 3 years 24 x0csamuel hellawell senior frontend developer previously branded samuel senior engineer passion developing quality applications games websites xe2 x80 x99s started sold company founding team branded prior dock maciek bodeksenior frontend developer previously shortlist co maciek frontend engineer years experience crafting web products complex interfaces ranging portfolio microsites agile saas startups 20 external references 1 vogelsteller f buterin v 2015 november 19 erc 20 token standard retrieved https github com ethereum eips blob master eips eip 20 token standard md 2 ipld retrieved https ipld io 3 vaughan w bukowski j wilkinson s 2016 june 29 chainpoint scalable protocol anchoring data blockchain generating blackchain receipts retrieved https tierion com chainpoint 4 git retrieved https git scm com 5 noms retrieved https github com attic labs noms blob master readme md 6 microformats wiki retrieved http microformats org wiki main page 7 king r celik t jones g hresume retrieved http microformats org wiki hresume 8 deadly embrace 2000 march 30 retrieved http www economist com node 298112 9 bertani t understanding oracles 2016 february 18 retrieved https blog oraclize understanding oracles 99055c9c9f7b 10 rysman m 2009 economics sided markets retrieved https www aeaweb org articles id 10 1257 jep 23 3 125 25 x0c