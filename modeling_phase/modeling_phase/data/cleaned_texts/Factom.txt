b factom business processes secured immutable audit trails blockchain contributors paul snow brian deery jack lu david johnston peter kirby advisors adam stradling shawn wilkinson jeremy kandah dexx marv schneider steven sprague andrew yashchuk reviewers vitalik buterin luke dashjr ed eykholt ryan singer ron gross j r willett dustin byington version 1 2 april 25 2018 factom com abstract honesty subversive paul snow today s global economy trust rare supply lack trust requires devotion tremendous resources audit verify records reducing global efficiency return investment prosperity incidents 2010 united states foreclosure crisis demonstrate addition inefficient current processes terribly inaccurate prone failure factom removes need blind trust providing world precise verifiable immutable audit trail past records difficult protect challenging synchronize impossible truly verify manual effort involved computers automated tasks harder protect synchronize verify computer records easy change authority fragmented innumerable independent systems blockchains provide distributed mechanism lock data making data verifiable independently auditable bitcoin s blockchain trusted immutable data store existence useful non bitcoin transactions factom gives businesses access blockchain technology getting bogged currencies paper describe factom creates distributed autonomous protocol cost effectively separate bitcoin blockchain bitcoin cryptocurrency discuss client defined chains entries client validation entries distributed consensus algorithm recording entries blockchain anchoring approach security 1 x0cdesign goals factom creates faster cheaper bloat free way develop blockchain based applications satoshi nakamoto launched bitcoin blockchain revolutionized way transactions recorded existed permanent decentralized trustless ledger records developers rushed create applications built ledger unfortunately running core constraints intrinsic original design tradeoffs bitcoin 1 speed xe2 x80 x93 design decentralized proof work consensus method bitcoin difficulty requirements adjusted maintain roughly 10 minute confirmation times applications wish greater security multiple confirmations required common requirement wait 6 confirmations lead wait times hour 2 cost xe2 x80 x93 default transaction cost 01 mbtc roughly $0 003 usd november 2014 $80 usd transaction times 2017 exchange price btc volatile history price btc rises cost transactions prove cost barrier applications need manage large numbers transactions additionally factors including constraints block size reward halving act increase transaction fees 2 x0c3 bloat xe2 x80 x93 bitcoin blockchain size limit 1 mb block transaction throughput capped 7 transactions second application wants write store information blockchain add traffic problem politically charged parties seek increase block size limit met resistance concerned decentralization factom protocol designed address core constraints factom creates protocol applications provide functions features currency transactions factom constructs standard effective secure foundation applications run faster cheaper bloating bitcoin factom ecosystem primary components factom ecosystem depicted 3 x0conce system set including issuance factoids e cryptocurrency factom user accounts token value transferred users factom bitcoin following primary interactions 1 2 3 4 application owner purchases entry credits factoid application records entry factom servers create entry blocks directory blocks factom secures anchor hash directory block blockchain details interactions upcoming sections security proofs factom secures entries factom extends bitcoin s feature set record events outside monetary transfers factom minimal ruleset adding permanent entries factom pushes data validation tasks client validation factom enforces required protocol trade factoids convert factoids entry credits ensure entries properly paid recorded factom rules token incentives running network internal consistency check validity statements recorded chains users bitcoin limits transactions moving value set inputs set outputs satisfying script required inputs generally requiring certain signatures system ensure validity validation process automated auditing process easy factom instance record deed transfer real estate factom simply record process occurred rules real estate transfers complex example local jurisdiction special requirements property buyer foreigner farmer time resident property fall number categories based location price architecture category rules reflecting validation process smart contracts example cryptographic signature insufficient fully verify validity transfer ownership factom record process occurred validate transfers bitcoin miners perform primary tasks resolve double spends seeing conflicting transactions spend funds twice resolve admissible second job miners perform nodes auditing bitcoin miners include valid transactions included blockchain assumed audited thin client need know history bitcoin value receive spent spv 4 x0chow factom servers auditing servers validate entries factom splits roles bitcoin miners tasks 1 recording entries final order 2 auditing entries validity 1 factom servers accept entries assemble blocks fix order 10 minutes entry ordering irreversible inserting anchor bitcoin blockchain factom creating hash data collected 10 minutes recording hash blockchain 2 auditing entries separate process trust auditing critical factom able validate entries included factom dataset trust based auditing thin client trust competent auditor choose entry entered system auditor verify entry valid auditors submit cryptographically signed entry signature entry passed checks auditor deemed required audit requirements fact factom chain real estate example earlier auditor double check transfer conformed local standards auditor publicly attest transfer valid trustless auditing similar bitcoin system internally consistent mathematical definition validity like bitcoin audited programmatically rules transfer able audited computer application download relevant data run audit application build awareness system state downloaded verified decided entries valid mastercoin counterparty colored coins similar trust model client validated protocols meaning transactions embedded bitcoin blockchain bitcoin miners audit validity invalid transactions designed look like transactions protocols inserted blockchain clients support protocols scan blockchain find potential transactions check validity build interpretation control assets lie usually bitcoin address clients auditing protocols moving client validated protocols factom matter defining transaction protocol establishing chain hold transactions transaction protocols wouldn t different factom bitcoin factom allows easy expression information needed instead having encode special way bitcoin transaction 5 x0cproving negative bitcoin land registries systems need solve fundamental problem proving negative prove thing transferred person prove thing hasn t transferred proof negative impossible unbounded system possible bounded system blockchain based cryptocurrencies solve problem limiting places transactions found bitcoin transactions found bitcoin blockchain relevant transaction found blockchain defined bitcoin protocol perspective exist btc hasn t sent twice double spent certain land ownership recording systems similar assume system land transfer recorded governmental registry legal system set unrecorded transfers assumed invalid sans litigation individual wanted check title clear e claims land answer governmental registry individual government records prove negative land wasn t owned party registration title required governmental registry attest registered private transfer exist invalidates understanding registry cases negative proven context mastercoin case strong land registry limited context registry open challenge real world messy factom designed accommodate precision digital assets real world s messy reality factom hierarchy data categorization factom records entries chains user defined chains dependencies factom enforces protocol level differs bitcoin transaction potentially double spend validated organizing entries chains factom allows applications smaller search spaces factom data combined ledger factom manage land transfers application chain record registries safely ignore entries chains maintain security camera logs governmental court ruling change land registration relevant chain updated reflect ruling history lost changes actually invalid legal perspective record altered hide order events factom 6 x0cnick szabo written property clubs overlaps system nugget paper secure property titles owner authority thugs physical property force continued existence correct ownership records remain thorn usurping claimants applications validate factom chains factom doesn t validate entries entries instead validated client users applications long application understands knows rules chain follow existence invalid entries doesn t cause unreasonable disruption entries chain follow rules disregarded application users use set rules chains convention communicate rules users chains entry chain hold set rules hash audit program etc rules understood applications running factom ignore invalid entries client enforced sequence specified entries meet requirements specified enforced sequence rejected entries rejected rules audit program recorded users chains need run audit program validate chain sequence type factom servers validate rules audit program validation applications combination user defined chains provides number advantages applications written factom 1 applications factom entries sense application list hashes validate list account statements recorded easily exchanges asset 2 rule execution efficient distributed network execute validation rules validation requires nodes validation client validation requires systems care rules run factom allows chain define rules language designers choose run platform choose use external data decisions application impact application 3 factom servers little knowledge entries recorded use commitment scheme limit knowledge commitment record entry prior revealing entry makes factom s role recording entries simple makes individual server processes public factom servers accept information network nodes decisions behavior 7 x0cin view failure perform audited network outside factom factom easy independently verify factom server fulfilling entry recording responsibility factom t hide potentially errant behavior 4 recording speeds fast number checks factom servers minimal 5 proofs particular chain factom require knowledge chains users need sections factom ignore rest factom authority servers manage chains heart factom decentralized way collect package secure data bitcoin blockchain factom accomplishes network authority servers authority servers set federated servers audit servers share responsibility different aspects system federated servers actually acknowledge order entries transactions factom audit servers duplicate audit work federated servers ready replace federated server offline design ensures decentralization single server control system system servers verify double check work servers server permanently control system responsibility factom cycles federated servers minute role federated server audit server shifts servers authority set set authority servers federated servers active role running protocol federated servers responsibility subsection user chains beginning creation directory block process works like 1 servers reset process lists 2 user submits entry payment public key associated entry credits 3 based public key pay entry servers accepts payment 4 server broadcasts acceptance payment 5 user sees acceptance submits entry 6 based chainid entry servers adds entry process list adds entry appropriate entry block chainid creating entry entry block 8 x0c7 server broadcasts entry confirmation containing process list index entry hash entry linked payment serial hash far server s process list 8 servers update view server s process list validate list update view entry block chainid 9 long user validate relevant process list holds entry fair level assurance successfully entered factom 10 end minute server confirms end section process list end minute marked process list responsibility particular chains shifts authority set 11 end 10th minute directory block constructed entry blocks defined process lists built servers server entry blocks directory blocks entries 12 deterministic method computed nodes protocol shift responsibility particular chainids servers round 13 completion directory block merkle root directory block placed bitcoin transaction submitted bitcoin network eventual confirmation 14 repeat 1 federated servers minute constructing process list chains responsible constructing entry blocks create directory block end 10 minutes process list important broadcasting decisions server rest network servers authority set ranked regular scheduled basis ranking function support standing parties create profile chain factom profile contains number signed public address entries weight standing party s support determined public addresses entries profile function computing weight standing party uses combination factors weights organized categories distribute influence factors determine identity s weight include factors measured protocol audited protocol examples factors calculate weight include xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f weighted number entry credits purchased weighted number entries tokens staked profile chain moved transferred tokens build infrastructure support protocol provide services providing guidance facilitating operation protocol support specified standing parties time regular intervals support servers authority set evaluated membership authority set adjusted mechanism measure support protocol decisions protocol 9 x0cto maintain position authority set servers continually demonstrate ability maintain ability monitor operation protocol federated servers simply job syncing end minute operations federated servers performance protocol s ecosystem factor decisions support support authority node audit servers issue heartbeat message monitored network solutions possible managing timeouts monitoring heartbeats according needs load protocol factom system overview factom constructed set layered data structures factom constructed hierarchical set blocks highest directory blocks constitute micro chain consisting primarily compact references size small reference directory block hash entry block plus chainid entry blocks references point entries particular chainid arrived time period entry block chain id micro chain bulk data factom leaves entries hierarchical data structures rendered unchangeable bitcoin s hashpower conceptualized different layers layers concepts factom system 1 directory layer organizes merkle roots entry blocks 2 entry block layer organizes references entries 3 entries contains application s raw data hash private data 4 chains grouping entries specific application directory layer directory layer organizes merkle roots 10 x0cthe directory layer level hierarchy factom system defines entry chainids updated time period covered directory block chainids identify user s chain entries generation chainid discussed later mainly consists list pairing chainid merkle root entry block containing data chainid entry block referenced directory block takes 64 bytes 32 byte hashes chainid merkle root entry block million entries result set directory blocks roughly 64 mb size average entry block 5 entries 64 mb directory blocks provide high level management 5 million distinct entries note exact implementation directory blocks vary build greater scale future application directory blocks find entry blocks interested downloading entry block individual application interested small subset chainids tracked factom greatly limits bandwidth individual client need use factom system record example application monitoring real estate transfers safely ignore video camera security logs factom servers collect merkle roots entry blocks package directory block directory block merkle roots recorded bitcoin blockchain allows minimum expansion blockchain allows ledger secured bitcoin hash power process adding merkle root bitcoin blockchain referred anchoring section appendix timestamping bitcoin details data entered directory blocks expensive bandwidth storage perspective users factom wishing find data chains need set directory blocks starting chain began activities increase directory block size include creation update individual chains activities externalize costs applications attempting finer grained organization 11 x0cthe applications required expend entry credits simple entry necessitate discourage bloating directory blocks entry block layer entry block layer organizes hashes data entry blocks second level hierarchy system individual applications pay attention chainids entry blocks place application looking entries expand search chainid discover possibly relevant entries entry block updated chainid directory block entry blocks contain hashes individual entries hashes entries prove existence data 12 x0cand key find entries distributed hash table dht network section factom peer peer network detail entry blocks encompass extent possible entries related chainid entry referred entry block assumed exist allows application prove negative described section security proofs entry block intentionally contain entries allows entry blocks smaller data grouped separating entries entry blocks allows easier auditing auditors auditor post entries separate chain approves rejects entries common chain audit add reasons rejection entry application trusts auditor cross reference auditor approved rejected entry knowing entry application attempt download entries passed audit multiple auditors reference entries entries exist distributed hash table dht entries expected significantly larger mere 32 bytes hash takes lists things ignore object ignored application know ignore exact implementation entry blocks vary future response identified improvements possible protocol entry detailing specifics land transfer entered chain land transfers type expected found auditors reference hashes land transfer chains adding cryptographic signatures indicating pass fail land transfer document need stored referenced multiple different chains 13 x0centries entries created entries constructed users submitted factom hashing encoding information user ensure privacy entries entries instead plain text encoding obscuring data isn t necessary recording hash document factom provide basic proof publication presenting document later time allows create hash compare hash recorded past lots flexibility data accepted short like hyperlink larger large fees limit size data accepted similar bitcoin large 100 kb bitcoin transactions possible need pay proportionately greater transaction fee size gigantic bitcoin moderately sized factom bitcoin node needs entire blockchain fully validate needs stay small factom highest level directory blocks required fully validate chain specifically interested chain s data download simple example uneditable twitter like system celebrity craft entry piece text sign private key came followers celebrity find chain publish monitor updates new signed entries recognized follower s application software tweet tweet celebrity adding entries celebrity s chain 14 x0cchains entries organized chains chains factom sequences entries reflect events relevant application sequences heart bitcoin 2 0 chains document event sequences provide audit trail recording event sequence occurred addition cryptographic signatures events proof originated known source chains logical interpretations data placed inside directory blocks entry blocks directory blocks indicate chains updated entry blocks indicate entries added chain somewhat analogous bitcoin clients maintain local idea utxo unspent transaction output set utxo set currently blockchain interpreted client 15 x0cthe factom peer peer network factom peer peer p2p network accomplishes goals communication data preservation factom peer peer communications factom p2p network similar bitcoin s consist nodes factom data nodes create gossip network flood fill valid data network authority servers nodes nodes authority servers like bitcoin miners nodes nodes miners limit ability ddos authority servers individually connect inside network acquire data needed build data structures servers coming consensus disseminate signed data publish data p2p network p2p flood filling limits ability authority servers censor based ip addresses valid traffic mixed nodes connect helps prevent censorship servers entries included entry blocks outside organizations campaigning authority servers incentive bring bad behavior light gain support set authority servers data preservation dissemination factom data structures directory blocks entry blocks entries needed factom useful public preserved places authority servers need maintain data correct decisions adding new entries data provide service node protocol grows protocol able support partial nodes share factom dataset partial nodes share data relevant specific application peer discovery partial nodes handled sort directory service distributed hash table dht 16 x0cthis setup allows efficient peer distribution data entire factom dataset grows unwieldy sizes directory service allows data preserved independent authority servers nodes nodes removed network data shared numerous set parties interested specific subsets data 17 x0ca deeper discussion factom factom chains factom groups entries chainid chainid computed chain chainid hash chain chain byte array arbitrarily long length figure conversion chain chainid hash operation simple process deriving chain chainid simple lookup table needed user provide chain chainid shown hash prevents unhashed data chainid stored way directory blocks convention eliminates insertion obscene plaintext block structure chain fairly arbitrary random number string text public key individual application derive meaning different chain names possible convention use human readable text chain allow structuring chains logical hierarchy chains hierarchical nature users use naming conventions making simple modifications ensure accidental intersections chains chains consider following path myfavoriteapp bin slash convention level hierarchy slash separating ascii strings myfavoriteapp bin represents transitioning deeper level strings converted bytes options strings encoded utf 16 utf 32 ascii like ibm s epcdic encodings result entirely different chainids string computation chainid bytes furthermore application utilize globally unique identifier guid number byte array naming convention eliminate overlap application s chainid space expense bytes chain creation 18 x0cusing factoids purchase entry credits factoids main internal scarcity token moderate reward system actors right entries factom represented entry credits factom separates value holding mechanisms serve different purposes factoids converted entry credits vice versa factoids implemented way bitcoin implemented allowing multiple inputs multiple outputs etc input requires proper signature transaction valid sorts validation including multisig possible factoid transactions managed special factoid chain factoid chain handled restrictively chains entries factoid chain valid factoid transactions factom servers reject entries factoids included protocol completely decentralize factom reduce bloat spam factom bitcoin factoids converted entry credits protocol paid factom servers protocol factoids budgeted paid remain grant pool tokens issued support develop protocol protocol factoids help bind consensus consensus lost factoids fall value incentivizing support protocol conversion factoid entry credits special purchase transaction factoid chain purchase transaction include xe2 x97 x8f xe2 x97 x8f output directing factoid converted public key receive entry credits entry credits purchased transferred public key pay entries greatly reduces value thieves resold entry credit private keys held low security areas minimal risk 19 x0cusing entry credits write entries adding entries factom requires giving scarce resource resource entry credits derived factoids adding entries factom step process entry paid committed payment accomplishes things decrements entry credits associated user s public key operation hash entry specified entry paid server wait unhashed entry include seen revealed 1 pay entry xe2 x97 x8b decrement entry credits owned user xe2 x97 x8b user specifies hash entry payment 2 insert entry xe2 x97 x8b user publishes entry inclusion entry block benefits step process benefit separate payment overhead recorded data future users forced download data generated payment minutia need download minimum data validate system allows users safely easily ignore payment information benefit censorship resistance committing accept entry knowing content makes censorship factom servers obvious adam advocated similar mechanism bitcoin post titled blind symmetric commitment stronger byzantine voting resilience user audit server entry properly paid federated servers accepting censorship provable transactions deducting entry credits recorded special chain similar factoid chain federated servers fill chain valid entry credit transactions setting cost entries central server oracle conversion rate factoids entry credits determined choosing target real world value entry credit target determined distributed autonomous process minimum agreed process driven authority set parties involved auditable processes factom decentralize decision target real world target price entry credit chosen oracle required record factom conversion value factoids ec price specification implementation decentralized decision process 20 x0cthe actual implementation target price oracle implementation exchange rate adjustment vary widely optimized decentralization security regulatory compliance note fee calculations rates subject change don t materially impact utility factom protocol factom factoids users factom want wallet want hold cryptocurrency asset want create chains ledgers add entries factom s step recording process allows separation factoids factom s tradable token opportunity post entries factom represented entry credits servers recipients factom tokens sell entry credits customers payment bitcoin conventional credit card payments etc user provide public key hold entry credits seller convert appropriate factoids entry credits assign rights user s public key users buy entries credits factom owning factoids drive factom servers regulation point view powerful servers earn factoids protocol parties transaction server protocol server sells entry credits users eventually return factoids rest system entry credits non transferable user assign user s public key selling private keys isn t practical useful transaction tradable token factoid transferred parties 21 x0cconclusion factom distributed autonomous layer residing bitcoin blockchain goal factom provide power bitcoin s blockchain nearly unlimited range applications uses factom architected users need cryptocurrency whatsoever distributed immutable ledger radical foundational unprecedented technology represented bitcoin blockchain dream extend honesty inherent immutable ledger validated math chaotic real world interactions allowing construction unbounded ledgers backed blockchain factom extends benefits blockchain real world 22 x0cbibliography bitcoin peer peer electronic cash system nakamoto satoshi web 16 nov 2014 https bitcoin org bitcoin pdf blocks remain capped 1mb forever transactions web 15 nov 2014 http bitcoin stackexchange com questions 18101 blocks remain capped 1mb forever thin client security bitcoin web 15 nov 2014 https en bitcoin wiki thin client security simplified payment verification 28spv 29 evidence absence wikipedia wikimedia foundation 11 july 2014 web 15 nov 2014 http en wikipedia org wiki evidence absence recording real estate wikipedia wikimedia foundation 14 nov 2014 web 15 nov 2014 http en wikipedia org wiki recording real estate secure property titles owner authority secure property titles owner authority web 15 nov 2014 http szabo best vwh net securetitle html patent us4309569 method providing digital signatures google books web 15 nov 2014 http www google com patents us4309569 block timestamp bitcoin web 15 nov 2014 https en bitcoin wiki block timestamp op return future bitcoin bitzuma web 15 nov 2014 http bitzuma com posts op return future bitcoin goblin chronobit github web 15 nov 2014 https github com goblin chronobit embed custom data block headers mining web 15 nov 2014 http bitcoin stackexchange com questions 18 embed custom data block head ers headers synchronization coming soon bitcoin core cryptocoinsnews cryptocoinsnews web 15 nov 2014 https www cryptocoinsnews com headers synchronization coming soon bitcoin core enabling blockchain innovations pegged sidechains block stream web 15 nov 2014 http www blockstream com sidechains pdf 23 x0c bitcoin development 2 way pegging way bitcoin staging mailing lists web 27 2014 http sourceforge net p bitcoin mailman message 32108143 bitcoin network ultrasecure notary service computerworld accessed 27 2014 http www computerworld com s article 9239513 bitcoin network ultrasecure notary service proof existence proof existence web 27 2014 http www proofofexistence com virtual notary virtual notary web 27 2014 http virtual notary org commitment scheme web 16 november 2014 http en wikipedia org wiki commitment scheme foundations cryptography volume 1 basic tools draft available author s site cambridge university press isbn 0 521 79172 3 16 november 2014 http www wisdom weizmann ac il oded foc book html 224 real world sybil attacks bittorrent mainline dht wang liang jussi kangasharju university helsinki web 17 nov 2014 http www cs helsinki fi u lxwang publications security pdf sybil resident dht routing university cambridge danezis george chris lesniewski laas kaashoek m frans anderson ross web 17 nov 2014 https www cl cam ac uk rja14 papers sybildht pdf sybil proof drop dht lesniewski laas chris web 17 nov 2014 http pdos csail mit edu papers sybil dht socialnets08 pdf art provenance verify web 17 nov 2014 http www artbusiness com provwarn html equine appraisal value horses web 17 nov 2014 http www hgexperts com article asp id 7366 proof work web 17 nov 2014 https en bitcoin wiki proof work time passwords nested hash chain web 17 nov 2014 http security stackexchange com questions 35135 time passwords nested h chain proving bitcoin reserves web 17 nov 2014 24 x0chttps iwilcox uk 2014 proving bitcoin reserves distributed consensus proof stake impossible web 17 nov 2014 https download wpsoftware net bitcoin pos pdf 25 x0cappendix 1 audit application examples useful today create useful applications today factom protocol application generic term user software reads writes factom system software human interface completely automated application interested data organized chains needs applications possibly distributed applications dapps interacting factom provide additional services example imagine trading engine processes transactions fast accurate timestamping application nonetheless stream transactions factom chains document secure ledger engine mechanism provide real time cryptographic proof process reserves communications let explore separate applications immediate demand current bitcoin ecosystem let implement secure distributed log platform log analysis complex task additionally logs tend easily forgeable heterogeneous produced system independently stored variety media files databases cloud services etc factom uniquely designed crypto audit tools entities log analysis safer simpler powerful let s example suppose bank b payment provider pp bitcoin company bc interacting follows 1 user goes bc website wants buy bitcoins 2 asks quote valid 5 minutes 3 redirected pp website 4 pp connects b platform money user account debited 5 b notifies pp user account debited 6 pp notifies bc 7 bc sends bitcoins user normal scenario fixed rate bitcoin exchanges globally assume reason bc receives payment notification 4 hours user transfers pp faulty user bank payment provider similar payment problem happened hundreds thousands payments period days weeks issue identified resolved provably liable loses damages 26 x0cwith current techniques manual auditing logs necessary probably require legal authorizations factom right audit applications trivial detect problem came changing records impossible post issue basically system bb pp bc publish relevant traces secure broadcast channel factom real time s example factom useful bitcoin exchanges audits called proof solvency method conducting bitcoin exchange audits growing important trend significant weaknesses approach solved having factom secure broadcast channel functioning properly merkle tree approach solvency proofs suggested maxwell todd proposal users manually report balances user s leaf correctly incorporated liability declaration financial institution fi merkle hash fi s database user balances proposed solution works users verify account included tree case account included s assumed instance reported potential risk process exchange database owner produce hash true representation database exchange hashes incomplete database reduce apparent liabilities customers making appear solvent verifying party scenarios fraudulent exchange easily exclude accounts xe2 x97 x8f colluding whales attack evidence large bitcoin traders operating exchanges moving markets significantly traders need capital reserves largest exchanges quickly execute orders traders choose exchanges trust way assured hack liquidity issue arise priority money case exchange trader collude remove whales account balance database s hashed exchange s 10 whales easily represent 5 20% exchanges liabilities colluding significant impact xe2 x97 x8f site manipulation attack date proof solvency audit reported hash tree institution s website gives guarantee users malicious exchange publish different states balances different groups users retroactively change state fundamental publish data factom s secure broadcast channel publish frequently second attack obviously solved factom obvious paper doesn t focus mechanics exchanges audits won t delve nitty gritty details basic concept having frequent time stamped copies exchanges database merkle hash detect inclusion exclusive large balances audits auditor simply look large inclusions 27 x0cexclusions manually remember trader ultimately need money exchange point ll bank history bitcoin transfer history established process detecting fraudulent tactics traditional audit industry starts having accurate verifiable immutable time series information question 28 x0cappendix 2 attacks factom denial service spam factom open system user entries chain bitcoin similar phenomenon order application reject transactions application need download process large number bogus entries slow initial processing application s transactions threat mitigated attacker needing spend money resources carry similar adam s hashcash solution email spam audits useful tool spam application willing trade security versus convenience auditors post ignore lists chain create audit chains lists auditor use profile chain develop reputation allow review auditors auditor bad easily verifiable record permanent validity processing gray sense opinions vary solving problem implementation specific sybil attack dht distributed hash tables general particularly susceptible sybil attacks attacker create peers difficult honest nodes communicate simplistic dht architecture attackers isolate required piece data honest nodes sybil attacks observed bittorrent network routing table paper real world sybil attacks bittorrent mainline dht detail attacks fighting type attack active topic academic research mitigation technique uses complex lookup techniques find honest nodes sybils studied sybil resistant dht routing sybil mitigation techniques rely web trust adding social network routing table explored sybil proof hop dht factom rely latest academic open source research topic secure dht dictionary attack case attacker runs chain names deemed possible desirable creates chainids hashes chainids watch trying create chains attacker run match match know chainid construct proper malicious entry create proper chain payment submit users payment 29 x0cif attacker gets ahead user win defense dictionary attack avoid common spaces submit payment multiple long standing nodes network factom flexibility defining chain namespace makes efforts hog namespace ineffective fraudulent servers entries factom require signatures users match hash signed users means fraudulent federated servers federation pool limited attacks protocol invalid entries validate broadcasting invalid entry honest federated servers immediately broadcast server fault message sfm fraudulent server majority detect fault faulty server removed long majority collude protocol remain honest federated server failed detect fault likewise risks losing support factom users dropping federated server pool federated servers delay recording entry payments entry payments submitted distributed set factom nodes delaying entry payments noted users withdraw support servers reasonable performance compared rest network federated servers delay recording entries payment accepted generally server fairly quickly reason federated server refuses record entry minute responsibility chain shift server long servers honest entry recorded data time server delaying entries cause potentially lose support federated servers point send false messages federated servers issue sfr rogue server messages didn t sense majority servers issuing sfr boot rogue server network ignore messages forward federated servers refuse accept valid entry payment messages based public address assumption public address associated party assuming majority servers honest payment accepted control shifts honest server furthermore nodes watching delay pattern delays support lost misbehaving servers 30 x0cappendix 3 timestamping bitcoin factom timestamping mechanism secures transactions blockchain factom data timestamped irreversible bitcoin network user s data secure bitcoin transaction published bitcoin blockchain compact proof publication possible data entered factom system data organized block structures highest level directory blocks created merkle trees 10 minutes data set frozen submitted bitcoin network bitcoin unpredictable block time fewer factom timestamp bitcoin block bitcoin internal header block times fluid idea time 2 hour possible drift reality factom provide internal timestamps adhering standard time systems user data ordering assigned received federated servers factom organizes submitted entry references sets blocks block time factom minutes closing federated server network generates consensus entries block structure timestamped minute block general note data existed long timestamped application running factom provide finer accurate timestamping services prior entries recorded factom factom timestamp proves data originate factom timestamp 31 x0cthe merkle root directory block entered bitcoin blockchain spending transaction spend includes output op return refer anchoring directory block bitcoin blockchain method damaging bitcoin network ways timestamp data possible alternatives op return data blockchain anchored p2pool headers chronobit bitcoin block header coinbase p2pool headers require hours mining find block satisfies p2pool rules added complexity factom protocol worth benefits including merkle root coinbase block require cooperation miners transaction processing coinbase entry need crypto signature factom system save space relative signed transaction bytes available 40 anchor designator tag 2 bytes value fa factom anchor 32 bytes concatenated tag block height added 6 bytes allowing 500 000 years designator tag indicates transaction factom anchor qualifiers required tag factom block height eliminates op return transactions need inspected block height op return helps fix order cases bitcoin blockchain records anchors order anchored data merkle root list containing directory block s merkle root querying database dht anchored data return directory block find rest data block merkle root timestamp entered bitcoin blockchain federated servers server delegated timestamp federation s collected data creates bitcoin transaction transaction broadcast bitcoin network included bitcoin block bitcoin transactions look like factom anchor spent address known factom server junk attempt fork factom users applications ignore anchors bitcoin blocks generated statistical process timing predicted means anchors roughly time bound op returns inserted bitcoin blockchain timestamping mechanism real value anchoring factom bitcoin prevent generating false factom histories bad luck bitcoin miners delayed inclusion factom transactions time factom state frozen particular 10 minute period anchor appears bitcoin vary significantly 32 x0cthe ramifications federated servers anchoring vs proof work proof work pow optimized permissionless participation validation historical record blockchain typical implementation proof work repeatedly hash blocks parties mining finds hash difficulty required current requirements blockchain allows serve miner collect validate transactions pack blocks repeatedly hash block looking solution meets difficulty requirement shortcomings pow widely discussed media requiring unnecessary amounts power sorts problem solving work result benefits blockchain users ecosystem society goal proof stake pos systems blockchains proof stake makes historical record hard validate work data recording system like factom validating historical stake parties involved entire blockchain understanding stake existed point time historically factom needs small cryptographic proofs validate sets data pow provides pow validated solely evaluating difficulty hash anchoring solution factom uses secure historical record time avoid duplicating massive expenditure resources required mining system like pos present anchoring secures historical record idea supporting parties allows permissionless participation factom protocol authority set authority set anchoring means running authority servers expensive resources orders magnitude compared mining greater efficiency means rewards paid factom protocol ecosystem pay large utility bills factom use voluntary auditable methods incentivize efficiency authority set set aside resources protocol productive real world work sort proof development receive rewards distributed support identify work evaluate quality work results system provide rewards development alongside rewards generated authority set proof development comes issues main issue oracle problem hard know programming blockchain protocol useful development real world evaluate quality development factom develop mechanisms incentivize supporting parties protocol create evaluation processes audit trails certifications stage development address oracle problem allow self correcting process manage viable proof 33 x0cdevelopment productive ecologically friendly simply rewarding burning energy resources security 34 x0cappendix 4 comparing factom blockchain technologies factom differs bitcoin sidechains factom different bitcoin fact different current cryptocurrency project cryptocurrencies like bitcoin implement strict distributed method validation transactions validate transaction validity input transaction verified transaction authorized cryptographic proof transaction forged transaction checked validity verifying signatures transaction miners hold accountable including valid transactions bitcoin protocol transactionally complete words creation distribution bitcoins transactions completely defined bitcoin protocol transactions specify movement bitcoin block discovery bitcoin mining fees provide block rewards inputs bitcoin protocol leaves bitcoin protocol words 21 million bitcoins ultimately exist forever exist protocol pegged sidechains implemented provide additional movement bitcoin value outside blockchain pegged value stasis blockchain sidechains proposal describes solution increase scalability bitcoin allowing value control blockchain sidechain sidechain trades occur later cryptographic proof transactions recorded blockchain moves btc stasis bitcoin proof available bitcoin miners bulk transaction data left sidechain factom sense attempting increase scalability enabling value transactions moving non btc transactions blockchain transactions primarily intended transfer bitcoin value example transactions manage domain registrations log security camera footage track provenance art work establish value horses documenting history value like transactions establishing proof publication sidechains factom trying transactions blockchain achieve similar ends completely different mechanisms point factom integrate bitcoin sidechain order advantage atomic swaps btc factoids 35 x0chow factom different blockchain technologies different groups looking find ways leverage bitcoin approach managing sorts transactions tracking bitcoin balances example trading assets houses cars digitally bitcoin extensions trading commodities precious metals futures securities clever encoding inserting information bitcoin blockchain efforts expand bitcoin cover kinds trades include colored coins mastercoin counterparty developers choose build cryptocurrency flexible protocol handle trades currency include namecoin ripple ethereum bitshares nxt open transactions ot uses cryptographic signatures signed receipts proof balance users e user need transaction history prove balance receipt way ot provide spend centralized servers risk centralized server alter client balances factom decentralized records entries factom record data meet ot s rules factom execute rate ot initially factom distributed expect users employ cryptographic techniques similar ot records great advantage independent platform trying build bitcoin found flexibility bitcoin protocol isn t optimized allow recording arbitrary pieces data bookkeeping necessary non bitcoin type transactions isn t necessarily supported bitcoin furthermore bitcoin s proof work pow based consensus method size fits solution given transactions resolve faster 10 minutes ripple open transactions vastly speed confirmation times changing consensus method application built factom seeks gain ability track assets implement contracts leveraging blockchain directly instead inserting transactions blockchain viewed blockchain bloat factom records entries structures base level factom records chains entries added factom directory block time scanning records applications pick chains interested factom records chain independently applications pull chain data need factom organized way minimizes connections user chains chain factom validated information held unrelated chains minimizes information factom user maintain validate chains interested 36 x0cappendix 5 proof stake similarities factom consensus similarities differences proof stake policy reward mechanism factom similar proof stake pos factom differs pos systems subsets user stake contribution recognized individual categories stake weighted decentralized factom attempt servers answerable users actively contributing protocol individual users delegate support server federated servers numbers support responsible coming consensus deep understand bitcoin recognized pure pos consensus mechanisms fundamentally flawed attacks pure pos unworkable problems referred stake grinding stake factom pos elements suffer problems stake grinding stake grinding problem attacker sizable 10% majority share formulate false histories point history costlessly fork blockchain choosing reorder past transactions stake selected create subsequent blocks able present alternate version history attack steal value double spending bitcoin solves problem strongly linking information domain computers decisions thermodynamic domain humans burn energy considerable resources expended thermodynamic domain provable information domain bitcoin makes forming false histories hugely expensive factom unable create alternate histories fact unable insert transactions historical bitcoin blocks unable create parallel histories detected factom linked bitcoin known bitcoin private keys stake stake problem subtle policy disagreement bitcoin miners choose policy choose majority burning lots electricity chance recouping costs pos miners face dilemma hedge bets costlessly create forks complying policy simultaneously agree sides disagreement open 37 x0cup economy double spend attacks merchants following different forks ultimately money worthless bitcoin solves problem having unintelligent unambiguous automatable rules selecting correct fork bitcoin correct fork proof work pow factom unintelligent unambiguous automatable rules select correct fork arise 38 x0c