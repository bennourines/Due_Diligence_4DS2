neo white paper distributed network smart economy neo design goals smart economy neo use blockchain technology digital identity digitize assets use smart contracts digital assets self managed achieve smart economy distributed network digital assets digital assets programmable assets exist form electronic data blockchain technology digitization assets decentralized trustful traceable highly transparent free intermediaries neo blockchain users able register trade circulate multiple types assets proving connection digital physical assets possible digital identity assets registered validated digital identity protected law neo forms digital assets global assets contract assets global assets recorded system space identified smart contracts clients contract assets recorded private storage area smart contract require compatible client recognize contract assets adhere certain standards order achieve compatibility clients digital identity digital identity refers identity information individuals organizations entities exist electronic form mature digital identity system based pki public key infrastructure x 509 standard neo implement set x 509 compatible digital identity standards set digital identity standards addition compatible x 509 level certificate issuance model support web trust point point certificate issuance model verification identity issuing digital identities includes use facial features fingerprint voice sms multi factor authentication methods time use blockchain replace online certificate status protocol ocsp manage record x 509 certificate revocation list crl smart contract smart contract proposed cryptographer nick szabo 1994 years creation world wide web according szabo s definition pre programmed condition triggered smart contract execute corresponding contract terms blockchain technology provides decentralized tamper resistant highly reliable system smart contracts useful neo independent smart contract system neocontract neocontract smart contract system biggest feature seamless integration existing developer ecosystem developers need learn new programming language use c java mainstream programming languages familiar ide environments visual studio eclipse etc smart contract development debugging compilation neo s universal lightweight virtual machine neovm advantages high certainty high concurrency high scalability neocontract smart contract system allow millions developers world quickly carry development smart contracts neocontract separate white paper describing implementation details application ecosystem ecosystem vitality open source community order achieve goal intelligent economic network neo committed development ecosystem providing mature development tools improving development documents organizing education training activities providing financial support plan support following neo based applications ecology reward improvements design experience node program fully functioning node pc program light node pc program better user experience web android ios clients need synchronize blockchain hardware wallet blockchain explorer sdk development kit support java kotlin net c vb javascript typescript python smart contract compiler ide plugin c vb net f visual studio java kotlin eclipse c c javascript typescript python ruby decentralized applications smart fund ai assisted legal smart contract social networking automated tokens liquidity providers decentralized exchange secure communication protocol data exchange market intellectual property trading market prediction market advertising market hashpower market gas market neo management model economic model neo native tokens neo abbreviated symbol neo gas abbreviated symbol gas neo total 100 million tokens represents right manage network management rights include voting bookkeeping neo network parameter changes minimum unit neo 1 tokens subdivided gas fuel token realization neo network resource control maximum total limit 100 million neo network charges operation storage tokens smart contracts creating economic incentives consensus nodes preventing abuse resources minimum unit gas 0 00000001 genesis block neo network 100 million neos generated gas generated 100 million gas corresponding 100 million neo generated decay algorithm 22 years time address holding neo neo transferred new address subsequent gas generated credited new address neo network set threshold voting exempt gas certain transfer transactions smart contract operations enhance user experience large spam transactions occur neoid prioritize transactions smart contracts qualified identities transactions smart contracts qualifying digital identities priority paying gas distribution mechanism neo distribution neo s 100 million tokens divided portions portion 50 million tokens distributed proportionally supporters neo crowdfunding portion distributed second portion 50 million neo managed neo council support neo s long term development operation maintenance ecosystem neo portion lockout period 1 year unlocked october 16 2017 portion enter exchanges long term support neo projects plans 10 million tokens 10% total motivate neo developers members neo council 10 million tokens 10% total motivate developers neo ecosystem 15 million tokens 15% total cross invest block chain projects owned neo council neo projects 15 million 15% total retained contingency annual use neo principle shall exceed 15 million tokens gas distribution gas generated new block initial total gas zero increasing rate new block generation total limit 100 million gas achieved 22 years interval block 15 20 seconds 2 million blocks generated year year 2 million blocks generated initial generation 8 gas block annual reduction 1 gas block year coincide passing 2 million blocks reduction continue 1 gas block held rate 22 years 44 millionth block total gas generated reached 100 million point generation gas new blocks according release curve 16% gas created year 52% gas created years 80% gas created 12 years gas distributed proportionally accordance neo holding ratio recorded corresponding addresses neo holders initiate claim transaction time claim gas tokens holding addresses governance mechanism chain governance neo token holders network owners managers managing network voting network gas generated neo utilize functions network neo tokens transferred chain governance neo council consists founding members neo project management committee technical committee secretariat respectively responsible strategic decision making technical decision making specific implementation neo council responsible neo community promotion development neo ecosystem primary objective neo technology implementation consensus mechanism dbft dbft called delegated byzantine fault tolerant byzantine fault tolerant consensus mechanism enables large scale participation consensus proxy voting holder neo token voting pick consensus node supports selected group consensus nodes bft algorithm reach consensus generate new blocks voting neo network continues real time accordance fixed term dbft provides fault tolerance f n 1 3 consensus system consisting n consensus nodes fault tolerance includes security availability resistant general byzantine failures suitable network environment dbft good finality meaning confirmations final block bifurcated transaction revoked rolled neo dbft consensus mechanism taking 15 20 seconds generate block transaction throughput measured 1 000tps excellent performance public chains appropriate optimization potential reach 10 000tps allowing support large scale commercial applications dbft combines digital identity technology meaning consensus nodes real individual institution possible freeze revoke inherit retrieve ownership transfer judicial decisons facilitates registration compliant financial assets neo network neo network plans support operations necessary smart contract system neocontract neo s smart contract system consists parts neovm universal block chain virtual machine neovm lightweight general purpose virtual machine architecture close jvm net runtime similar virtual cpu reads executes instructions contract sequence performs process control based functionality instruction operations logic operations good start speed versatility suitable small programs smart contracts ported non blockchain systems integrated ide provide optimal development experience neovm s functionality extended like introducing jit real time compiler mechanism enhancing efficiency implementation interopservice interoperable services load blockchain ledger digital assets digital identity persistent storage area neofs underlying services like virtual machines provided virtual machines enabling smart contracts access services run time achieve advanced functionality low coupling design neovm ported blockchain non blockchain system increasing utility smart contracts devpack compiler ide plugin devpack includes high level language compiler ide plug neovm s architecture similar jvm net runtime compilers devpack compile java byte code net msil neovm s instruction set developers main stream languages like java kotlin c need learn new languages able immediately start developing smart contracts vs eclipse familiar ide environments greatly reduces learning curve developing smart contracts allowing easily build vibrant community neocontract neocontract create smart contract tree static analysis running smart contract deterministic tree neo node dynamically fragment smart contract achieve theoretically unlimited expansion overcomes jamming effect caused static fragmentation block chain systems cross chain interoperability agreement neox neox protocol implements cross chain interoperability neox divided parts cross chain assets exchange protocol cross chain distributed transaction protocol cross chain assets exchange agreement neox extended existing double stranded atomic assets exchange protocols allow multiple participants exchange assets different chains ensure steps entire transaction process succeed fail order achieve function need use neocontract function create contract account participant blockchains compatible neocontract compatible neox long provide simple smart contract functionality cross chain distributed transaction protocol cross chain distributed transactions mean multiple steps transaction scattered different blockchains consistency entire transaction ensured extension cross chain assets exchange extending behavior assets exchange arbitrary behavior layman s terms neox makes possible cross chain smart contracts smart contract perform different parts multiple chains succeeding reverting gives excellent possibilities cross chain collaborations exploring cross chain smart contract application scenarios distributed storage protocol neofs neofs distributed storage protocol utilizes distributed hash table dht technology neofs indexes data file content hash file path uri large files divided fixed size data blocks distributed stored different nodes main problem type system need find balance redundancy reliability neofs plans solve contradiction means token incentives establishment backbone nodes users choose reliability requirements file files low reliability requirements stored accessed free free stable reliable services files high reliability requirement provided backbone nodes neofs serve interopservice interoperability services neocontract system enabling smart contracts store large files blockchain set access files addition neofs combined digital identity digital certificates digital identities assigned sent revoked central server manage future old block data stored neofs nodes release old data better scalability time ensure integrity historical data anti quantum cryptography mechanism neoqs emergence quantum computers poses major challenge rsa ecc based cryptographic mechanisms quantum computers solve large number decomposition problems rsa relies elliptic curve discrete logarithm ecc relies short time neoqs quantum safe lattice based cryptographic mechanism present quantum computers ability quickly solve shortest vector problem svp closest vector problem cvp considered reliable algorithm resisting quantum computers summary neo distributed network combines digital assets digital identities smart contracts neo system use dbft neox neofs neoqs original technologies infrastructure intelligent economy future neovm introduction neovm lightweight virtual machine executing neo smart contracts core component neo neovm turing completeness high consistency implement arbitrary execution logic ensure consistent execution results node distributed network providing strong support decentralized applications help neocompiler source code written java c high level languages compiled unified neovm instruction set achieving cross platform lowers development threshold enabling smart contract developers participate application development neo ecosystem learning new development language addition neovm highly decoupled upper level code customizable techniques interop services neovm simply creating instance incredibly easy use applied blockchain non blockchain scenarios infrastructure execution process infrastructure neovm architecture mainly composed execution engine stack interoperation service layer executionengine executionengine core neovm mainly responsible loading scripts executing corresponding instructions flow control stack operation bit operation arithmetic operation logical operation cryptography etc interact external data interoperable service layer system stack neovm stack based virtual machine neovm types stack invocationstack evaluationstack altstack resultstack invocationstack store execution contexts current neovm isolated stack context switching performed based current context entry context current context points element invocation stack executioncontext0 architecture figure entry context points tail element invocation stack executioncontextn architecture figure evaluationstack storing data instruction execution process execution context evaluation stack altstack storing temporary data instruction execution process execution context alt stack resultstack store execution result scripts executed interoperation service layer interoperation service layer bridge vm external data invoking interoperation interfaces neovm access block information transaction information contract information asset information data required execution smart contracts neo smart contract choose enable private storage area stores data key value format help interoperation service layer neovm dynamically modify corresponding data storage area executing smart contract interoperation service layer provides encryption algorithms zero knowledge proof network resource access etc meet needs developers build advanced applications addition interoperation service layer supports custom extensions modifications meet customization needs developers execution process neo supports multi language smart contract development neocompiler compiles multi language smart contracts unified avm bytecode files decoded executed neovm cross platform compatibility achieved multi language compliers virtual machines complete execution process follows compiling source code smart contracts unified bytecode files corresponding compilers execution engine neovm loads bytecode file constructs bytecodes related parameters file execution context finally pushes invocation stack time execution engine takes instruction current context executes corresponding operations according instruction data generated execution process stored evaluation stack alt stack current context accessing external data encrypting data zero knowledge proof operations interoperation interfaces invoked scripts executed result stored result stack neocontract white paper preface smart contracts refer computer program automatically execute terms preprogrammed contract idea smart contract proposed cryptographer nick szabo 1994 making old internet lack reliable execution environment smart contracts widely 2008 man satoshi nakamoto released bitcoin outlined foundational concepts blockchain bitcoin blockchain nakamoto uses set scripting languages help users gain flexibility controlling personal accounts transfer process eventually embryonic form chain based smart contract system 2014 teenager called vitalik buterin released ethereum provides chain based turing complete smart contract system create variety decentralized blockchain applications neo blockchain digital asset application platform provides new smart contract system neocontract core neo platform network provides multiples functions digital asset capabilities neoasset digital identity neoid allowing users easily engage digital businesses longer limited issuance native tokens blockchain features certainty program running different computers different times computer behavior program deterministic input guaranteed produce output blockchain multi party storage computational method data distributed system result reliable calculations tampered smart contracts operate multi node distributed blockchain network smart contract non deterministic results different nodes inconsistent result consensus nodes reached network stagnant design smart contract system need rule factors lead non deterministic behavior time obtaining system time common system function heavily applied certain time sensitive contract procedures obtaining system time non deterministic system function difficult obtain unified precise time distributed system results different nodes inconsistent neocontract provides block based system treats entire blockchain timestamp server obtains timestamp new block generated average neo network generates new block 15 seconds contract runs approximately time latest block time plus minus 15 seconds randomness smart contract programs gambling contracts small games use random number functions random number functions typical non deterministic function system obtain different results distributed system ways solve problem firstly random seed nodes return sequence entire random function deterministic method exposes entire random result advance greatly reducing practical value random number possible solution let nodes communicate collaborative way generate random numbers achieved cryptographic techniques produce fair random number disadvantage lies poor performance need additional communication overhead centralized random number provider generate random numbers guarantees consistency performance drawback approach obvious users unconditionally trust centralized number provider ways generate random number neo block generated consensus node reach consensus random number fill nonce field new block contract program easily obtain random number block referencing nonce field contract program use hash value block random number generator block hash value certain inherent randomness method obtain weak random number data source program obtains data run time non deterministic program data source provides non deterministic data example different search engines obtain 10 search results particular keyword yield different results sort orders different ip addresses smart contracts neo provides types deterministic data sources blockchain ledger contract procedure access data entire chain interoperable services including complete blocks transactions fields data blocks deterministic consistent securely accessed smart contracts contract storage space contract deployed neo network private storage area accessed contract neo consensus mechanism ensures consistency storage status node network situations access non blockchain data required neo provide direct way interact data non blockchain data transferred neo blockchain transactions subsequently translated aforementioned data sources order accessible smart contracts contract smart contracts neocontract recursively called recursion achieved contract cross boundaries current contract addition relationship contracts static target specified runtime allows behavior program fully determined execution relationship fully defined run based multiple contracts dynamically partitioned achieve parallel execution high performance execution environment smart contract plays integral role performance analyze performance execution environment main indicators critical execution speed instruction startup speed execution environment smart contracts execution environment important speed execution instruction smart contracts involved io operation logic determine instructions implementation instructions easily optimized time smart contract called start new virtual machine container execution speed environment starting virtual machine container greater impact performance smart contract system neo uses lightweight neovm neo virtual machine smart contract execution environment fast start takes little resources perfect short programs like smart contracts compilation caching hotspot smart contracts jit real time compiler significantly improve efficiency virtual machines scalability high concurrency dynamic partitioning discussing scalability system involves main areas vertical scaling horizontal scaling vertical scaling refers optimization processing workflow allowing system advantage existing equipment capacity approach limits system easily reached series based processing capacity based hardware limit single device need scale system way transform series system parallel system theoretically need increase number devices able achieve unlimited scalability possibly achieve unlimited scaling distributed blockchain networks words blockchain execute programs parallel blockchain distributed ledger records variety state data rules governing changes state data smart contracts carriers record rules blockchains process programs parallel multiple smart contracts executed concurrently non sequential manner basically contracts interact contract modify state data time execution non sequential executed concurrently execute series following sequential order network unable scale horizontally based analysis easily design unlimited scaling smart contract systems set simple rules smart contract modify state record contract belongs transaction batch block contract running result smart contracts processed parallel sequential order irrelevant result smart contract modify state record contract belongs implies contract contract isolated island transaction batch block contract running implies digital asset issued smart contract handle transaction block world difference original design goals smart contracts cease smart design goals include mutual contracts multiple execution block fortunately smart contracts neo static relationship target specified run time allows behavior program fully determined execution relationship fully defined run require contract explicitly indicate contracts likely invoked operating environment calculate complete tree running contract procedure partition execution contracts based tree contracts modify state record executed sequential manner partition different partitions executed parallel low coupling coupling measure dependency entities neocontract system uses low coupling design executed neovm communicates non blockchain data interoperable service layer result upgrades smart contract functions achieved increasing api interoperable services contract use verification contract unlike public key account system bitcoin neo s account system uses contract account system account neo corresponds verification contract hash value verification contract account address program logic verification contract controls ownership account transferring account firstly need execute verification contract account validation contract accept set parameters usually digital signature criteria return boolean value verification indicating success verification system user deploy verification contract blockchain publish contract content directly transaction transfer process application contract application contract triggered special transaction access modify global state system private state contract storage area run time example create global digital asset contract vote save data dynamically create new contract contract running execution application contract requires charging instruction transaction fee consumed contract fail stop execution state changes rolled success contract affect validity transaction function contract function contract provide public commonly functions called contracts smart contract code reused developers able write increasingly complex business logic function contract deployed choose private storage area read written data future contract achieving state persistence function contract pre deployed chain invoked removed chain self destructing system function longer private storage destroyed old contract data automatically migrated subcontract destroyed contract migration tools virtual machine virtual hardware neovm provides virtual hardware layer support execution smart contracts including cpu cpu responsible reading sequentially order execution instructions contract according function instruction flow control arithmetic operations logic operations future cpu function extended introduction jit real time compiler function enhancing efficiency instruction execution stack stack hold context information program execution function continue execute current context function finished executing returning calculate stack neovm run time data stored calculation stack implementation different instructions stack calculated corresponding data elements operation example additional instructions executed operations participating addition ejected calculation stack result addition pushed stack function parameters calculated right left according order stack function successfully executed stack fetch function returns value spare stack need schedule rearrange elements stack temporarily store elements spare stack retrieve future instruction set neovm provides set simple practical instructions building smart contract programs according functions main categories follows constant instruction process control instruction stack operation instruction string instruction logic instruction arithmetic operation instruction cryptographic instruction data operation instruction worth noting neovm instruction set provides series cryptographic instructions ecdsa sha algorithms optimize implementation efficiency cryptographic algorithms smart contracts addition data manipulation instructions directly support arrays complex data structures interoperable service layer virtual machine smart contract executes sandbox environment requires interoperable service layer times needs access data outside sandbox run time data persistent interoperable service layer neo contract open series system function services smart contract program contracts called accessed like ordinary functions system functions conducted concurrently need worry scalability debugging function development smart contracts difficult lack good debugging testing methods neovm provides program debugging support virtual machine level set breakpoint contract code single step single process execution thanks low coupling design virtual machine blockchain easy integrate neovm directly ides provide test environment consistent final production environment high level languages c vb net f developers use neocontract high level language good batch supported languages c vb net f etc provide compilers plug ins languages allowing compilation high level language instruction set supported neovm compiler focus msil microsoft intermediate language compilation theoretically net language translated msil language directly supported huge number developers proficient languages languages strongly integrated development environments developers develop generate test debug visual studio able advantage smart contract development templates provide gain head start java kotlin java kotlin forms second batch supported languages provide compilers ide plugins languages help developers use jvm based language develop neo s smart contract applications java widely kotlin recently official google recommended android development language believe supporting languages help drastically increase number neo smart contract developers languages neocontract add support high level languages based degree difficulty complier development process languages supported include c c python javascript future continue add high level language support goal 90% neo developers developing neocontract needing learn new language possibly transfer existing business system code directly blockchain service blockchain ledger neo smart contracts obtain complete block data neo blockchain including complete blocks transactions fields runtime system functions provided interoperable service specifically query data height blockchain block head current block transactions type transaction attributes input output etc data develop interesting applications automatic payouts smart contracts based proof workload digital assets interoperable services provided digital asset interface smart contracts query neo blockchain properties statistics digital assets create new digital assets run time digital assets created smart contracts issued transferred traded outside contract original assets neo managed neo compatible wallet software specific interface includes asset attribute inquiry asset statistics query asset life cycle management create modify destroy etc asset management multi language total change precision change changes administrator persistence smart contract program deployed neo blockchain private storage area read written contract smart contracts operational permissions data store read written modified deleted data stored form key value pairs provides interfaces traverse records stored return specific record according specified key modify write new records according specified key delete record according specified key general contract read write data store exception contract invoked invoked contract access caller s store cross domain request provided caller provides authorization addition sub contract dynamically created time contract execution parent contract gets instant access store cross domain requests enable neocontract implement rich library capabilities provide highly scalable data management capabilities callers fees deployment fee neo s distributed architecture provides high redundancy storage capacity use capacity free deploying smart contract neo network requires fee currently oscillates 100 1000gas depending capabilities required contract fee collected system recorded system gain future fees adjusted according actual operating cost system smart contract deployed blockchain multiple times contract destroyed deployer implementation fee neo provides credible execution environment smart contracts execution contracts requires consumption computing resources node users required pay execution smart contracts fee determined computational resources consumed execution unit price gas implementation smart contract fails lack gas cost consumption returned prevents malicious attacks network power consumption simple contracts executed free long execution costs remain 10 gas greatly reducing costs user application scenarios superconducting transactions digital assets blockchain inherently require form liquidity usually point point transactions provide sufficiently need exchanges provide users trading services digital asset exchanges broadly divided categories central exchanges user needs deposit digital assets exchange subsequent place pending orders trading website decentralized exchanges trading system built blockchain system provides matching services centralized exchanges provide high performance diversified services need strong credit guarantee moral hazards misappropriation user funds fraud etc comparatively decentralized exchange moral hazard user experience poor greater performance bottleneck way combine solutions achieve best worlds superconducting transactions mechanism users need deposit assets able use assets blockchain trading transaction settlement complete blockchain process matching orders occurs chain central exchange provides matching services matching conducted chain efficiency like centralized exchanges assets remain control user exchanges uses user s trading intent carry matching services moral hazards involved misappropriation user funds fraud etc present neo community development smart contracts achieve blockchain superconducting transactions emerged otcgo cross chain interoperability foreseeable future public chains thousands alliance chains private chains existence worldwide isolated blockchain systems islands value information interoperable cross chain interoperability mechanism numerous isolated blockchains linked values different blockchains exchanged achieve true value internet neocontract provides support implementation cross chain interoperability ensuring consistency cross chain asset exchange cross chain distributed transactions execution smart contracts different blockchains oracle machines concept oracles folktale lies ability certain supernatural entity answer particular set questions blockchain oracle machines open door outside world smart contracts making possible smart contracts use real world information condition contract execution neocontract provide ability directly access external data access resources internet introduce non deterministic behavior resulting inconsistencies nodes contract execution implementing oracle machine neocontract requires external data sent blockchain trusted party integrating data feeds blockchain ledger eliminating non determinism credible party mentioned person institution co trusted parties contract decentralized data provider guaranteed economic incentives manner neocontract implementation oracle machines ethereum dapp bitcoin created era blockchains electronic cash ethereum created era smart contracts ethereum pioneers smart contract blockchain great contributions design idea economic model technological realization smart contract system time ethereum platform seen dapps distributed applications functionalities including gambling agreements digital assets electronic gold gaming platform medical insurance marriage platform widespread use industries theory dapps easily transplanted neocontract platform neo application consensus mechanism overview blockchain decentralized distributed ledger system registration issuance digitalized assets property right certificates credit points enables transfer payment transactions peer peer way blockchain technology originally proposed satoshi nakamoto cryptography mailing list e bitcoin numerous applications based blockchain emerged e cash systems stock equity exchanges smart contract systems blockchain system advantageous traditional centralized ledger system openness immutability anti multiple spend characters rely kind trusted party like distributed systems blockchain systems challenged network latency transmission errors software bugs security loopholes black hat hacker threats decentralized nature suggests participant system trusted malicious nodes emerge data difference conflicting interests counter potential errors blockchain system need efficient consensus mechanism ensure node copy recognized version total ledger traditional fault tolerance mechanisms concerning certain problems completely capable tackling issue distributed blockchain systems faced universal cure fault tolerance solution need proof work mechanism employed bitcoin addresses issue brilliantly comes obvious price e significant electricity cost energy consumption bitcoin s existence new blockchains find different hashing algorithms prevent computational attacks example litecoin adopts scrypt bitcoin s sha256 byzantine fault tolerance mechanism universal solution distributed systems neo proposes dbft delegated byzantine fault tolerance consensus algorithm based pbft practical byzantine fault tolerance algorithm algorithm dbft determines validator set according real time blockchain voting effectively enhances effectiveness algorithm bringing block time transaction confirmation time savings dbft2 0 upgraded version released mar 2019 improves robustness safety introducing 3 stage consensus recovery mechanism system model blockchain distributed ledger system participants connect peer peer network messages sent broadcasting types roles exist ordinary nodes bookkeeping nodes ordinary nodes use system transfer exchange accepting ledger data bookkeeping nodes provide accounting service entire network maintain ledger hypothetically system messages subject loss damage latency repetition sending order necessarily consistent receiving order messages activities nodes arbitrary join quit network time dump falsify information simply stop working artificial non artificial glitches occur integrity authenticity information transmission ensured cryptography senders attach signatures hash value message sent algorithm algorithm ensures security usability erroneous nodes consensus making n 1 3 functionality stability system guaranteed n suggests total number nodes joined consensus making r stands set consensus nodes given f n 1 3 f stands maximum number erroneous nodes allowed system fact total ledger maintained bookkeeping nodes ordinary nodes participate consensus making entire consensus making procedures consensus nodes required maintain state table record current consensus status data set consensus beginning end called view consensus reached current view view change required identify view number v starting 0 increase till achieving consensus identify consensus node number starting 0 node numbered n 1 round consensus making node play speaker house nodes play congressmen speaker s number p determined following algorithm hypothetically current block height h n p s value range 0 n new block generated round consensus n f signatures bookkeeping nodes generation block new round consensus making shall begin resetting v 0 general procedures round consensus consists 4 steps shown figure speaker starts consensus broadcasting prepare request message delegates broadcast prepare response receiving prepare request message validators broadcast commit receiving prepare response messages validators produce broadcast new block receiving commit messages view change case following scenarios change view request broadcasted attempting replace speaker transaction verification fails time waiting prepare request prepare response recovery mechanism creating change view request active consensus nodes sum nodes commit sent fault nodes greater f consensus nodes broadcast recovery request message update local consensus context receiving recovery request certain conditions met consensus node generate broadcast recovery message fault tolerance dbft2 0 dbft2 0 consensus system withnvalidators tolerate mostfabnormal nodes consensus phase commit change view block generation etc requires leastmnodes reach consensus long normal validators thanm consensus process smoothly example 4 4 1 3 3 normal validators required alive consensus system wheren 4 single block finality dbft2 0 neo s dbft 1 0 algorithm susceptible single block fork rare cases network latency dbft2 0 fixes problem possibility forking mechanism described follows generate new block required collect commit messages m different validators corresponding block proposal validator change view broadcasting commit message success block generation means m validators having signed block proposal broadcast commit messages validators won t change view current consensus round rest validators insufficient produce different block finality new block guaranteed given height reading consensus algorithm consensus protocol voting