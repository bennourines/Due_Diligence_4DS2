b xef x82 x92 repository explore search features enterprise xef x80 x81 ethereum wiki xef x81 x9f code xef x80 xa6 issues xef x81 x8e watch 16 xef x80 x89 pull requests 0 xef x80 x87 wiki xef x82 x85 pulse sign pricing 305 xef x80 xaa star 1 014 sign xef x80 x82 fork 151 xef x81 x83 graphs white paper lefteris karapetsas edited page 21 days ago xc2 xb7 15 revisions generation smart contract decentralized application platform xef x81 x9a pages satoshi nakamoto s development bitcoin 2009 hailed radical basics 133 development money currency example digital asset home simultaneously backing intrinsic value centralized issuer controller ethereum whitepaper arguably important bitcoin experiment underlying blockchain design rationale technology tool distributed consensus attention rapidly starting shift ethereum yellow paper faq aspect bitcoin commonly cited alternative applications blockchain technology include blockchain digital assets represent custom currencies financial instruments colored ethereum clients coins ownership underlying physical device smart property non fungible assets webthree c domain names namecoin complex applications involving having geth digital assets directly controlled piece code implementing arbitrary rules smart pyeth python contracts blockchain based decentralized autonomous organizations daos ethereum intends provide blockchain built fully fledged turing complete programming language create contracts encode arbitrary state transition functions allowing users create systems described imagined simply writing logic lines code xc3 x90app development xc3 x90app developer resources javascript api json rpc api solidity solidity features table contents useful xc3 x90app patterns standardized contract apis xc3 x90app meteor history bitcoin state transition system mining merkle trees alternative blockchain applications scripting ethereum ethereum accounts messages transactions ethereum state transition function code execution blockchain mining applications ethereum development tutorial mix tutorial mix features serpent lll mutan xc3 x90 xce x9ev technologies rlp encoding rlpx node discovery protocol xc3 x90 xce x9evp2p wire protocol xc3 x90 xce x9evp2p whitepaper wip web3 secret storage ethereum technologies token systems patricia tree financial derivatives wire protocol identity reputation systems light client protocol subtleties decentralized file storage solidity docs abi decentralized autonomous organizations natspec format applications contract abi miscellanea concerns bad block reporting bad chain canary modified ghost implementation extra data fees brain wallet computation turing completeness currency issuance mining centralization scalability ethash dashimoto ethash ethash c api x0cconclusion notes reading introduction bitcoin existing concepts ethash dag infrastructure development morden inter exchange client address protocol url hint protocol history natspec determination concept decentralized digital currency alternative applications like property mining registries decades anonymous e cash protocols 1980s 1990s reliant cryptographic primitive known chaumian blinding provided currency high degree privacy protocols largely failed gain traction reliance centralized intermediary 1998 wei dai s b money proposal exchange integration licensing network status raspberry pi concerning whisper introduce idea creating money solving computational puzzles whisper proposal decentralized consensus proposal scant details decentralized consensus whisper overview actually implemented 2005 hal finney introduced concept reusable proofs work system uses ideas b money adam s computationally difficult hashcash puzzles create concept cryptocurrency fell short ideal relying trusted computing backend 2009 decentralized currency poc 1 wire protocol poc 2 wire protocol poc 2 whitepaper misc time implemented practice satoshi nakamoto combining established primitives hard problems managing ownership public key cryptography consensus algorithm keeping track cryptocurrency owns coins known proof work chain fibers glossary mechanism proof work breakthrough space simultaneously solved problems provided simple moderately effective consensus algorithm allowing nodes network collectively agree set canonical updates state bitcoin ledger second provided mechanism allowing free entry consensus process solving political problem deciding gets influence consensus simultaneously preventing sybil attacks substituting formal barrier participation requirement registered unique entity particular list economic barrier weight single node consensus voting process directly proportional computing power node brings alternative approach proposed called proof stake calculating weight node proportional currency holdings computational resources discussion relative merits approaches scope paper noted approaches serve backbone cryptocurrency bitcoin state transition system technical standpoint ledger cryptocurrency bitcoin thought state transition system state consisting ownership status existing bitcoins state transition function takes state transaction outputs new state result standard banking system example state balance sheet transaction request $x b state transition function reduces value s account $x increases value b s account $x s account $x place state transition function returns error formally define apply s tx s error banking system defined clone wiki locally https github com ethereum wiki wiki git x0capply alice $50 bob $50 send $20 alice bob alice $30 bob $70 apply alice $50 bob $50 send $70 alice bob error state bitcoin collection coins technically unspent transaction outputs utxo minted spent utxo having denomination owner defined 20 byte address essentially cryptographic public key 1 transaction contains inputs input containing reference existing utxo cryptographic signature produced private key associated owner s address outputs output containing new utxo added state state transition function apply s tx s defined roughly follows 1 input tx referenced utxo s return error provided signature match owner utxo return error 2 sum denominations input utxo sum denominations output utxo return error 3 return s input utxo removed output utxo added half step prevents transaction senders spending coins exist second half step prevents transaction senders spending people s coins second step enforces conservation value order use payment protocol follows suppose alice wants send 11 7 btc bob alice look set available utxo owns totals 11 7 btc realistically alice able exactly 11 7 btc smallest 6 4 2 12 creates transaction inputs outputs output 11 7 btc bob s address owner second output remaining 0 3 btc change owner alice mining access trustworthy centralized service system trivial implement simply coded exactly described centralized server s hard drive track state bitcoin trying build decentralized currency system need combine state transaction system consensus system order ensure agrees order transactions bitcoin s decentralized consensus process requires nodes network continuously attempt produce packages transactions called blocks network intended produce roughly block minutes block containing timestamp nonce reference ie hash previous block list transactions taken place previous block time creates persistent growing blockchain constantly updates represent latest state bitcoin ledger algorithm checking block valid expressed paradigm follows x0c1 check previous block referenced block exists valid 2 check timestamp block greater previous block 2 2 hours future 3 check proof work block valid 4 let s 0 state end previous block 5 suppose tx block s transaction list n transactions 0 n 1 set s 1 apply s tx application returns error exit return false 6 return true register s n state end block essentially transaction block provide valid state transition canonical state transaction executed new state note state encoded block way purely abstraction remembered validating node securely computed block starting genesis state sequentially applying transaction block additionally note order miner includes transactions block matters transactions b block b spends utxo created block valid comes b validity condition present list found systems requirement proof work precise condition double sha256 hash block treated 256 bit number dynamically adjusted target time writing approximately 2187 purpose block creation computationally hard preventing sybil attackers remaking entire blockchain favor sha256 designed completely unpredictable pseudorandom function way create valid block simply trial error repeatedly incrementing nonce seeing new hash matches current target 2187 network average 269 tries valid block found general target recalibrated network 2016 blocks average new block produced node network minutes order compensate miners computational work miner block entitled include transaction giving 25 btc additionally transaction higher total denomination inputs outputs difference goes miner transaction fee incidentally mechanism btc issued genesis state contained coins order better understand purpose mining let examine happens event malicious attacker bitcoin s underlying cryptography known secure attacker target bitcoin system protected cryptography directly order transactions attacker s strategy simple 1 send 100 btc merchant exchange product preferably rapid delivery digital good 2 wait delivery product 3 produce transaction sending 100 btc 4 try convince network transaction came step 1 taken place minutes miner include transaction block block number 270000 hour blocks added chain block blocks indirectly pointing transaction confirming point merchant accept payment finalized deliver product assuming digital good delivery instant attacker creates transaction sending 100 btc attacker simply releases wild transaction processed miners attempt run apply s tx notice tx consumes utxo longer state instead attacker creates fork blockchain starting mining version block 270000 pointing block 269999 parent new transaction place old block data different requires redoing proof work furthermore attacker s new version block 270000 different hash original blocks 270001 270005 point original chain attacker s new chain completely separate rule fork longest x0cblockchain taken truth legitimate miners work 270005 chain attacker working 270000 chain order attacker blockchain longest need computational power rest network combined order catch 51% attack merkle trees left suffices present small number nodes merkle tree proof validity branch right attempt change merkle tree eventually lead inconsistency chain important scalability feature bitcoin block stored multi level data structure hash block actually hash block header roughly 200 byte piece data contains timestamp nonce previous block hash root hash data structure called merkle tree storing transactions block merkle tree type binary tree composed set nodes large number leaf nodes tree containing underlying data set intermediate nodes node hash children finally single root node formed hash children representing tree purpose merkle tree allow data block delivered piecemeal node download header block source small tree relevant source assured data correct reason works hashes propagate upward malicious user attempts swap fake transaction merkle tree change cause change node change node finally changing root tree hash block causing protocol register completely different block certainly invalid proof work merkle tree protocol arguably essential long term sustainability node bitcoin network stores processes entirety block takes 15 gb disk space bitcoin network april 2014 growing gigabyte month currently viable desktop computers phones later future businesses hobbyists able participate protocol known simplified payment verification spv allows class nodes exist called light nodes download block headers verify proof work block headers download branches associated transactions relevant allows light nodes determine strong guarantee security status bitcoin transaction current balance downloading small portion entire blockchain alternative blockchain applications idea taking underlying blockchain idea applying concepts long history 2005 nick szabo came concept secure property titles owner authority document describing new advances replicated database technology allow blockchain based system storing registry owns land creating x0celaborate framework including concepts homesteading adverse possession georgian land tax unfortunately effective replicated database system available time protocol implemented practice 2009 bitcoin s decentralized consensus developed number alternative applications rapidly began emerge namecoin created 2010 namecoin best described decentralized registration database decentralized protocols like tor bitcoin bitmessage needs way identifying accounts people interact existing solutions kind identifier available pseudorandom hash like 1lw79wp5zbqahw1jl5tcibcrhqythaguwy ideally like able account like george problem person create account named george use process register george impersonate solution file paradigm registerer succeeds second fails problem perfectly suited bitcoin consensus protocol namecoin oldest successful implementation registration system idea colored coins purpose colored coins serve protocol allow people create digital currencies important trivial case currency unit digital tokens bitcoin blockchain colored coins protocol issues new currency publicly assigning color specific bitcoin utxo protocol recursively defines color utxo color inputs transaction creating spent special rules apply case mixed color inputs allows users maintain wallets containing utxo specific color send like regular bitcoins backtracking blockchain determine color utxo receive metacoins idea metacoin protocol lives bitcoin bitcoin transactions store metacoin transactions having different state transition function apply metacoin protocol prevent invalid metacoin transactions appearing bitcoin blockchain rule added apply s tx returns error protocol defaults apply s tx s provides easy mechanism creating arbitrary cryptocurrency protocol potentially advanced features implemented inside bitcoin low development cost complexities mining networking handled bitcoin protocol metacoins implement classes financial contracts registration decentralized exchange general approaches building consensus protocol building independent network building protocol bitcoin approach reasonably successful case applications like namecoin difficult implement individual implementation needs bootstrap independent blockchain building testing necessary state transition networking code additionally predict set applications decentralized consensus technology follow power law distribution vast majority applications small warrant blockchain note exist large classes decentralized applications particularly decentralized autonomous organizations need interact bitcoin based approach hand flaw inherit simplified payment verification features bitcoin spv works bitcoin use blockchain depth proxy validity point ancestors transaction far safe legitimately state blockchain based meta protocols hand force blockchain include transactions valid context protocols fully secure spv meta protocol implementation need backward scan way beginning bitcoin blockchain determine certain transactions valid currently light implementations bitcoin based metaprotocols rely trusted server provide data arguably highly suboptimal result especially primary purposes cryptocurrency eliminate need trust scripting x0ceven extensions bitcoin protocol actually facilitate weak version concept smart contracts utxo bitcoin owned public key complicated script expressed simple stack based programming language paradigm transaction spending utxo provide data satisfies script basic public key ownership mechanism implemented script script takes elliptic curve signature input verifies transaction address owns utxo returns 1 verification successful 0 complicated scripts exist additional use cases example construct script requires signatures given private keys validate multisig setup useful corporate accounts secure savings accounts merchant escrow situations scripts pay bounties solutions computational problems construct script says like bitcoin utxo provide spv proof sent dogecoin transaction denomination essentially allowing decentralized crosscryptocurrency exchange scripting language implemented bitcoin important limitations lack turing completeness large subset computation bitcoin scripting language supports nearly support main category missing loops avoid infinite loops transaction verification theoretically surmountable obstacle script programmers loop simulated simply repeating underlying code times statement lead scripts space inefficient example implementing alternative elliptic curve signature algorithm likely require 256 repeated multiplication rounds individually included code value blindness way utxo script provide fine grained control withdrawn example powerful use case oracle contract hedging contract b $1000 worth btc 30 days script sends $1000 worth btc rest b require oracle determine value 1 btc usd massive improvement terms trust infrastructure requirement fully centralized solutions available utxo way achieve inefficient hack having utxo varying denominations eg utxo 2k k 30 having o pick utxo send b lack state utxo spent unspent opportunity multi stage contracts scripts internal state makes hard multi stage options contracts decentralized exchange offers stage cryptographic commitment protocols necessary secure computational bounties means utxo build simple contracts complex stateful contracts decentralized organizations makes meta protocols difficult implement binary state combined value blindness mean important application withdrawal limits impossible blockchain blindness utxo blind blockchain data nonce timestamp previous block hash severely limits applications gambling categories depriving scripting language potentially valuable source randomness approaches building advanced applications cryptocurrency building new blockchain scripting bitcoin building meta protocol bitcoin building new blockchain allows unlimited freedom building feature set cost development time bootstrapping effort security scripting easy implement standardize limited capabilities meta protocols easy suffer faults scalability ethereum intend build alternative framework provides larger gains ease development stronger light client properties time allowing applications share economic environment blockchain security ethereum intent ethereum create alternative protocol building decentralized applications x0cproviding different set tradeoffs believe useful large class decentralized applications particular emphasis situations rapid development time security small rarely applications ability different applications efficiently interact important ethereum building essentially ultimate abstract foundational layer blockchain built turing complete programming language allowing write smart contracts decentralized applications create arbitrary rules ownership transaction formats state transition functions bare bones version namecoin written lines code protocols like currencies reputation systems built smart contracts cryptographic boxes contain value unlock certain conditions met built platform vastly power offered bitcoin scripting added powers turingcompleteness value awareness blockchain awareness state ethereum accounts ethereum state objects called accounts account having 20 byte address state transitions direct transfers value information accounts ethereum account contains fields nonce counter sure transaction processed account s current ether balance account s contract code present account s storage default ether main internal crypto fuel ethereum pay transaction fees general types accounts externally owned accounts controlled private keys contract accounts controlled contract code externally owned account code send messages externally owned account creating signing transaction contract account time contract account receives message code activates allowing read write internal storage send messages create contracts turn note contracts ethereum seen fulfilled complied like autonomous agents live inside ethereum execution environment executing specific piece code poked message transaction having direct control ether balance key value store track persistent variables messages transactions term transaction ethereum refer signed data package stores message sent externally owned account transactions contain recipient message signature identifying sender ether transfer sender recipient optional data field startgas value representing maximum number computational steps transaction execution allowed gasprice value representing fee sender pays computational step standard fields expected cryptocurrency data field function default virtual machine opcode contract access data example use case contract functioning blockchain domain registration service wish interpret data passed containing fields field domain register second field ip address register contract read values message data appropriately place storage startgas gasprice fields crucial ethereum s anti denial service model order prevent accidental hostile infinite loops computational wastage code x0ctransaction required set limit computational steps code execution use fundamental unit computation gas usually computational step costs 1 gas operations cost higher amounts gas computationally expensive increase data stored state fee 5 gas byte transaction data intent fee system require attacker pay proportionately resource consume including computation bandwidth storage transaction leads network consuming greater resources gas fee roughly proportional increment messages contracts ability send messages contracts messages virtual objects serialized exist ethereum execution environment message contains sender message implicit recipient message ether transfer alongside message optional data field startgas value essentially message like transaction produced contract external actor message produced contract currently executing code executes opcode produces executes message like transaction message leads recipient account running code contracts relationships contracts exactly way external actors note gas allowance assigned transaction contract applies total gas consumed transaction sub executions example external actor sends transaction b 1000 gas b consumes 600 gas sending message c internal execution c consumes 300 gas returning b spend 100 gas running gas ethereum state transition function ethereum state transition function apply s tx s defined follows 1 check transaction formed ie right number values signature valid nonce matches nonce sender s account return error 2 calculate transaction fee startgas gasprice determine sending address signature subtract fee sender s account balance increment sender s nonce balance spend return error 3 initialize gas startgas certain quantity gas byte pay bytes transaction x0c4 transfer transaction value sender s account receiving account receiving account exist create receiving account contract run contract s code completion execution runs gas 5 value transfer failed sender money code execution ran gas revert state changes payment fees add fees miner s account 6 refund fees remaining gas sender send fees paid gas consumed miner example suppose contract s code self storage calldataload 0 self storage calldataload 0 calldataload 32 note reality contract code written low level evm code example written serpent high level languages clarity compiled evm code suppose contract s storage starts transaction sent 10 ether value 2000 gas 0 001 ether gasprice 64 bytes data bytes 0 31 representing number 2 bytes 32 63 representing string charlie process state transition function case follows 1 check transaction valid formed 2 check transaction sender 2000 0 001 2 ether subtract 2 ether sender s account 3 initialize gas 2000 assuming transaction 170 bytes long byte fee 5 subtract 850 1150 gas left 4 subtract 10 ether sender s account add contract s account 5 run code case simple checks contract s storage index 2 notices sets storage index 2 value charlie suppose takes 187 gas remaining gas 1150 187 963 6 add 963 0 001 0 963 ether sender s account return resulting state contract receiving end transaction total transaction fee simply equal provided gasprice multiplied length transaction bytes data sent alongside transaction irrelevant note messages work equivalently transactions terms reverts message execution runs gas message s execution executions triggered execution revert parent executions need revert means safe contract contract calls b g gas s execution guaranteed lose g gas finally note opcode create creates contract execution mechanics generally similar exception output execution determines code newly created contract code execution code ethereum contracts written low level stack based bytecode language referred ethereum virtual machine code evm code code consists series bytes byte represents operation general code execution infinite loop consists repeatedly carrying operation current program counter begins zero incrementing program counter end code reached error stop return instruction detected operations access types space store data stack container values pushed popped memory infinitely expandable byte array contract s long term storage key value store unlike stack memory reset computation ends storage persists long term code access value sender data incoming message block x0cheader data code return byte array data output formal execution model evm code surprisingly simple ethereum virtual machine running computational state defined tuple block state transaction message code memory stack pc gas block state global state containing accounts includes balances storage start round execution current instruction found taking pc th byte code 0 pc len code instruction definition terms affects tuple example add pops items stack pushes sum reduces gas 1 increments pc 1 sstore pushes items stack inserts second item contract s storage index specified item ways optimize ethereum virtual machine execution time compilation basic implementation ethereum lines code blockchain mining ethereum blockchain ways similar bitcoin blockchain differences main difference ethereum bitcoin regard blockchain architecture unlike bitcoin ethereum blocks contain copy transaction list recent state aside values block number difficulty stored block basic block validation algorithm ethereum follows 1 check previous block referenced exists valid 2 check timestamp block greater referenced previous block 15 minutes future 3 check block number difficulty transaction root uncle root gas limit lowlevel ethereum specific concepts valid 4 check proof work block valid 5 let s 0 state end previous block 6 let tx block s transaction list n transactions 0 n 1 set s 1 apply s tx applications returns error total gas consumed block point exceeds gaslimit return error 7 let s final s n adding block reward paid miner 8 check merkle tree root state s final equal final state root provided block header block valid valid approach highly inefficient glance needs store entire state block reality efficiency comparable bitcoin reason state stored tree structure block small tree needs changed general adjacent blocks vast majority tree data stored referenced twice pointers ie hashes subtrees special kind tree known patricia tree accomplish including modification merkle tree concept allows nodes inserted deleted changed efficiently additionally state information block need store entire blockchain history strategy applied bitcoin calculated provide 5 20x savings space commonly asked question contract code executed terms physical hardware simple answer process executing contract code definition state transition function block validation algorithm transaction added block b code execution spawned transaction executed nodes x0cin future download validate block b applications general types applications ethereum category financial applications providing users powerful ways managing entering contracts money includes sub currencies financial derivatives hedging contracts savings wallets wills ultimately classes scale employment contracts second category semi financial applications money involved heavy nonmonetary perfect example self enforcing bounties solutions computational problems finally applications online voting decentralized governance financial token systems blockchain token systems applications ranging sub currencies representing assets usd gold company stocks individual tokens representing smart property secure unforgeable coupons token systems ties conventional value point systems incentivization token systems surprisingly easy implement ethereum key point understand currency token system fundamentally database operation subtract x units x units b proviso x units transaction 2 transaction approved takes implement token system implement logic contract basic code implementing token system serpent looks follows def send value self storage msg sender value self storage msg sender self storage msg sender value self storage self storage value essentially literal implementation banking system state transition function described document extra lines code need added provide initial step distributing currency units place edge cases ideally function added let contracts query balance address s theoretically ethereum based token systems acting sub currencies potentially include important feature chain bitcoin based meta currencies lack ability pay transaction fees directly currency way implemented contract maintain ether balance refund ether pay fees sender refill balance collecting internal currency units takes fees reselling constant running auction users need activate accounts ether ether reusable contract refund time financial derivatives stable value currencies financial derivatives common application smart contract simplest implement code main challenge implementing financial contracts majority require reference external price ticker example desirable application smart contract hedges volatility ether cryptocurrency respect dollar requires contract know value eth usd simplest way data feed contract maintained specific party eg nasdaq designed party ability update contract needed providing interface allows contracts send message contract response provides price given critical ingredient hedging contract look follows 1 wait party input 1000 ether x0c2 wait party b input 1000 ether 3 record usd value 1000 ether calculated querying data feed contract storage $x 4 30 days allow b reactivate contract order send $x worth ether calculated querying data feed contract new price rest b contract significant potential crypto commerce main problems cited cryptocurrency fact s volatile users merchants want security convenience dealing cryptographic assets wish face prospect losing 23% value funds single day commonly proposed solution issuer backed assets idea issuer creates sub currency right issue revoke units provide unit currency provides offline unit specified underlying asset eg gold usd issuer promises provide unit underlying asset sends unit crypto asset mechanism allows non cryptographic asset uplifted cryptographic asset provided issuer trusted practice issuers trustworthy cases banking infrastructure weak hostile services exist financial derivatives provide alternative instead single issuer providing funds asset decentralized market speculators betting price cryptographic reference asset eg eth plays role unlike issuers speculators option default bargain hedging contract holds funds escrow note approach fully decentralized trusted source needed provide price ticker arguably massive improvement terms reducing infrastructure requirements unlike issuer issuing price feed requires licenses likely categorized free speech reducing potential fraud identity reputation systems earliest alternative cryptocurrency namecoin attempted use bitcoin like blockchain provide registration system users register names public database alongside data major cited use case dns system mapping domain names like bitcoin org namecoin s case bitcoin bit ip address use cases include email authentication potentially advanced reputation systems basic contract provide namecoin like registration system ethereum def register value self storage self storage value contract simple database inside ethereum network added modified removed register value registration sticks forever sophisticated registration contract function clause allowing contracts query mechanism owner ie registerer change data transfer ownership add reputation web trust functionality decentralized file storage past years emerged number popular online file storage startups prominent dropbox seeking allow users upload backup hard drive service store backup allow user access exchange monthly fee point file storage market times relatively inefficient cursory look existing solutions shows particularly uncanny valley 20 200 gb level free quotas enterprise level discounts kick monthly prices mainstream file storage costs paying cost entire hard drive single month ethereum contracts allow development decentralized file storage ecosystem individual users earn small quantities money renting hard drives x0cunused space drive costs file storage key underpinning piece device termed decentralized dropbox contract contract works follows splits desired data blocks encrypting block privacy builds merkle tree makes contract rule n blocks contract pick random index merkle tree previous block hash accessible contract code source randomness x ether entity supply transaction simplified payment verification like proof ownership block particular index tree user wants download file use micropayment channel protocol eg pay 1 szabo 32 kilobytes recover file fee efficient approach payer publish transaction end instead replacing transaction slightly lucrative nonce 32 kilobytes important feature protocol like trusting random nodes decide forget file reduce risk near zero splitting file pieces secret sharing watching contracts piece node s possession contract paying money provides cryptographic proof storing file decentralized autonomous organizations general concept decentralized autonomous organization virtual entity certain set members shareholders 67% majority right spend entity s funds modify code members collectively decide organization allocate funds methods allocating dao s funds range bounties salaries exotic mechanisms internal currency reward work essentially replicates legal trappings traditional company nonprofit cryptographic blockchain technology enforcement far talk daos capitalist model decentralized autonomous corporation dac dividend receiving shareholders tradable shares alternative described decentralized autonomous community members equal share decision making require 67% existing members agree add remove member requirement person membership need enforced collectively group general outline code dao follows simplest design simply piece selfmodifying code changes thirds members agree change code theoretically immutable easily de facto mutability having chunks code separate contracts having address contracts stored modifiable storage simple implementation dao contract transaction types distinquished data provided transaction 0 k v register proposal index change address storage index k value v 0 register vote favor proposal 2 finalize proposal votes contract clauses maintain record open storage changes list voted list members storage change gets thirds members voting finalizing transaction execute change sophisticated skeleton built voting ability features like sending transaction adding members removing members provide liquid democracy style vote delegation ie assign vote assignment transitive assigns b b assigns c c determines s vote design allow dao grow organically decentralized community allowing people eventually delegate task filtering member specialists unlike current system specialists easily pop existence time individual community members change alignments x0can alternative model decentralized corporation account zero shares thirds shares required decision complete skeleton involve asset management functionality ability offer buy sell shares ability accept offers preferably order matching mechanism inside contract delegation exist liquid democracy style generalizing concept board directors applications 1 savings wallets suppose alice wants funds safe worried lose hack private key puts ether contract bob bank follows alice withdraw maximum 1% funds day bob withdraw maximum 1% funds day alice ability transaction key shutting ability alice bob withdraw normally 1% day alice alice wants withdraw contact bob help alice s key gets hacked runs bob funds new contract loses key bob funds eventually bob turns malicious turn ability withdraw 2 crop insurance easily financial derivatives contract data feed weather instead price index farmer iowa purchases derivative pays inversely based precipitation iowa drought farmer automatically receive money rain farmer happy crops expanded natural disaster insurance generally 3 decentralized data feed financial contracts difference actually possible decentralize data feed protocol called schellingcoin schellingcoin basically works follows n parties system value given datum eg eth usd price values sorted 25th 75th percentile gets token reward incentive provide answer provide value large number players realistically agree obvious default truth creates decentralized protocol theoretically provide number values including eth usd price temperature berlin result particular hard computation 4 smart multisignature escrow bitcoin allows multisignature transaction contracts example given keys spend funds ethereum allows granularity example spend spend 10% day spend 0 5% day additionally ethereum multisig asynchronous parties register signatures blockchain different times signature automatically send transaction 5 cloud computing evm technology create verifiable computing environment allowing users ask carry computations optionally ask proofs computations certain randomly selected checkpoints correctly allows creation cloud computing market user participate desktop laptop specialized server spot checking security deposits ensure system trustworthy ie nodes profitably cheat system suitable tasks tasks require high level inter process communication example easily large cloud nodes tasks easier parallelize projects like seti home folding home genetic algorithms easily implemented platform 6 peer peer gambling number peer peer gambling protocols frank stajano richard clayton s cyberdice implemented ethereum blockchain simplest gambling protocol actually simply contract difference block hash advanced protocols built creating gambling services near zero fees x0chave ability cheat 7 prediction markets provided oracle schellingcoin prediction markets easy implement prediction markets schellingcoin prove mainstream application futarchy governance protocol decentralized organizations 8 chain decentralized marketplaces identity reputation system base miscellanea concerns modified ghost implementation greedy heaviest observed subtree ghost protocol innovation introduced yonatan sompolinsky aviv zohar december 2013 motivation ghost blockchains fast confirmation times currently suffer reduced security high stale rate blocks certain time propagate network miner mines block miner b happens block miner s block propagates b miner b s block end wasted contribute network security furthermore centralization issue miner mining pool 30% hashpower b 10% hashpower risk producing stale block 70% time 30% time produced block mining data immediately b risk producing stale block 90% time block interval short stale rate high substantially efficient simply virtue size effects combined blockchains produce blocks quickly likely lead mining pool having large percentage network hashpower de facto control mining process described sompolinsky zohar ghost solves issue network security loss including stale blocks calculation chain longest parent ancestors block stale descendants block s ancestor ethereum jargon uncles added calculation block largest total proof work backing solve second issue centralization bias protocol described sompolinsky zohar provide block rewards stales stale block receives 87 5% base reward nephew includes stale block receives remaining 12 5% transaction fees awarded uncles ethereum implements simplified version ghost goes seven levels specifically defined follows block specify parent specify 0 uncles uncle included block b following properties direct child kth generation ancestor b 2 k 7 ancestor b uncle valid block header need previously verified valid block uncle different uncles included previous blocks uncles included block non double inclusion uncle u block b miner b gets additional 3 125% added coinbase reward miner u gets 93 75% standard coinbase reward limited version ghost uncles includable 7 generations reasons unlimited ghost include complications calculation uncles given block valid second unlimited ghost compensation ethereum removes incentive miner main chain chain public attacker fees transaction published blockchain imposes network cost x0cneeding download verify need regulatory mechanism typically involving transaction fees prevent abuse default approach bitcoin purely voluntary fees relying miners act gatekeepers set dynamic minimums approach received favorably bitcoin community particularly market based allowing supply demand miners transaction senders determine price problem line reasoning transaction processing market intuitively attractive construe transaction processing service miner offering sender reality transaction miner includes need processed node network vast majority cost transaction processing borne parties miner making decision include tragedy commons problems likely occur turns flaw market based mechanism given particular inaccurate simplifying assumption magically cancels argument follows suppose 1 transaction leads k operations offering reward kr miner includes r set sender k r roughly visible miner 2 operation processing cost c node ie nodes equal efficiency 3 n mining nodes exactly equal processing power ie 1 n total 4 non mining nodes exist miner willing process transaction expected reward greater cost expected reward kr n miner 1 n chance processing block processing cost miner simply kc miners include transactions kr n kc r nc note r operation fee provided sender lower bound benefit sender derives transaction nc cost entire network processing operation miners incentive include transactions total utilitarian benefit exceeds cost important deviations assumptions reality 1 miner pay higher cost process transaction verifying nodes extra verification time delays block propagation increases chance block stale 2 exist nonmining nodes 3 mining power distribution end radically inegalitarian practice 4 speculators political enemies crazies utility function includes causing harm network exist cleverly set contracts cost lower cost paid verifying nodes 1 provides tendency miner include fewer transactions 2 increases nc effects partially cancel 3 4 major issue solve simply institute floating cap block operations blk limit factor times long term exponential moving average specifically blk oplimit floor blk parent oplimit emafactor 1 floor parent opcount blk limit factor ema factor blk limit factor ema factor constants set 65536 1 5 time likely changed analysis factor disincentivizing large block sizes bitcoin blocks large longer propagate higher probability stales ethereum highly gas consuming blocks longer propagate physically larger longer process transaction state transitions validate delay disincentive significant consideration bitcoin ethereum ghost protocol relying regulated block limits provides stable baseline computation turing completeness x0can important note ethereum virtual machine turing complete means evm code encode computation conceivably carried including infinite loops evm code allows looping ways jump instruction allows program jump previous spot code jumpi instruction conditional jumping allowing statements like x 27 x x 2 second contracts contracts potentially allowing looping recursion naturally leads problem malicious users essentially shut miners nodes forcing enter infinite loop issue arises problem computer science known halting problem way tell general case given program halt described state transition section solution works requiring transaction set maximum number computational steps allowed execution takes longer computation reverted fees paid messages work way motivation solution consider following examples attacker creates contract runs infinite loop sends transaction activating loop miner miner process transaction running infinite loop wait run gas execution runs gas stops halfway transaction valid miner claims fee attacker computational step attacker creates long infinite loop intent forcing miner computing long time time computation finishes blocks come possible miner include transaction claim fee attacker required submit value startgas limiting number computational steps execution miner know ahead time computation excessively large number steps attacker sees contract code form like send contract storage contract storage 0 sends transaction gas run step second ie making withdrawal letting balance contract author need worry protecting attacks execution stops halfway changes reverted financial contract works taking median proprietary data feeds order minimize risk attacker takes data feeds designed modifiable variable address mechanism described section daos converts run infinite loop attempting force attempts claim funds financial contract run gas financial contract set gas limit message prevent problem alternative turing completeness turing incompleteness jump jumpi exist copy contract allowed exist stack given time system fee system described uncertainties effectiveness solution necessary cost executing contract bounded size additionally turing incompleteness big limitation contract examples conceived internally far required loop loop removed making 26 repetitions line piece code given implications turing completeness limited benefit simply turing incomplete language reality turing incompleteness far neat solution problem consider following contracts c0 c1 c1 c1 c2 c2 c2 c3 c3 c49 c50 c50 c50 run step program record change storage send transaction 51 transactions contract takes 250 computational steps miners try detect logic bombs ahead time maintaining value alongside contract specifying maximum number computational steps x0ctake calculating contracts calling contracts recursively require miners forbid contracts create contracts creation execution 26 contracts easily rolled single contract problematic point address field message variable general possible tell contracts given contract ahead time surprising conclusion turing completeness surprisingly easy manage lack turingcompleteness equally surprisingly difficult manage exact controls place case let protocol turing complete currency issuance ethereum network includes built currency ether serves dual purpose providing primary liquidity layer allow efficient exchange types digital assets importantly providing mechanism paying transaction fees convenience avoid future argument current mbtc ubtc satoshi debate bitcoin denominations pre labelled 1 wei 1012 szabo 1015 finney 1018 ether taken expanded version concept dollars cents btc satoshi near future expect ether ordinary transactions finney microtransactions szabo wei technical discussions fees protocol implementation remaining denominations useful later included clients point issuance model follows ether released currency sale price 1000 2000 ether btc mechanism intended fund ethereum organization pay development success platforms mastercoin nxt earlier buyers benefit larger discounts btc received sale entirely pay salaries bounties developers invested profit non profit projects ethereum cryptocurrency ecosystem 0 099x total sold 60102216 eth allocated organization compensate early contributors pay eth denominated expenses genesis block 0 099x total sold maintained long term reserve 0 26x total sold allocated miners year forever point group launch 1 year 5 years currency units 1 198x 1 458x 2 498x purchasers 83 5% 68 6% 40 0% reserve spent pre sale 8 26% 6 79% 3 96% reserve post sale 8 26% 6 79% 3 96% miners 0% 17 8% 52 0% long term supply growth rate percent despite linear currency issuance like bitcoin time supply growth rate tends zero main choices model 1 existence size endowment pool 2 existence permanently growing linear supply opposed capped supply x0cbitcoin justification endowment pool follows endowment pool exist linear issuance reduced 0 217x provide inflation rate total quantity ether 16 5% unit 19 8% valuable equilibrium 19 8% ether purchased sale unit exactly valuable organization 1 198x btc considered split slices original btc additional 0 198x situation exactly equivalent endowment important difference organization holds purely btc incentivized support value ether unit permanent linear supply growth model reduces risk excessive wealth concentration bitcoin gives individuals living present future eras fair chance acquire currency units time retaining strong incentive obtain hold ether supply growth rate percentage tends zero time theorize coins lost time carelessness death etc coin loss modeled percentage total supply year total currency supply circulation fact eventually stabilize value equal annual issuance divided loss rate eg loss rate 1% supply reaches 26x 0 26x mined 0 26x lost year creating equilibrium note future likely ethereum switch proof stake model security reducing issuance requirement zero 0 05x year event ethereum organization loses funding reason disappears leave open social contract right create future candidate version ethereum condition quantity ether equal 60102216 1 198 0 26 n n number years genesis block creators free crowd sell assign difference pos driven supply expansion maximum allowable supply expansion pay development candidate upgrades comply social contract justifiably forked compliant versions mining centralization bitcoin mining algorithm works having miners compute sha256 slightly modified versions block header millions times eventually node comes version hash target currently 2192 mining algorithm vulnerable forms centralization mining ecosystem come dominated asics application specific integrated circuits computer chips designed thousands times efficient specific task bitcoin mining means bitcoin mining longer highly decentralized egalitarian pursuit requiring millions dollars capital effectively participate second bitcoin miners actually perform block validation locally instead rely centralized mining pool provide block headers problem arguably worse time writing mining pools indirectly control roughly 50% processing power bitcoin network mitigated fact miners switch mining pools pool coalition attempts 51% attack current intent ethereum use mining algorithm miners required fetch random data state compute randomly selected transactions n blocks blockchain return hash result important benefits ethereum contracts include kind computation ethereum asic essentially asic general computation ie better cpu second mining requires access entire blockchain forcing miners store entire blockchain capable verifying transaction removes need centralized mining pools mining pools serve legitimate role evening randomness reward distribution function served equally peer peer pools central control model untested difficulties way avoiding certain clever optimizations contract execution mining algorithm notably interesting feature algorithm allows poison introducing large number contracts blockchain specifically designed stymie certain asics economic incentives exist asic manufacturers use trick attack x0csolution developing ultimately adaptive economic human solution purely technical scalability common concern ethereum issue scalability like bitcoin ethereum suffers flaw transaction needs processed node network bitcoin size current blockchain rests 15 gb growing 1 mb hour bitcoin network process visa s 2000 transactions second grow 1 mb seconds 1 gb hour 8 tb year ethereum likely suffer similar growth pattern worsened fact applications ethereum blockchain instead currency case bitcoin ameliorated fact ethereum nodes need store state instead entire blockchain history problem large blockchain size centralization risk blockchain size increases 100 tb likely scenario small number large businesses run nodes regular users light spv nodes situation arises potential concern nodes band agree cheat profitable fashion eg change block reward btc light nodes way detecting immediately course honest node likely exist hours information fraud trickle channels like reddit point late ordinary users organize effort blacklist given blocks massive likely infeasible coordination problem similar scale pulling successful 51% attack case bitcoin currently problem exists blockchain modification suggested peter todd alleviate issue near term ethereum use additional strategies cope problem blockchain based mining algorithms miner forced node creating lower bound number nodes second importantly include intermediate state tree root blockchain processing transaction block validation centralized long honest verifying node exists centralization problem circumvented verification protocol miner publishes invalid block block badly formatted state s n incorrect s 0 known correct state s incorrect s 1 correct verifying node provide index proof invalidity consisting subset patricia tree nodes needing process apply s 1 tx s nodes able use nodes run computation s generated match s provided sophisticated attack involve malicious miners publishing incomplete blocks information exist determine blocks valid solution challenge response protocol verification nodes issue challenges form target transaction indices receiving node light node treats block untrusted node miner verifier provides subset patricia nodes proof validity conclusion ethereum protocol originally conceived upgraded version cryptocurrency providing advanced features blockchain escrow withdrawal limits financial contracts gambling markets like highly generalized programming language ethereum protocol support applications directly existence turing complete programming language means arbitrary contracts theoretically created transaction type application interesting ethereum ethereum protocol moves far currency protocols decentralized file storage decentralized computation decentralized prediction markets dozens concepts potential substantially increase efficiency computational industry x0cand provide massive boost peer peer protocols adding time economic layer finally substantial array applications money concept arbitrary state transition function implemented ethereum protocol provides platform unique potential closed ended single purpose protocol intended specific array applications data storage gambling finance ethereum open ended design believe extremely suited serving foundational layer large number financial non financial protocols years come notes reading notes 1 sophisticated reader notice fact bitcoin address hash elliptic curve public key public key fact perfectly legitimate cryptographic terminology refer pubkey hash public key bitcoin s cryptography considered custom digital signature algorithm public key consists hash ecc pubkey signature consists ecc pubkey concatenated ecc signature verification algorithm involves checking ecc pubkey signature ecc pubkey hash provided public key verifying ecc signature ecc pubkey 2 technically median 11 previous blocks 3 internally 2 charlie numbers big endian base 256 representation numbers 0 2256 1 reading 1 intrinsic value http bitcoinmagazine com 8640 exploration intrinsic value iswhy bitcoin doesnt bitcoin 2 smart property https en bitcoin wiki smart property 3 smart contracts https en bitcoin wiki contracts 4 b money http www weidai com bmoney txt 5 reusable proofs work http www finney org hal rpow 6 secure property titles owner authority http szabo best vwh net securetitle html 7 bitcoin whitepaper http bitcoin org bitcoin pdf 8 namecoin https namecoin org 9 zooko s triangle http en wikipedia org wiki zooko s triangle 10 colored coins whitepaper https docs google com buterin com document d 1ankp cvztcmlizw4dvsw6m8q2jc0lizr tluowu2z1be edit 11 mastercoin whitepaper https github com mastercoin msc spec 12 decentralized autonomous corporations bitcoin magazine http bitcoinmagazine com 7050 bootstrapping decentralized autonomous corporation 13 simplified payment verification https en bitcoin wiki scalability simplifiedpaymentverification 14 merkle trees http en wikipedia org wiki merkle tree 15 patricia trees http en wikipedia org wiki patricia tree 16 ghost http www cs huji ac il avivz pubs 13 btc scalability pdf 17 storj autonomous agents jeff garzik http garzikrants blogspot 2013 01 storj andbitcoin autonomous agents html 18 mike hearn smart property turing festival http www youtube com watch v pu4pamfpo5y 19 ethereum rlp https github com ethereum wiki wiki %5benglish%5d rlp 20 ethereum merkle patricia trees https github com ethereum wiki wiki %5benglish%5dpatricia tree 21 peter todd merkle sum trees http sourceforge net p bitcoin mailman message 31709140 x0c english japanese romanian german chinese italian spanish french xe2 x80 xab xef xbb x93 xef xba x8e xd8 xb1 xef xba xb3 xef xaf xbd xe2 x80 xacpersian xed x95 x9c xea xb8 x80 korean xc2 xa9 2015 github inc terms privacy security contact help xef x80 x8a status api training shop blog pricing x0c