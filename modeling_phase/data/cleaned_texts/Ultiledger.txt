b trustworthy peer financing ultiledger blockchain protocol ecosystem ultiledger team xe2 x88 x97 version 1 0 updated july 11 2018 info ultiledger io abstract long birth banks insurance companies types financial institutions people started exchanging trading financing activities human history financial institutions come later phase hope enhancing trust collaboration natural entities institutions proven extremely expensive maintain extend trust offered diminishing long time faith institutions dwindling like candles wind creation blockchain technologies especially popularized bitcoin offers compelling alternative centralized financial entities blockchain ledgers book kept distributed manner offer tamper proof solutions great advancement technology humanity brings trust technology ultiledger blockchain protocol ecosystem aims providing stateof art functionalities quality services peer financing markets ultiledger brings improvement existing blockchain technologies major layers consensus layer storage layer smart contract layer specifically introduces new consensus algorithm promises high tps hierarchical subchain architecture increase scalability decentralized storage system cost effective data access modern smart contract platform flexible application development combined improvements help ultiledger blockchain achieving high security high scalability tps high application flexibility 1 introduction ultiledger open financial protocol committed leveraging blockchain technologies help credit organizations including government banks corporate companies individual persons b2b e commerce platforms industrial sectors etc quickly build ultra high security levels finance distributed ledger technology dlt achieve ecological zero cost transaction settlements hierarchical setup blockchains combination main chain sub chains sub chain sets ultiledger able achieve system security privacy protection high efficiency capital accommodation specifically ultiledger focuses management authentication digital identities issuance trading digital assets integration ipfs technology ecosystem means bringing files peer financing process ipfs network blockchain xe2 x88 x97 https ultiledger io x0cultiledger finally brings blockchain technologies real world applications greatly reducing unnecessary financial trust costs intermediate links similar bitcoin technology ultiledger non intermediate value exchange protocol network unlike closed ecosystem bitcoin ultiledger protocol comes exchange functionality interconnected external financial institutions strive build safer platform open design lower costs time superior user experience ultiledger extremely responsive regulations different governments takes advantage blockchain technology enabler wide range industrial entities ultiledger aims build fast low cost efficient secure reliable blockchain economic ecosystem meets large scale daily business needs ultiledger brings improvement existing blockchain technologies major layers consensus layer storage layer smart contract layer specifically introduces new consensus algorithm promises high tps hierarchical subchain architecture increase scalability decentralized storage system cost effective data access modern smart contract platform flexible application development combined improvements help ultiledger blockchain achieving high security high scalability tps high application flexibility remainder whitepaper survey relevant research work introduce consensus reached ultiledger followed decentralized storage architecture smart contract platform list number additional technical aspects worth discussing finally conclude whitepaper 2 related work widely accepted blockchain researchers practitioners community xe2 x80 x99s huge interests ignited inception bitcoin nakamoto 2008 traditionally people payment transactions rely trust party acts intermediary verify validity transaction settle payments bitcoin capability traditional payment intermediaries centralized entity decentralized system transaction participants need rely single intermediary parties doubted exploited cheat users bitcoin xe2 x80 x99s solution trust problem multiple independent entities verify transactions altogether bookkeep single tamper proof public ledger key contribution bitcoin blockchain consensus algorithm decides agreement reached participating node nodes verifying network able append new block public ledger bitcoin adopts approach named proof work pow nodes granted rights broadcast blocks performed lot effort evaluated computing power finding nonce n hash block satisfies thresholding condition t regulated network difficulty updated 2016 blocks predefined bitcoin xe2 x80 x99s implementation rapid development wide acceptance bitcoin past years variety blockchain architectures proposed litecoin2 ethereum3 ripple4 stellar5 pow algorithms generally huge energy footprint blockchain architectures switching efficient consensus algorithms proof stake pos byzantine agreement pbft castro liskov 2002 tendermint kwon 2014 based pos membership mechanism permissioned androulaki et al 2018 architecture energy inefficiency issue pow algorithms pow criticized unfair miners modern expensive asic equipment find desired nonce faster poorer hardware setup proof stake pos supposed mitigate inequality determining change miner getting new block stake miner possesses stake miner owns higher probability new block specifically vanilla version nguyen kim 2018 pos total t staking units 2 https litecoin org https ethereum org 4 https ripple com 5 https www stellar org 3 2 x0cfrom miners miner m owns specific stake s s t probability m getting right new block pm st addition pos requires attackers 50% stakes network perform double spending attack stake network node possesses likely willing maintain smooth operation pos validation process theoretically difficult illogical perform double spending attacks pos drawbacks criticized resilient stake attacks penalties enforced validation node votes multiple competing chains fork early pos protocols suffered stake issue including peercoin king nadal mitigate challenge later protocols casper project ethereum buterin griffith 2017 introduces penalty mechanism replicated economics pow implicit penalty voting wrong chain ouroboros kiayias et al 2017 cardano6 solves issue means slot assignment checkpointing mechanism pos variant delegated proof stake dpos larimer 2014 network nodes smaller stakes team increase chance mining new block helping balancing power large stakeholders tendermint kwon 2014 important consensus algorithm sense combines different worlds e bft pos brings originally permissioned bft permissionless chain setting variety chains permissionless domain remains huge demand permissioned blockchain architecture contrary public permissionless blockchains node participate transaction validation permissioned consortium blockchain systems privilege specific nodes validating rights rest participating nodes participate transaction validation aforementioned privileged nodes reached consensus demand permissioned blockchains generally come practical considerations instance auditing important large financial institutions considered regulation compliant proven infeasible conduct auditing public nodes hop network given specific time period result important consider traditionally permissioned setups ripple prominent representatives runs permissioned blockchain ripple determines act transaction validator network time setting nodes different locations world addition auditing governance capability permissioned blockchains generally come number advantages compared permissionless ones faster energy efficient generally require resource consuming pow process permissioned easily implementable compared permissionless blockchains permissioned blockchains far real world applications supported large number traditional business entities modern ones alike consensus algorithms category permissioned consensus algorithms ripple including stellar mazieres 2015 hyperledger fabric androulaki et al 2018 stellar introduces concept quorum slices quorum set nodes act reach consensus quorum slice subset designed help node reaching consensus stellar consensus protocol scp consists nomination protocol ballot protocol scp provides decentralized control central authority asymptotic security flexible trust low latency initially nomination protocol run order propose transactional details consensus node receiving proposals vote single eventually results unanimously selected proposals slot successful execution nomination protocol nodes deploy ballot protocol federated voting happens decide commit abort proposal resulted nomination protocol ballot protocol results externalizing finalizing results current slot discarded ballots marked irrelevant scp assures avoidance management stuck states provides liveliness guarantee security node chooses inefficient quorum slice hyperledger fabric follows pbft castro liskov 2002 scheme defines different type nodes validating nodes run consensus algorithm validate transactions non validating nodes act proxy connect clients validating peers capable executing transactions verify 6 https www cardano org 3 x0c3 consensus algorithm blockchain type distributively replicated state machine resembles form data chain later data blocks refers single ancestor block identified hash blockchain grows new blocks included state machine propagated participating nodes network node network single global view transaction data multiple nodes intend append data data store consensus need decide node privilege conducting consensus protocol required coming agreement data modification handled note consensus algorithms limited applications blockchain matter fact computer algorithm relies multiple processes maintaining common state data relies solving consensus problem section detail design ultiledger consensus algorithm prepare reader relevant background discuss consensus algorithm mathematical proofs security efficiency 3 1 background decentralized data store favorable following capabilities 1 consistency read request results recent data error 2 availability read request receives non error copy data guarantee recent version 3 partition tolerance data store continues function despite arbitrary number messages dropped delayed capabilities proven impossible distributed data store simultaneously provide known cap theorem gilbert lynch 2002 theorem 1 impossible distributed data store simultaneously provide following guarantees consistency availability partition tolerance particular given fact blockchains inherently partition tolerance cap theorem implies choose consistency availability blockchain immutable chain transaction data possible node build different chain known fork solved consensus algorithm case blockchain data store reaches eventual consistency e finality order ensure high availability ultiledger mandatory blockchain consensus algorithm helps establish eventually consistent blockchain 3 2 federated byzantine agreement high demand financial institution xe2 x80 x99s compliance capabilities consensus algorithms permissioned architecture popular financial sector algorithms provide good auditing process capability ultiledger xe2 x80 x99s customers financial institutions companies individuals closely linked financial institutions chosen permissioned algorithm built federated byzantine agreement fba provides series security functionality improvements permissionless blockchain open result node join network remain anonymous possible incentive node tamper transactions include new data block highly possible blockchain end fork chain contains tampered transaction contains valid transactions ultimate goal consensus algorithm avoid forks node agrees single version actual transactions maintains global copy blockchain hand permissioned blockchain participating nodes known chosen 4 x0cconsensus required trustworthiness participating nodes questionable faulty setup unreliable communication channels federated byzantine agreement fba model consensus nodes quorum slices quorums simply fba participant knows quorum slices considers trustworthy waits vast majority quorum slices agree slot contents considering transaction settled turn quorum slices agree transaction participants consider trustworthy agree eventually network nodes accept slot contents externalized attackers roll slot contents transaction considered settled compare byzantine agreement systems nodes involve transaction decide quorum slide trust decentralized manner execution specific consensus algorithm fba node declares input broadcasts receiving input s node detects trusted quorum slices declared receipt acceptance s broadcasts acceptance status process repeated nodes accept s agree 3 3 permissioned system decentralized authority initial setup fba new nodes wishing join network decide quorum slice choose trust furthermore known verified joining network result fba membership open control decentralized nodes choose trust network wide quorums emerge decisions individual nodes lack central authority enforce node verification potentially long time new node proves trustworthy network addition large number new nodes intend join network specific time period node admission negotiations briefly overwhelm network traffic disrupt normal slot content validation order mitigate issues decentralized authority mechanism desirable proof authority poa family consensus algorithms permissioned blockchain prominence performance increases respect typical bft algorithms results lighter message exchanges note poa mentioned technical paper refers mechanism introducing trustworthiness newly joined network nodes confused proof assets application layer built ultiledger blockchain aim providing account certificates nature public blockchain systems poa algorithms rely set n trusted nodes called authorities authority identified unique id majority assumed honest n 2 1 authorities run consensus order transactions issued clients consensus poa algorithms relies slot validation rotation schema order fairly distribute responsibility block creation authorities block proposal block accept acceptance commit block proposal 0 0 1 1 2 2 3 3 figure 1 message patterns different poa algorithms currently range poa algorithms achieve decentralized authority aura clique different poa algorithms advantage slightly different message patterns shown 5 x0cin figure 1 order enable light message exchange processes ultiledger opts clique represents class poa consensus minimal messaging 3 4 gossiping federated byzantine generals n fba n nodes theoretically upper limit 2n quorums 22 quorum slices communicating slot contents node select number nodes extremely wide range quorum slices communicate communication slow leading slower network consensus turn lower tps order target higher tps e g 10k tps rely efficient network dissemination protocol named gossiping boyd et al 2006 van renesse et al 2008 specifically gossip based data dissemination protocol offers primary functions 1 membership management continuously identifying available member nodes removing inactive nodes network 2 bulk transmission existing ledger data newly connected nodes order allow maximum state machine replication 3 slot contents proposal quorum slice communication quickly reach consensus externalize proposals maximum speed cross chain ledger data mirroring data kept date main chain sub chains details follow section adoption gossip protocols offers range advantages ultiledger blockchain including 1 fault tolerance gossip protocol proven operate networks irregular connectivity work situations node shares piece information times different nodes result node temporarily accessible information propagated different node route words great number routes information propagated source destinations 2 scalability gossip protocol scalable generally takes o logn rounds reach nodes n number nodes node sends fixed number messages independent number nodes network furthermore node wait acknowledgments recovery action acknowledgment missing system easily scale millions nodes 3 convergent consistency gossip protocol achieve exponentially rapid spread information converges exponentially globally consistent state new event occurs 4 extreme decentralization gossip offers extremely decentralized form information propagation acceptable latencies 5 robustness nodes play equal role network result failed node prevent nodes sending receiving messages particularly node join leave pleases seriously disrupting system xe2 x80 x99s overall quality service network nodes leverage gossip exchange ledger channel data scalable manner gossipbased broadcasting operates nodes receiving messages nodes channel forwarding messages number randomly selected peer nodes channel number configurable constant nodes exercise pull mechanism waiting delivery message cycle repeats result channel membership ledger state information continually kept current sync dissemination new blocks leader peer channel pulls data ordering service initiates gossip dissemination peer nodes 6 x0c3 4 1 mathematical formulation gfbg node topology ultiledger network represented g v e v node set e connection information nodes simplicity denote n v m e n network nodes interconnected total m edges denote set neighbors node v n v u xe2 x88 x88 v uv xe2 x88 x88 e degree v d v n v initially validation leader node pertains piece slot content size b bits goal propagate b bits information network g gossiping process starts run multiple rounds round node v randomly selects single node u xe2 x88 x88 n v neighbors propagate message u xe2 x88 x88 v v particular ultiledger adapts general randomized gossip algorithm uniform gossip destination message propagation selected uniformly random u r according uniform distribution p x xc2 xb5 xcf x83 2 xe2 x88 x9a 1 e xe2 x88 x92 2 xcf x80 xcf x83 2 x xe2 x88 x92 xc2 xb5 2 2 xcf x83 2 generally basic operating modes available deliver information message propagation entities push pull push pull push v sends message u pull message transferred u v push pull communication v u bidirectional actual messages contain message additional meta information state description counters order support parallelization pointer jumping operation considered destination round pointer pointer current pointer points ultiledger network type nodes e leaders proxies message propagation algorithm runs follows consecutive phases 1 node performs push operation step phase end phase log 2 n nodes pertaining propagated message o log log n steps 2 node performs coin flipping procedure order decide leader 1 1 1 xe2 x88 x92 xe2 x88 x9alog n proxy corresponding probability xe2 x88 x9alog n 2 2 3 p proxy node chooses leaders conducting pointer jumping procedures c log n rounds n xe2 x88 x92 o n nodes aware leaders high probability note proxy keeps track exactly leaders reach tradeoff cost efficiency 4 round proxy node communicates randomly node list leaders connector receives message repropagates round push operation second leader p leader nodes send message channels pull operation phase c log n rounds 5 node v performs normal push pull operation median counter algorithm p ctr v b c log n rounds v aware propagated b bits information ctr v b 1 especially median counter algorithm karp et al 2000 node states b c d specifically state b subdivided substates b1 bcmax cmax o log log n cmax xe2 x88 x88 z initially propagated nodes ultiledger network state b1 state state transfer specified follows xe2 x80 xa2 node v state receives message b nodes state b switches state b1 xe2 x80 xa2 v obtains message b node state c switches state c xe2 x80 xa2 v state bi communicates nodes state bj j xe2 x89 xa5 nodes state bk k v switches state bi 1 xe2 x80 xa2 v gets b state c node switches state c xe2 x80 xa2 v c state sent b cmax times switches state d stops propagating message 7 x0c3 4 2 efficiency gfbg based mathematical formulation background gfbg propagation algorithm following theorem efficiency theorem 2 end iteration gfbg algorithm o r nodes propagated b bits original slot contents properly propagated high probability r number remaining p nodes propagated message algorithm computation complexity o log n transmits total 3 o n log 2 n b xc2 xb7 log log n bits messages prove theorem 2 remainder section reproduce lemma 3 proven avin els xc3 xa4sser 2013 n lemma 3 fourth phase number propagated nodes 7 xe2 x88 x9alog n high 2 probability let p t0 set propagated nodes end fourth phase obviously total communication cost o n xc2 xb7 b fourth phase node transmits twice n message number leaders bounded o xe2 x88 x9alog n 2 obviously long condition p xe2 x89 xa4 1 xc7 xab xc2 xb7 p xc7 xab 0 xc7 xab constant n log 2 n holds true p 1 condition holds end fourth stage nodes b1 original median counter algorithm contain state bj c nodes time step j 1 result nodes stop earlier propagating message ultiledger network p xe2 x89 xa5 logn2 n time communication cost bounded o n xc2 xb7 b bits message distributed logn2 n nodes needs o log log n additional steps disseminate message v xe2 x88 x88 v total cost bounded o b xc2 xb7 n xc2 xb7 log log n bits sum communication ultiledger p network gfbg algorithm upper 3 bounded o n log 2 n b xc2 xb7 log log n bits log n number steps phase log n size message bits polynomial relation n 3 4 3 summary gfbg ultiledger network node communicates nodes quorum slice random manner seemingly chaotic communication status nodes final quorum slice agreed gossip algorithm assumes node know nodes neighbors long sections connected network instead bipartite network algorithm guarantee states consistent disconnected nodes network cases new nodes join period time status nodes consistent nodes gossip redundant fault tolerant eventually consistent algorithm natural distributed fault tolerance ability optimize speed nodes network gossip communication ultiledger achieve lower communication overhead time higher tps 3 5 hierarchical chain architecture improvement ultiledger blockchain xe2 x80 x99s tps lies hierarchical chain architecture ultiledger consists single main chain set sub chains powered fba consensus compared existing blockchain architectures aim create single blockchain global transaction ledgers ultiledger permits set blockchains run parallel retaining interoperability hierarchy lies ultiledger main chain manages semi independent sub chains sub chain setup extend similar database sharding technologies known database scaling technique generally sub chains run independently main chain exception creation merging main chain 8 x0cafter sub chains merged final outcome sub chains committed main chain order allow man chain date similarly sub chain created relevant information mirrored main chain corresponding sub chains order sub chains state main chain order ensure data consistency data communicated different sub chains conducted posting merkle proofs evidence information successfully sent received prevhash xe2 x80 xa6 xe2 x80 xa6 timestamp prevhash transactions timestamp xe2 x80 xa6 xe2 x80 xa6 transactions prevhash transactions tx1 tx0 timestamp tx0 h0 prevhash timestamp prevhash timestamp prevhash timestamp xc3 xb8 transactions transactions transactions data 0 figure 2 generating subchain merging parent chain main chain ultiledger blockchain hosts distributed ledger synchronized network contains issued tokens held individual users generally different accounts tokens moved main chain sub chains main chain ensures global supply token kept constant fluctuate according network hierarchical blockchain structure serves great instrument separation concerns different organizations xe2 x80 x99 internal workflow public ledger data transparent subchain systems hosted individual organization xe2 x80 x99s internal network organization responsible internal operations operations invisible level blockchain shown figure 2 subchain derives parent chain carrying necessary data tokens subchain participants conduct transactions independently parent chain required workflow completed transaction final output data tokens transferred parent chain exposing transaction completed subchain 3 5 1 consensus subchain subchains great approach improving scalability blockchain architecture unleashes power parallelization order increase tps ultiledger blockchain advantage different type consensus algorithm subchain specifically nodes subchain generally fewer nodes magnitudes lower nodes subchain heterogeneous dynamic main chain based observations propose advantage raft consensus algorithm ongaro ousterhout 2014 subchains raft following characteristics fit subchains 1 strong leadership raft consensus protocol assumes stronger form leadership algorithms decision greatly simplifies management message propagation process 2 leader election mechanism raft uses randomized timers decide node leader adds little communication overhead heartbeats prerequisite majority consensus algorithms mechanism enables rapid conflict resolving 9 x0c3 membership updates fairly easy replace set nodes cluster new set provided majority nodes clusters intersect ensures seamless updates disrupting consensus algorithm execution resulting high scalability raft allows leader care communication clients application needs contacted directly system available leader elected alive strong assumption practical deployment results suggest raft result scalable consensus dynamic environments suits perfectly subchains ultiledger 3 5 2 communication chains desirable entities different chains able communicate exchange data ultiledger blockchain communication chains easy implement thanks hierarchical chain structure fact provide different approaches support interchain communication e proxying main chain creating subchain figure 3 illustrates interchain communication conducted main parent chain intermediary case communication goes main chain exchanged data recorded public blockchain desirable transparent proofs exchange required prevhash timestamp prevhash timestamp prevhash timestamp xc3 xb8 transactions prevhash xe2 x80 xa6 xe2 x80 xa6 transactions timestamp prevhash transactions transactions timestamp xe2 x80 xa6 xe2 x80 xa6 transactions prevhash transactions tx1 tx0 timestamp tx0 h0 prevhash timestamp prevhash timestamp prevhash timestamp xc3 xb8 transactions transactions transactions data 0 figure 3 communication subchains proxy main chain figure 4 illustrates interchain communication subchains intermediary instead new subchain created current subchain transactions new subchain completed final output transmitted parent chain finalizing interchain communication 4 decentralized storage blockchain pure distributed data store generally ideal storage massive data data blockchain replicated nodes obviously scalable approach industrial level applications data generated units terabytes petabytes day order ultiledger practical enterprise level applications devise decentralized storage architecture introduces different type storage nodes assisting flexible business scenarios ii connects global storage service ipfs business data storage reference relevant file hashes blockchain 10 x0cprevhash xe2 x80 xa6 xe2 x80 xa6 timestamp prevhash transactions timestamp prevhash xe2 x80 xa6 xe2 x80 xa6 transactions transactions tx1 tx0 timestamp tx0 h0 prevhash timestamp prevhash timestamp prevhash timestamp xc3 xb8 transactions transactions transactions data 0 prevhash timestamp prevhash timestamp prevhash timestamp xc3 xb8 transactions transactions transactions figure 4 communication subchains creating subchain 4 1 global storage ipfs benet 2014 dias benet 2016 promising technology stack built range tested technologies including distributed hash tables dhts git version control system bittorrent data synchronization establishes p2p swarm allows exchange files known ipfs objects totality ipfs objects forms cryptographically authenticated data structure known merkle dag shown figure 5 data structure model data structures h h h0 h1 h0 h h0 0 h0 1 h1 h h1 0 h1 1 h0 0 h d0 h0 1 h d1 h1 0 h d2 h1 1 h d3 d0 d1 d2 d3 dwd x03%orfnv figure 5 decentralized global data storage distributed storage system ipfs designed retrieving sharing ipfs objects data structure containing parts data links data ipfs object blob unstructured binary data maximum size 256 kb links essentially array link structures ipfs objects specifically link structure sub fields e link hash linked ipfs object cumulative size linked ipfs object 11 x0cincluding objects following links size sub field mainly internal optimization especially optimizing performance p2p networking external applications easily refer ipfs object accessible object xe2 x80 x99s hash encoded base58 format case ultiledger blockchain extremely beneficial delegate data storage ipfs possible large number transactions fit single block consequence decentralized storage helps improving tps ultiledger figure 6 illustrates overview blockchain storage interoperates ipfs network shown transactions ultiledger essentially merkle root larger number data references data easily accessed traversing merkle dag thanks design ultiledger bears number desirable advantages summarize 1 content deduplication data objects lead hash ipfs network longer necessary store piece information multiple times blockchain instead data object uniquely accessible hash fingerprint 2 tamper proof adoption hash fingerprinting construction merkle dag ensures data object tampered result totally different access address making data objects tamper proof 3 easy identification piece data corresponds unique hash value corresponds permanent object ipfs result long reference object maintained access object guaranteed prevhash xe2 x80 xa6 xe2 x80 xa6 timestamp prevhash transactions timestamp transactions tx0 h1 data 0 data 1 h1 timestamp xe2 x80 xa6 xe2 x80 xa6 transactions tx1 tx0 h0 prevhash h2 h3 data 2 data 3 tx0 h4 data 4 h5 h2 h6 data 6 figure 6 referencing ipfs objects blockchain transactions 4 2 security privacy data storage ipfs default global storage system important data shared limited intended recipients order achieve options private ipfs network approach data encryption approach contrary current prevailing deployment ipfs e ipfs io network possible deploy ipfs private network settings currently ipfs active development accommodating private networks private ipfs networks achieved single shared symmetric encryption passphrase encrypt transport layer maintaining network service operator conduct key rotation procedures regularly order ensure long term security especially new odes join leave network service operators updated despite feasibility private ipfs network ideal solution data security privacy setup heavily relies private network maintained result better security obligatory implement systematic data encryption approach 12 x0cobviously reason private ipfs network offer maximum security options use symmetric encryption fact management shared key severe security vulnerability order implement secure data storage public global ipfs storage ultiledger takes advantage range asymmetric encryption algorithms including public key technology multisignature harn 1994 group signature camenisch stadler 1997 illustrated figure 7 successor ring signature scheme rivest et al 2001 group manager group signature r ve ifi ot ab p ou gr th m r fi ro ci fro g e pe s s em ur h t m c m m gn ifi si fro fro ec le sp tu tu ab m gn fro e ifi r ve n le bl e bl gn ia ia rif si ve si si e gn ur veri xef xac x81er figure 7 illustration group signature algorithm specifically user sends transaction ultiledger blockchain subsequently stores data ipfs network encrypt relevant data public keys recipients procedure prevents people intended recipients accessing data normally transactions ultiledger network single signature transactions require signature owner data cases ownership piece data shared group users complicated cases transactions require signatures multiple users procedures tackled multi signature algorithms ensures required signatures collected data ready ipfs finally users concerned identify privacy e anonymity transactions opt group signature ring signature algorithms simply algorithms helps concealing true identity sender transaction means constructing artificial identity based identities group users sum ultiledger relies public global ipfs network underlying data storage platform ensure maximum data security user privacy range asymmetric encryption algorithms adopted data ipfs accessed intended parties 4 3 nodes light clients ultiledger network essential blockchain replicated nodes possible timely possible manner security transactions ensured network practically feasible enforce node advanced computation power storage capability especially today mobile devices increasingly popular computing power storage performance comparable enterprise hardware result users bring 13 x0ctheir devices mandatory ultiledger blockchain accommodate types hardware end introduce type network nodes light clients contrary network nodes replicates copy complete ledger participate transaction validation task light clients network nodes ultiledger limited capacity functionality essentially light clients capable reading accessing data ultiledger blockchain fly help set apis apis consist fundamental functionalities including querying account balances sending transactions selecting proxy nodes etc proxy nodes light clients access fairly large services exception transaction requires node immediate access complete copy ledger reliable network communication capabilities order synchronize ledger nodes 5 smart contracts bitcoin overlooked users user friendly scripting language specific turing complete programming language contains nearly 200 commands opcodes including cryptographic operations hashing data validation scripting language implemented standard specification bonneau et al 2015 xe2 x80 x99s hard understand people actually use bitcoin xe2 x80 x99s scripting language implement smart contracts order provide users better smart contract development environment ethereum wood 2014 implements turing complete smart contract programming language named solidity provides virtual machines support development smart contracts ethereum blockchain ethereum achieved great success majority smart contracts ethereum intended ico purposes services categories cryptokitties7 rare occasionally entire ethereum network congested large number users pour overall ultiledger smart contract system possesses following characteristics comparison existing smart contract systems xe2 x80 xa2 virtual machine custom opcodes xe2 x80 xa2 standard high level libraries xe2 x80 xa2 upgradability 5 1 virtual machine custom opcodes smart contracts specific type computer program main functionality automate predefined process according contract specification unlike normal computer programs run normal computing architectures smart contract run blockchain infrastructure consider nodes ultiledger blockchain single computing entity smart contracts runs exact entity ultiledger standard computer design virtual machine abstraction layer network node runs virtual machine holistic entity virtual machine executes smart contracts deployed ultiledger blockchain order ensure practicality ultiledger smart contracts propose custom set opcodes specific peer financing industry ethereum xe2 x80 x99s vritual machine evm8 offers large set opcodes generic arithmetic operations application specific operations unfortunately missing ultiledger intends fill gap instance ultiledger virtual machine supports natively transfer atomic operation 7 8 https www cryptokitties co https github com trailofbits evm opcodes 14 x0cthese opcodes customized according specific generic applications inevitably motivate developers development intelligent applications efficient manner furthermore low level function operations highly optimized execution speed guaranteed 5 2 standard libraries contrary low level apis executed virtual machine developers advantage high level turing complete language implement smart contracts developer implementation contracts written high level programing language compiled virtual machine understandable executed ultiledger blockchain order empower developers productivity ultiledger provides set high level apis opcode set comparable paradigm shift generic computer programing languages instance c programming language specification defines reserved keywords data types arithmetic operands lexical elements grammar standard library including mathematics math h signal handling signal h input output stdio h generic utilities stdlib h lack standard libraries hand lead issues vulnerabilities instance notorious example parity xe2 x80 x99s multisig library9 party library accessing wallets great number smart contracts rely proper functioning unfortunately library severe security vulnerability led loss half million eth providing standard library ultiledger ensures library developer friendly risk minimal terms security furthermore standard library definitely motivate developers implementing applications based smart contracts help promoting ultiledger ecosystem 5 3 upgradability tamper proof immutable nature blockchains existing smart contract systems generally support upgrading smart contract deployed contract significant security vulnerabilities situation caused great inconvenience developers contract update involves series data migration processes number smart contract users increases difficulty cost contract renewal increases accordingly solve type problem ultiledger support update fork function smart contracts specifically ultiledger allows user store smart contract ipfs stores address public account points contract ipfs contract update needs provide address new version contract user chooses old version contract non security updates ultiledger supports possibility smart contract updated deleted process updating smart contract simple owner contract needs change version number smart contract upload contract ipfs register update public ledger ultiledger system automatically monitors compatibility new old versions contract migrates user data figure 8 illustrates example smart contract upgraded twice initial version 0 upgraded version 1 amended version 2 upgrade version 0 version 1 developer simply updates module unchanged parts remain intact referenced corresponding objects upgrading version 1 version 2 extra module incorporated original references remain intact new reference added smart contract dag 9 https etherscan io address 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4 15 x0cw v0 v1 h0 h1 data 0 data 1 h0 v2 h2 h0 data 2 h2 h3 data 3 figure 8 smart contract upgrading time 6 application layer order promote ultiledger ecosystem incorporate number services application layer 1 data storage abstraction layer provides users single standardized interface storing accessing private data 2 authentication services services provide convenient registration authentication services modules ecosystem 3 api set application level interfaces provides developers common development foundation facilitate construction party services built underlying foundation ultiledger blockchain offer application level services e blockchain service end users provide best user experience blockchain domain 6 1 data storage abstraction data storage focus users enterprises alike thanks seamless integration ultiledger ecosystem able provide users data storage service blockchain infrastructure users able store access private data easily securely furthermore order boost ultiledger ecosystem users opt storage node ultiledger network user xe2 x80 x99s node helps load balancing underlying infrastructure exchange tokens thanks user friendly abstraction interfaces ultiledger serve decentralized service ecosystem 6 2 authentication service important characteristic ultiledger ecosystem compliance regulatory requirements consequence able authenticate users based digital signatures public key technologies authentication service key enable root trust setup blockchain node especially hierarchical chain architecture internal transactions visible chains result fundamentally important ensure node enrollment registration process rigid authentication addition node operations node maintenance management require proper authentication authorization 16 x0cin short authentication service ultiledger secure necessity ecosystem beneficial provide authentication service end users 6 3 api sdk straightforward developers important organic technical systems serve collaborators special type end users good applications built ultiledger likely attract users ecosystem important build coherent technical community providing developer friendly api sdk ultiledger xe2 x80 x99s sdk fully open sourced developers encouraged contribute improve development experience sharing code examples tutorials contribute development documentation submit pull requests developers high contribution activities rewarded ultiledger tokens opportunity join team work time 7 conclusion technical whitepaper described architecture ultiledger blockchain aims build fast low cost efficient secure reliable blockchain economic ecosystem meets large scale daily business needs blockchain system brings innovation improvements major layers consensus layer storage layer smart contract layer combined layers work complementary manner ultiledger achieve high security high scalability tps high application flexibility references androulaki e barger bortnikov v cachin c christidis k de caro enyeart d ferris c laventman g manevich y et al 2018 hyperledger fabric distributed operating system permissioned blockchains proceedings thirteenth eurosys conference page 30 acm avin c els xc3 xa4sser r 2013 faster rumor spreading breaking logn barrier international symposium distributed computing pages 209 xe2 x80 x93223 springer benet j 2014 ipfs content addressed versioned p2p file system arxiv preprint arxiv 1407 3561 bonneau j miller clark j narayanan kroll j felten e w 2015 sok research perspectives challenges bitcoin cryptocurrencies security privacy sp 2015 ieee symposium pages 104 xe2 x80 x93121 ieee boyd s ghosh prabhakar b shah d 2006 randomized gossip algorithms ieee transactions information theory 52 6 2508 xe2 x80 x932530 buterin v griffith v 2017 arxiv 1710 09437 casper friendly finality gadget arxiv preprint camenisch j stadler m 1997 efficient group signature schemes large groups annual international cryptology conference pages 410 xe2 x80 x93424 springer castro m liskov b 2002 practical byzantine fault tolerance proactive recovery acm transactions computer systems tocs 20 4 398 xe2 x80 x93461 dias d benet j 2016 distributed web applications ipfs tutorial international conference web engineering pages 616 xe2 x80 x93619 springer gilbert s lynch n 2002 brewer xe2 x80 x99s conjecture feasibility consistent available partition tolerant web services acm sigact news 33 2 51 xe2 x80 x9359 harn l 1994 group oriented t n threshold digital signature scheme digital multisignature iee proceedings computers digital techniques 141 5 307 xe2 x80 x93313 17 x0ckarp r schindelhauer c shenker s vocking b 2000 randomized rumor spreading foundations computer science 2000 proceedings 41st annual symposium pages 565 xe2 x80 x93574 ieee kiayias russell david b oliynykov r 2017 ouroboros provably secure proofof stake blockchain protocol annual international cryptology conference pages 357 xe2 x80 x93388 springer king s nadal s ppcoin peer peer crypto currency proof stake kwon j 2014 tendermint consensus mining retrieved 18 2017 larimer d 2014 delegated proof stake dpos bitshare whitepaper mazieres d 2015 stellar consensus protocol federated model internet level consensus stellar development foundation nakamoto s 2008 bitcoin peer peer electronic cash system nguyen g t kim k 2018 survey consensus algorithms blockchain journal information processing systems 14 1 ongaro d ousterhout j k 2014 search understandable consensus algorithm usenix annual technical conference pages 305 xe2 x80 x93319 rivest r l shamir tauman y 2001 leak secret international conference theory application cryptology information security pages 552 xe2 x80 x93565 springer van renesse r dumitriu d gough v thomas c 2008 efficient reconciliation flow control anti entropy protocols proceedings 2nd workshop large scale distributed systems middleware page 6 acm wood g 2014 ethereum secure decentralised generalised transaction ledger ethereum project yellow paper 151 1 xe2 x80 x9332 updated daoyuan li july 11 2018 18 x0c