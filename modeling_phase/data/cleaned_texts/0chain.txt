b 0chain decentralizing storage1 saswata basu tom austin siva dirisala 0chain team aug 4 2019 abstract relevant data trends data expected grow 33 zb zettabytes today 175 zb 5 years2 cloud moving edge performance availability driven iot applications multi player gaming autonomous vehicles content streaming decentralization accelerate change adoption lowers deployment management scale cost end 0chain decentralizing storage 0chain dstorage cheaper higher performance traditional cloud protocols provide layer privacy security transparency service assurance consumers benefits privacy anonymity transparency developers better customer data protection lower cost enterprises scale data protection lower cost msps dstorage provides higher revenue potential dstorage platform built 0chainnet permission fast finality scalable blockchain built scratch golang 0chainnet protects network sybil nonlinear proof stake protocol prevents blockchain stalls ddos attacks multiple leaders client protection accomplished serverless 2fa protocol individuals cryptographic multiple signature protocol exchanges businesses 0chainnet offers innovative token economics enables users developers xe2 x80 x9cfree xe2 x80 x9d services transactions storage users lock zcn tokens3 like bank cd interest tokens immediately storage providers xe2 x80 x9cblobbers xe2 x80 x9d need stake zcn tokens receive expected payment applications use network zcn grow intrinsic value relative data stored network tokens locked interest users interactively lock stake tokens participate ecosystem sense zcn crypto asset tied data interest unlike bitcoin ethereum projects 0chain inflation primarily driven token holders desire mint xe2 x80 x9cinterest xe2 x80 x9d tokens given token holders locking staking tokens xe2 x80 x9creward xe2 x80 x9d tokens given miners 0chain recently tooled token economics provide going rewards support community developers ambassadors addition 0chain allocated portion team tokens fund reward tokens 4 years mainnet maintain low inflation 4 years rewards generated network interest set 5% maintain average target inflation rate 3 4% provides benefits entire ecosystem miners developers ambassadors token holders low inflation rate 1 dstorage platform motivation design platform offer cheaper faster secure available storage traditional cloud let xe2 x80 x99s discuss inherent challenges offering service decentralized environment protect data loss b ensure decentralized parties overall service effected single stored file object c certain decentralized parties storing data getting rewarded d avoid currency fluctuation managed storage provider msp customers e dapps preserve data consistency multiple parties execute smart contracts challenges inherent relatively new decentralized systems explore challenges approach 0chain dstorage taken discussed ethresearch forum4 1 patents pending 2 idc projection data 3 0chain tokens tokens white paper refer utility entity compute storage resources https ethresear ch t dstorage better traditional cloud 5907 3 4 1 x0c1 1 data availability traditional storages offer types solutions replication data stored multiple times multiple locations disk location fateful incident data recoverable exists today enterprises storage separate locations addition local copy premises option store data erasure coding technology erasure coding best understood set equations required solve set variables 4 variables needs 4 equations solve produces inconsistent result redundant example encoding 10 15 erasure coding 10 original data blocks expansion 15 blocks gives safety loss 5 15 blocks original 10 blocks recovered 0chain storage uses erasure coding technology shown fig 1 ensure data available benefits cost savings 50% availability cost 1 5 times original data instead 3 copies availability gained 14 nines compared 4 nines 3 copy replication section 6 improves cost dynamics enterprises smes fig 1 0chain storage protocol file split parts sent different storage providers blobbers 1 2 data performance reliability 10 15 erasure coding helps data performance reliability 1 2 3 5 blobbers original data restored remaining 10 independent blobbers failure hardware network natural disaster probability mutually exclusive resulting high reliability data uploaded downloaded parallel 15 blobbers results tremendous network time savings example 10 mb file expands 15 mb erasure coding blobber uploaded 1 mb encoded file effect upload time client uploading 1 mb file course assumption client network bandwidth upload 15 mb simultaneously 15 different service providers point upload time dependent bandwidth client bandwidth single server traditional storage platform downloading data multiple servers 0chain storage client tries download 15 blobbers needs wait 10 reconstruct data results fast smooth download experience 1 3 data protection data protection issue traditional storage providers different context byzantine conditions bit rotting issues related hardware traditional storage systems means self validating recovering decentralized system way enforce operational practices quality service provider policy assurance needs protocol like proof stake based consensus algorithms offer rewards slashing stake service providers rewarded punished passing failing challenge ensures provider required 0chain uses smart contract driven challenges blobbers challenge completely random deterministic given block ensure consensus blobber specific file fragment file picked challenge random manner randomized systems statistical outcomes tuned achieve desired level quality service 2 x0censuring high quality requires frequent challenges challenge protocol light possible terms bandwidth requirements time important able validate possible file stored 64kb blocks file size 10mb challenging entire file content stored blobber 1mb erasure coding waste lot network bandwidth challenging random blocks reduces 64kb overhead potential blobber download content reconstruct serve 64kb supposed stored note 0chain storage offers private public content private content read owner user authorized owner blobber able download private content pass challenge following attack scenario defense valid public content challenge behaves exactly scenarios 1 4 outsourcing attack protocol5 avoids outsourcing attack ensuring content provided verification 64kb content required create verified content file fragment follows file fragment 1mb stored blobber divided 64kb blocks 64kb blocks divided 64 byte chunks discussion final chunk size fine tuned dynamic 1024 chunks 64kb block addressed index 1 1024 imagine data indexes blocks treated continuous message hashed 1024 hashes serve leaf hashes merkle tree root merkle tree roll file hashes directory volume level merkle proof provides path leaf file root file root volume level model order pass challenge file given index 1 1024 dishonest blobber needs download content chaining construct leaf hash discourages avoid storing content engage outsourcing attack 1 5 validators addition blobbers dstorage relies special role called validators role validate verification signatures blobbers collect signatures establish validity blockchain fact multiple validators beneficial following reasons 1 2 3 scales storage growth number blobbers network individual validators blobbers punished increases reliability network case validator downtime 1 6 parallel async blockchain transactions reads writes registered blockchain following reasons 1 2 payments blobbers happening blockchain storage smart contract completely decentralized audit trail read write storage audit trail useful creating security driven applications monetization applications needs indisputable proof actions performed users content owners need paid need record read write blockchain indicate bottleneck compared traditional storage model 0chain protocol designed specifically reduce bottleneck making blockchain transactions asynchronous actual read write operations making use read write markers cryptographically verifiable users present markers service providers started right away service providers redeem markers rewards offline blockchain trusted long markers valid service providers guaranteed paid 1 7 preserve data consistency validators oracles ledger constructs decentralized app dapp needs provide auditable transaction history provide data consistency multiple parties order execute data smart contract detailed hyperledger forum6 proxy reencryption7 proxy encryption technique party encrypt save content 3rd party later share encrypted content securely providing proxy encryption keys keys tied public private keys storage 0chain network blockchain observable storage system boss p merrill t austin https drive google com file d 1tnjb ovx93s47qq2gfrfeubdmp0pcl9k view 5 6 7 https lists hyperledger org g fabric topic hyperledger way 32685809 p 20 0 0 0 recentpostdate%2fsticky 20 2 0 32685809 sharing encrypted files blockchain simpler s selvi paul s dirisala s basu c rangan https eprint iacr org 2019 418 3 x0creceiving party encryption process performed 3rd party storing content serving content receiver dstorage usage app leveraging decentralized storage diagram fig 2 provides overview app integrate dstorage leverage decentralized storage hyperledger applicable oracles work smart contracts blockchains ethereum eos ledgers corda ripple steller iota use case enterprise app collaborating multiple parties hyperledger wants share documents submitting hyperledger transaction hyperledger suitable storing large amounts data like documents document uploaded dstorage hash content submitted hyperledger transaction pre keys endorser needs verify content endorsers download content dstorage confirm hash content matches provided transaction ensures parties trust received document pertaining transaction fig 2 chain storage documents ethereum hyperledger based enterprise transactions 1 8 msp payments usd offering decentralized storage enterprises prefer pay services fiat currency similarly service providers want receive payments fiat currency keeping rest native token value blockchain smart contracts blockchain track rewards native token standard provision allow rewards tracked mix tokens fiat currency 0chain offers mechanism accumulating rewards dual units achieved tracking exchange rate native token fiat currency usd regular basis exchange rate tracked smart contract allows changing rate type governance example multi signature voting system ensuring exchange rate publicly verifiable trusted exchange rate available smart contracts computing rewards native token smart contract split rewards native token rest tracked fiat currency currently tracked exchange rate blockchain native tokens directly transferred service providers wallet blockchain fiat currency balances tracked separately smart contract method actual payment fiat currency happen periodically month chain payment happens corresponding fiat balance needs adjusted blockchain transaction adjustment provide chain payment proof transaction payload form digital image bank check url provides payment information 3rd party bank payment gateway stable coin interactions similar construct replacement fiat currency msp payment model depicted fig 3 4 x0cfig 3 msp payments usd 2 overview 0chain blockchain8 order bring fast scalable secure dstorage platform needed fast secure scalable blockchain 0chain xe2 x80 x99s blockchain architecture described fig 4 parallel processes separation roles order achieve high speed scalability end separated role miner miner sharder blobber validator scale independently transactions submitted miners validate generate blocks send notarized blocks sharders store block respond queries way miner getting bombarded submissions queries achieve faster response time blobbers store data validators challenge blobbers clients interact directly blobbers upload download data validators interact blobbers validate challenge response blobbers submit successful challenge response blockchain tokens chain processes transactions storage blockchain platform scalable fast fig 4 0chain consensus protocol 8 0chain consensus protocol j katz t austin s dirisala s basu https drive google com file d 1kcfkq1hmtgxvxzztalnkvhmmicwoia7k view 5 x0cmultiple leaders decentralized systems need fault byzantine tolerant proof stake pos systems protocols choose consensus electing leader change leader regularly leader making progress problem single leader based system prone external attacks ddos protocols typically suitable private permission networks public blockchain desirable protocol effectively defend byzantine conditions external factors like network outages ddos attacks protocols dfinity propose having multiple leaders blockchain progress faulty 0chain adopts similar approach miner generate block given round network collectively works notarizing highest ranked block given round goal eventually notarize progress blocks got generated round pass verification process transaction signature validation replay transactions order achieve consensus leader mitigate risk network attacks consensus achieved sending verification messages miner network use logic dfinity block weight 1 2 r r rank generator starting 0 block weights 1 0 5 0 25 verifiers preference highest weighted block terms view change differ dfinity require individual node group enter blockchain xe2 x80 x9cepoch xe2 x80 x9d view change allow join upcoming view change single group sybil protection 0chain uses non linear proof stake nl pos staking approach note mainnet launched squared power stake idea lot tokens prefer pool better chance participating splitting parts joining network separately 2 1 deterministic finality protocol doesn xe2 x80 x99t require explicit endorsement block reach consensus rely factors pow possible disclose blocks later alter course pos protocols require direct interaction reach consensus variation pbft practical byzantine fault tolerance immediate direct interaction ensures consensus discovered quickly possible release blocks later time makes protocols deterministic compared possible bitcoin example multiple blocks proposed given round possible able determine block finalized network conditions protocols hashgraph different approach rely fact current proposals consistently endorsing past transactions majority miners endorse directly indirectly given transaction gets finalized transactions finalized individually concept applied block level miners extend directly indirectly given block possible agree notarized blocks round finalized deterministically 0chain executes finalization based locally available information keeps track deterministic finality hashgraph like logic applied block level experiments seen rollbacks finality computed based local information running blockchain hundreds thousands blocks clients interacting 0chain choices deciding consider transaction finalized choose wait certain number blocks choose query confirmation multiple nodes combination 0chain blocks interest 1 2 3 block added current round block probabilistically finalized variant dfinity algorithm block deterministically finalized logic explained noted deterministic finalized block lags probabilistic finalized block lags current round block miners generate possible deterministic finality fast probabilistic finality miner receives block round valid generator round added local cache blocks time chain block walked till previously identified latest deterministic finalized block block added unique extensions map block miner current block hasn xe2 x80 x99t extended block intermediate current block sufficient progress chain point block probabilistically finalized receive number unique extensions indicating sufficient number miners working block point block deterministically finalized threshold deterministic finality threshold notarization block example 3 f 1 miners f number byzantine miners 2 3rd unique block extensions block considered finalized deterministically 6 x0cthe diagram fig 5 indicates explained process letters block indicate miner generated block letters green boxes represent unique chain extension endorsements blocks shown additional block proposals c b received particular round let xe2 x80 x99s assume receiving 5 unique extensions considered threshold soon block received current round block d finalized deterministically gives extra unique endorsement similarly block b received current round block e deterministically finalized deterministic finality moves c e having generators help accelerate deterministic finality albeit increase network traffic fig 5 deterministic finality 2 2 sharder workload optimization mentioned earlier miner sharder architecture recognize mining process cpu intensive responding queries finalized transactions storage network intensive workload sharding blocks optimized sharders consistent hashing like algorithm splitting blocks sharders 0chain blockchains configured choose number replicators block sharders store block set sharders replicating given block completely deterministic hash block blocks sharded mapping information transaction block stored sharders way client initiate query sharder best case scenario sharder block information respond entire transaction information worst case scenario able tell block transaction belongs client query details right sharder 2 3 governance9 blockchain decentralized core operations validating transactions producing blocks automated achieved consensus blockchains little overarching governance helps unforeseen issues malicious attacks faulty code requiring major changes 0chain taken decentralized stake based governance approach changes required blockchain approved vetoed staked voting mechanism smart contract blockchain addition avoid minute manipulation 0chain uses novel multi round exponentially increased limit mechanism complete voting process making robust fair transparent possible learn check 2 4 fast sync merkle patricia trie 10 0chain fast finality state rapidly changing critical able sync state fast operational partial state contribute overall consensus ping pong governance token locking enabling blockchain self governance p merrill t austin j rietz j pearce https drive google com file d 1ziadhre6kbyx hjxmcznubm c 84pgm view 10 posted ethresearch https ethresear ch t fast state management merkle patricia trie 5909 9 7 x0cstate management integral fast finality claim execution time smart contract production block involves executing smart contract logic associated transactions block result mutating underlying dlt state securely verifiable comparing blockchains finality claims xe2 x80 x99s important picture mind isolation able fast byzantine consensus sync expensive today blockchains mpt new node comes online participate blockchain process generating validating block needs sync entire mpt mpt large data structure depending number keys present running millions blockchain popular ethereum easily billions time makes time consuming sync entire tree key observations transactions blockchains like things 80 20 rule 80% blockchain 20% users smart contracts good chance numbers skewed doesn xe2 x80 x99t sense wait loading entire state represented mpt synching data related long growing tail users smart contracts hardly transact process impact quality service rest users ideally xe2 x80 x99s possible progress partial state helps nodes start earning rewards soon possible possible support given mpt updates expected securely verifiable block produced blockchain answer surprisingly turns yes mathematical properties mpt provides solution proof correctness fast sync mpt fs mpt let xe2 x80 x99s define terminology application mpt api store value given key represented k v storing values represented k v upper case defines set lower case represents single element order provide security proof mpt store intermediate nodes addition v collectively represented n application keys k end representing paths mpt access values hashes nodes h keys nodes mpt mapping k v h n h n pairs persisted key value store rocksdb 0chain note pair h n self validating h hash n given blockchain round x mpt represented hx nx subsequently mpt got modified blockchain progressed given block let xe2 x80 x99s state got updated inserted deleted small set keys values kb vb new mpt applying changes kb vb contains subset hx nx intact new set hashes nodes dhb dnb representing new state hxb nxb key observation order compute verify new state partial state hxp nxp subset hx nx sufficient long possible compute dhb dnb partial state new state computed partial state root hash agreement computed entire state important coupled commutative property possible operating partial states simultaneously synching missing state hm nm block block ad hoc applying storing new hash node pairs existing state order delta changes applied doesn xe2 x80 x99t matter 0chain blockchain uses concept support ability progress blockchain generate block validate block respond client queries balances state related queries good able progress eventually entire state needs synched happen parallel state sync happens separate partial sync strategies mentioned 1 block level partial state sync applying transactions block initial state mentioned results dhb dnb delta state changes delta change includes root key node root state mpt block hash possible verify given delta state matches given block result node making progress blockchain temporarily unable validate state block request block specific partial state validate partial state correct start helps temporary downtime short network outage allows updating partial state state having replay transactions intermediate blocks compute state makes temporary state sync process fast 2 missing state sync mentioned mpt versioned data structure default accumulates lot h n tuples need pruned contain size state db 0chain state pruning logic similar garbage collection mark sweep logic process possible identify set missing state hm nm missing state detected xe2 x80 x9cmarking xe2 x80 x9d process sync state randomly asking peers nm related set hashes hm abandon xe2 x80 x9csweeping xe2 x80 x9d continue times discovering missing nodes lead discovering additional missing nodes children original missing nodes eventually entire state 8 x0cis synced older state longer required pruned note xe2 x80 x9cmarking xe2 x80 x9d process traverses tree xe2 x80 x9csweeping xe2 x80 x9d process traverses underlying database result xe2 x80 x9cmarking xe2 x80 x9d process expensive 0chain configuration specify frequency process runs state missing configuration ignored ensure state synched fast possible waiting pruning cycle likely xe2 x80 x9cmarking xe2 x80 x9d process optimized storing nodes level separate database column family reduce random o explored future mpt smart contract maintain state root hashes stored values global state maintains state client wallets smart contracts similar ethereum manages xe2 x80 x99s state mpt independently synched possible prioritize synching smart contract states based popularity example fs mpt approach state pruning synching provides 0chain robust state management ability sync partial state changes block block provides benefit synching state faster frequent users smart contracts ready support subsequent transactions eventually syncing entire state discovering missing state background improves stability quality service blockchain 2 5 efficient dkg blockchain 0chain blockchain relies publicly verifiable random value calculated round block generation achieved dkg distributed key generation provides ability recover group signature t n threshold signature scheme order defend byzantine faults threshold number signatures required reconstruct group signature verify agree group signature seed create random number round signature given round based random number previous round implementation use herumi xe2 x80 x99s library dkg based bn curves literature versions dkg version 0chain uses called joint feldman pedersen protocol starts n parties eventually ends q parties referred xe2 x80 x9cqualified xe2 x80 x9d parties qualification happens nature distributed key generation result byzantine condition protocol suggests complaints revealing individual secret shares narrow qualified set parties verified shared secrets correctly protocol requires broadcasting messages entire network messages order o n messages sent individual parties resulting order o n 2 secret shares o n 2 complaints revealing happens result lot messages forth timing messages reliability coordinating parties 0chain uses novel approach blockchain solve problem publicly available information submitted transactions blockchain n parties need initially submit transaction blockchain public information protocol parties privately send party specific information order o n 2 complaint revealing instead party distributing secret shares collect digital signature acknowledgement received verified secret share public information available blockchain end distributing secrets parties party ends digital signature verifying valid distribution b digital signature receiving party didn xe2 x80 x99t provide byzantine responsive temporary network failure trying distribute shares eventually party public transaction blockchain array digital signatures confirming receiving valid secret shares b secret share value corresponding party didn xe2 x80 x99t provide receive secret share onus party submit information blockchain party automatically disqualified party incentive submit transaction party able gather t confirmation signatures automatically gets disqualified didn xe2 x80 x99t receive fewer threshold confirmations corresponding secret shares revealed xe2 x80 x99t reconstruct secret information party threshold number secret shares required reconstruct private information revealed secret share values honest parties genuinely didn xe2 x80 x99t receive secret shares given incorrect values publicly available blockchain verifiable logic qual set deterministically computed party publicly verifiable information available blockchain eliminates complexities identifying qualified set original dkg protocol suggests exchanging complaints revealing reconstruction messages large time consuming contrast blockchain requires o n messages available blockchain onus disclosing party want 2 6 efficient secure light client validation decentralized blockchain set active miners sharders constantly changing client blockchain needs interact centralized server submit query transactions effectively making solution centralized need cope dynamic decentralized system 0chain provides mechanism discover active miners 9 x0cusing concept similar domain lookup service dns change active set referred xe2 x80 x9cview change xe2 x80 x9d view change miners sharders broadcast information set external servers single entity controls view change recorded blockchain external servers query verify authenticity changes clients query latest active miners sharders static frequently changing set decentralized servers problem clients dealing decentralized blockchain confirming transaction transaction finalized sharder respond knowingly unknowingly respond transaction confirmed actually finalization lags rare cases individual sharders falsely finalize local view secure proof presented transaction confirmed finalized block roll deal complexities simple approach shown fig 6 query sufficient number sharders transaction confirmation wastes lot resources client sharders alternatively client try query single sharder long possible fall multiple sharders necessary example transaction expired confirmation received client fall asking multiple sharders extra confirmation similarly establishing confirmation sharder client establish validity subsequent block chain querying different sharder block necessary walking chain establish trust ensures hand client getting extra validation confirmation blockchain built corresponding block different sharders block combination traversing chain confirmation different sharder increases trust outcome fig 6 efficient light client validation 2 7 client security11 0chain worked security researchers came novel solution based security protocol survived decade research analyze vulnerabilities protocols protocol called bls provides ability split key store separately reconstruct signature partial signatures details found splitting aggregating signatures cryptocurrency protocols s selvi paul c rangan s dirisala s basu https drive google com file d 1urvaae0w1dto9n2jiknk4lcqzgeye8pl view 11 10 x0cpreviously written technical article solution completely based software need purchasing expensive hardware users use existing mobile phones computers 0chain enhances overall security types wallets stake pooling mechanisms additional protocol layers mentioned bls signature scheme details described end user wallets 0chain providing beautifully designed native mobile apps wallet transactions store value wallet app allow user setup keys splitting use key splitting users need download desktop app act second device intuitive ui guide user setup split key devices setup subsequent transaction submission require devices construct signature making secure split key possible recover primary key need arise like traditional keys addition possible split keys number times implement advanced security options key rotation set keys periodically discarded advanced features optional casual users don xe2 x80 x99t worry features initially familiar blockchain secure wallet token store value increases assured advanced options possible signature scheme 0chain service provider operation wallets service providers 0chain blockchain miners sharders validators need digitally sign messages rest blockchain network assured message coming supposed tampered signature scheme end user wallets split key functionality additional security service providers following reasons user interaction supporting operations blockchain fast finality number messages exchanged second large impractical add extra steps delay signing process result operational constraints 0chain decided provide additional security service providers different manner separating keys staking reward keys sign going messages supporting blockchain operations mechanism tokens controlled regular wallet use split key scheme assuring stake compromised technique allow ability rotate operational keys common traditional systems having advanced security delegation pool separation wallets generalized support concept delegation allows normal users earn rewards staking tokens actually owning blockchain operations service provider service provider starts delegation pool registering operational wallet staking tokens regular wallet delegating operations operational wallet similarly regular user choose invest delegation pool increase overall stake service provider enhances chance service provider getting picked delegation pools implemented smart contract owner delegation pool withdraw tokens deposited avoid paying rewards rewards automatically distributed participants smart contract reward distribution proportional stake participant multi sig wallet reason split key parts extended split n parts use threshold cryptography t n signatures required existing multi sig schemes rely signing unrelated keys establish multi sig possible 0chain xe2 x80 x99s signature scheme allows creating aggregate signature recover signature regular client blockchain ensures balance transfers securely use verifiable signature client multi sig directly signed client type multi sig validation suitable server wallets digital exchanges transfer transactions driven automation 3 developer rewards order incentivize adoption dstorage team setting aside tokens incentivize developers build apps interfaces use 0chain dstorage addition tokens generated network pool developers continue improvement developers disrupt existing saas consumer applications dstorage better performance security lower cost ongoing hackathon12 useful projects solves real world problems prizes ranging 10 000 40 000 tokens prizes 100 000 tokens overall winner https 0chain net page hackathon html details 12 https 0chain net page hackathon html 11 x0chere following examples useful project categories 1 interface dstorage different blockchains hyperledger ethereum 2 sdk versions different languages different platforms 3 interfaces multi party solutions smart contracts use outside data oracles need prove document shared validators involved tampered way 4 storage apps build new dapps dstorage different applications wetransfer pixieset docusign etc 5 social apps build new dapps use dstorage compete privacy youtube snapchat instagram whatsapp netflix spotify 6 enterprise apps build new dapps use dstorage healthcare real estate banking government e commerce store sensitive customer data use multi party transactions 7 secondary backup interfaces plug ins dstorage veem commvault rubrik cohesity nutanix relevant links development github https github com 0chain gosdk zwallet https github com 0chain zwalletcli zbox https github com 0chain zboxcli community developed js sdk https johansten keybase pub b web test zwallet zbox http zcn sculptex co uk zbox php action info 4 ambassador rewards 0chain ambassador program exists create official role technical business evangelists expertise 0chain protocols related products dstorage 0box 0wallet interested helping new community members involved project develop businesses 0chain protocols pool tokens set aside team discussed token economics section future generated network fund technical business evangelists perpetually interested connecting ambassador region find ambassador program reach director ecosystem derick fiebiger operations 0chain net use cases need promoted hackathon events outlined developer rewards section idea create reward pool ambassadors organize local events educate entrepreneurs new use cases help develop businesses 5 miner rewards13 miners incentive network additional sources revenue earn tokens based traditional mining transaction fees earn tokens ways xe2 x80 xa2 storing blocks sharder xe2 x80 xa2 providing storage service blobber xe2 x80 xa2 xe2 x80 x9cfree xe2 x80 x9d zcn immediately stake xe2 x80 xa2 delegation fees miners stake tokens network generates interest tokens earn miner sharder storage grows network earn storage provider infrastructure requirements miner sharder blobber simple server people buy locally parts listed fig 7 24 tb storage server starter set shard spare parts cost nil scaling storage consumed earn miner sharder earnings potential scalable platform miner sharder stake 200 000 zcn example shown fig 8 earnings twice lock tokens times able participate miner sharder math simple reward tokens miner sharder tokens miners sharders number miners sharders number tokens 1 4m 130 total miners sharders earn 10 000 zcn number tokens increased year 6m team tokens participant earn 46 000 zcn 13 miner reward document https drive google com file d 1ymu5aqmuw8bditesokkcz7hqctlxb2g1 view 12 x0cfig 7 miner rig template fig 8 miner sharder rewards potential rewards miners sharders based following protocol 1 staking results 3 payments interest rate changes based rate given view change b reward striving miners sharders equation change sharder stake multiple miners c transaction fee dynamic transaction block hard predict component likely indicate extra potential giving value 2 formula compute reward round extrapolated n rounds view change happens vn rounds metric n project returns view change 3 net change miners sharders view change protocol assuming certain payments happen view change equation reward round party let number active miners m sharders s b let reward miner round x c let reward sharder round multiple k miner xe2 x80 x99s reward reward k x d let available reward round r n rounds total reward given network n r total reward received miners sharders n x m k x s equating sides x r m k s note reward structure indication number generators replication factor starting m 100 s 30 number generators 10% replication factor 6 k 1 tweak parameters based ongoing cost governance protocol 13 x0ccost analysis mining network effective rewards exceed costs discussion ignore interest transaction fee based rewards simplicity loss generality let cost generating block cg number generators g let cost verifying block cv let number blocks verified average round v let cost storing block cs number replicators r let cost supporting queries related transaction confirmations block given round q cost specific bound cost operating n rounds n g cg m 1 v cv r cs q reward greater cost n r n g cg m 1 v cv r cs q implies r g cg m 1 v cv r cs q formula indicates reward block cost consider number generators sharders reward party directly parameters reward given indirectly lower bound based blockchain parameters earn blobber msp managed service storage provider earnings potential miner limited finite reward pool earnings potential storage provider unlimited addition earnings fiat currency detailed section 1 8 encourage miners start infrastructure potential provide multiple streams revenue add alternatives fig 9 shows earnings potential blobber storage demand grows years unlimited potential barrier entry storage profit usd 1000000 900000 800000 700000 600000 500000 400000 300000 200000 100000 0 investment usd $5 300 $10 000 $20 000 $100 000 $200 000 $400 000 fig 9 blobber earnings potential 0chain building msp program community entire smb sme market served dstorage community compelling cost performance alternative traditional cloud today smb smes use dropbox box onedrive aws azure google msps continue margin selling dstorage 0box smb smes multiple streams revenue blobber miner sharder msps set configuration portion storage rigs select msps blobber pool example decide 10 20 erasure coding send data rigs seven msps trust relationships rest globally msp orchestration configuration process setup simple clickable process dashboard msps revenue earning managing customer xe2 x80 x99s storage making equipment fig 9b shows msps unlimited earning potential growth dstorage following payment protocol blobbers clients allocation user asks storage allocation certain capacity offering range min max cost unit storage unit time smart contract identifies blobbers offering storage cost range provided user randomly picks required number chosen erasure coding ensures blobbers randomly selected time cost overall storage range desired user governance dictate absolute min max ranges desired 14 x0cstarvation attack allocation created establishes write challenge pools striped client blobber relationship minimum 10% cost needs immediately paid client successful allocation storage end storage subscription time client hasn xe2 x80 x99t actually spent 10% storage initial paid ensures blobber paid 10% prevents starvation attack clients initial tokens placed write pool writes happen moved corresponding challenge pool storage additional content user needs funding write pools staking pool allocation created blobbers stake 100% storage cost receive interest locked stake punished fail proof storage challenges unit storage unit time storage cost stake converted unit amounts size time helps interpolate rewards punishment storage size time left expiration example 100% stake blobber 100 gb 100 days stake 10 4 unit price gb day actual units subject change based final implementation smart contract similarly reward stored content reward size duration reward unit price storing content given blobber storage reward set aside challenges user writes new file blobber redeems write markers funds write pool challenge pool similarly user deletes files funds challenge pool write pool adjusting reward deleted content stored point adjusting challenge pool assuming virtual challenge successfully happened rewarding appropriately challenge rewards slashing blobber passes challenge time t1 challenge time t2 eventual expiration tstop paid challengepool t2 t1 tstop t1 linear interpolation fraction challenge pool reward set aside entire duration t1 expiration time paid proportion delta time t2 t1 similarly blobber passes challenge time t1 fails challenge time t2 penalized stake t2t1 tstop t1 equations unit price storage size come picture challenge failure assumed failure entire allocation costs calculated based content size set aside challenges reward punishment challenges purely time based expiration time expiration blobber hasn xe2 x80 x99t received 10% original storage cost write challenge pools guarantee blobber paid locked tokens beginning storage allocation unused write pool goes user challenge pool goes blobber extension users extend storage time expiration extend storage unit prices readjusted weighted average time left original cost new duration new prices cost extension determined current cost storage computing cost original expiration time new expiration time rewards punishments based weighted average remaining values new values time remaining new expiration 6 enterprise benefits enterprises benefit dstorage ways xe2 x80 xa2 50% lower cost easier scale storage needs xe2 x80 xa2 higher performance 10x speed availability 14 nines workload retool client xe2 x80 xa2 data breach protection auditability public blockchain xe2 x80 xa2 supplement budget lending storage blobber pool 15 x0clikes msps envision enterprises form community actively participate form consortium storage providers benefit lower cost higher performance storage solution 7 gtm strategy msps market size 20 000 u s times globally14 msps serve smb sme market according world bank group study suggests 365 445 million micro small medium enterprises msmes emerging markets 25 30 million formal smes 55 70 million formal micro enterprises 285 345 million informal enterprises small medium enterprises smes need protecting data gtm model target msps vars value added resellers vads value added distributors start serving smb sme community 0box dstorage displace traditional alternatives dropbox aws pursue select relationships enterprises build enterprise community model 8 zcn valuation15 notion zcn cryptocurrency tied data locked tokens novel concept zcn data asset blobbers participate network need stake sell price storage example selling storage $0 1 gb year putting 10tb 50tb rig capacity need stake $1000 equivalent number tokens network similarly client use 10 tb storage year lock paid blobbers year average equivalent value locked staked tokens network parties $1500 average constitutes base value network demand fig 10 shows current data cloud market penetration level expected dstorage corresponding value data stored network upshot achieve 10% penetration today xe2 x80 x99s cloud market $20 billion value directly based data network 0chain storage estimate usd billions 35 30 25 20 15 10 5 0 2018 2019 2020 % penetration 2021 2022 2023 2024 2025 zcn equivalent stak ed locked usd bi llions fig 10 dollar value data stored 0chain based estimated penetration zcn blockchain cd familiar bank cds lock portion money specific time period receive interest banks money lend higher interest rate businesses home owners making profit network somewhat similar user getting xe2 x80 x9cinterest xe2 x80 x9d tokens mechanics different lock tokens network generates tokens similar bitcoin ethereum coins minted tokens miners network mined tokens primarily token holders desire xe2 x80 x9chodl xe2 x80 x9d lock earn interest inflation economy primarily driven desire token holders lock tokens 14 https www channele2e com faq msp market size forecast equilibrium price 0chain token andrea buraschi sebastiaan vervest imperial college london https drive google com file d 1emqktz2syzxh2mhmcrr8sujfovhffbc view 15 16 x0cthe value zcn network directly related number people use zcn currency receive interest tokens people network lock tokens long term higher value zcn based closed form supply demand equilibrium equations paper professor buraschi imperial college london receive immediate interest unlike banks lock tokens receive interest tokens immediately helps hodlers use interest tokens services storage transactions future services 0chain platform zcn valuation interest data valuation zcn combination data network hodlers xe2 x80 x99 desire earn interest locked tokens locked staked tokens visualized transparently network estimate base value network given point time unlike cryptocurrency value zcn deterministic speculative unlike stable coins transparent currency 9 token economics distribution tokens 0chain foundation outlined fig 11 total 200m tokens pre mined distribution follows 85m team 15m xe2 x80 x9creward xe2 x80 x9d tokens set aside team miners sharders community developers ambassadors msps build dstorage ecosystem 4 years main net launched 20m seed 40m private pre sale investors 40m reserved team equal vesting jan 2020 jan 2022 market value greater $10 team tokens locked years preserve integrity network shown table fig 11 network generate reward tokens 4 years continue funding participants network reward interest tokens expected constitute average inflation rate 3% network table fig 11 elucidates potential tokens circulation inflation interest rate shows reserve token schedule couple interesting observations fig 11 token distribution inflation economics zcn inflation driven interest demand token holders unlike bitcoin ethereum minted network tokens miners inflation zcn driven token holders desire lock tokens independent storage demand concept depicted fig 12 17 x0cstorage demand counters selling pressure provides liquidity zcn needs staked network expect constant liquidity new storage gets signed network expect storage demand stabilize selling pressure constant buying locking network value zcn based number users lock tokens interest data stored network zcn inflation tokens token holders miners sharders developers ambassadors old token economics inflation tokens miners bitcoin ethereum litecoin bitcoin cash etc 100% miners sharders developers ambassadors token holders 12a bitcoin old coin vs zcn inflation economics expected inflation rate % zcn zcn inflation tokens 300 00 70 60 250 00 50 200 00 40 30 150 00 20 100 00 10 50 00 0 2018 2019 2020 2021 2022 2023 2024 expected inflation rate percentage 2025 0 00 2018 2019 expected inflation rate percentage based tokens circul ation 2020 total circulati 2021 2022 2023 2024 2025 total tokens locked circulation fig 12b expected zcn inflation 10 products 0box private cloud 0box private cloud logins emails needed especially user pays premium version zcn tokens version 0box launched mainnet fiat feature regular user user experience dropbox box purchase privacy cloud service credit card scenario 0box handle protocols payments behalf user user absolute control access data challenges data regularly giving satisfaction data stored safely breached blobbers storing pieces data url shown fig 13 addition consumer faster user experience competitors dropbox currently 0box beta check https testflight apple com join akv3fqgz 0wallet serverless 2fa wallet zcn 0wallet protects zcn asset innovative serverless 2fa mobile laptop device gets compromised assets safe setup simple shown fig 14 user downloads authenticator app laptop uses accept transaction initiated phone point click operation mobile device talk computer long network devices compromised asset safe regenerate new set keys original passphrase private key check ios app app store android app play store download windows mac authenticator website https 0chain net page wallet html 18 x0cfig 13 0box private cloud private anonymous transparent fig 14 setup process 0wallet serverless 2fa wallet zcn 11 roadmap current development ongoing july 2017 design protocols products table shows development product release roadmap 2019 leading launch main net following expect work aspects dstorage q1 q2 q3 q4 alpha network release sdk release betanet mainnet 0box zcn ios android 0chainnet consensus sdk js sdk hackathon 0box android windows sync 0chainnet storage protocol cli storage bugathon dstorage xe2 x84 xa2 msps smes 0chainnet explorer cli wallet launch 0box ios mac sync s3 interface launch 0wallet ios android mac windows authenticator msp orchestration 19 x0c