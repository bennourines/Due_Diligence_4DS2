b lto network blockchain decentralized workflows www lto network f abstract digitalization automation business processes offer great benefits terms productivity cost reduction organizations struggle tap benefits interorganizational processes partly lack trust bitcoin proven blockchain use distribution cryptography provide system rely trust lto builds foundation decentralized workflow engine employed ad hoc collaboration information shared parties process private event chains hashed public blockchain hybrid approach allows organizations meet data protection regulations prevents scalability issues typically associated blockchain projects ntroduction digital revolution resulted changes lives efficient 1 wave progress taken place primarily consumer facing internal business processes comes inter organizational processes acknowledge changes drastic faxing largely replaced e mail typewriter replaced word processor superficial changes execution underlying processes hardly changed reason automation absent reluctance corporations rely external systems operated counterparty 2 distribution information plays important role outcome relationship 3 natural power imbalance party control forcing use centrally managed system dealing government extent corporations situation single party claim control automation simply doesn xe2 x80 x99t happen 4 achieve automation inter organizational processes decades people experimented decentralized workflows 5 studies experiments high level trust fair play assumed focusing primarily solving technological challenges reality false assumption lack trust prevents successful pilots making production second reason absence automation correlation efficiency corruption 6 traditionally large corporations government bodies require large number people execute process fair bureaucracy required coordinate processes increases costs bribery reducing incentive automate increasing efficiency negates effect paper shows problems solved blockchain providing solution parties equal footing x0c1 c ontents live contracts 3 1 live vs smart contracts 1 1 ricardian contracts 1 2 enforcement 1 3 user interface 3 3 3 3 2 finite state machine 2 1 deterministic finite state machine 2 2 extended finite state machine 2 3 communicating finite state machines 2 4 contract automaton 3 4 4 4 4 3 alternative modeling methodologies 3 1 petri nets 3 2 bpmn 3 3 demo 4 4 5 5 4 scenario 4 1 states 4 2 actions 4 3 actors 4 4 assets 5 5 5 5 5 data objects 5 1 immutability 5 2 forms 5 3 documents 5 4 custom types 5 6 6 6 6 6 identities 6 1 inviting identities 6 2 updating identity 6 6 6 7 process 7 1 7 2 7 3 7 4 7 5 7 6 7 7 6 6 7 7 7 7 7 7 8 adaptive workflows 8 1 comments 8 2 deviation 8 3 scenario update 7 7 7 7 9 event chain 9 1 cryptographic signatures 9 2 hash chain 8 8 8 10 distribution 10 1 private chain 10 2 genesis 8 8 8 11 consensus mechanism 11 1 chance conflict 11 2 branch validation 11 3 cascading rules 11 4 unanchored events 11 5 merging branches 11 6 forks 5 actions manual actions system actions sub processes projection data operators passive testing 8 8 9 9 9 10 10 x0c2 12 privacy 10 12 1 linked data 10 12 2 gdpr 10 12 3 zero knowledge proofs 10 13 common patterns 10 13 1 chain interaction 10 13 2 explicit synchronization 10 ii global blockchain 12 14 centralized vs decentralized anchoring 12 15 consensus algorithm 15 1 leasing 15 2 raffle factor 15 3 forge probability 15 4 fair pos 15 5 generator signature 15 6 ng protocol 16 17 18 12 12 12 13 13 13 13 transaction types 16 1 anchoring 16 2 authentication authorization 16 3 certificates 16 4 chain trust 16 5 smart accounts 13 13 14 14 14 14 summary blocks 17 1 key block size 17 2 growth aggregation 17 3 segregated witness 17 4 aggregation 17 5 difference pruning 17 6 summary block size 17 7 total size 17 8 history nodes 14 14 15 15 15 15 15 15 16 network vulnerability 18 1 importance inflation 18 2 stake 18 3 lpos centralization 18 4 denial service attack 18 5 sha 2 vulnerability 16 16 16 16 16 17 iii platform 18 19 architecture 18 19 1 micro architecture 18 19 2 application layers services 18 20 ui layer 21 application layer 18 21 1 web server 18 21 2 workflow engine 18 22 private 22 1 22 2 22 3 23 public chain layer 19 23 1 anchor service 19 24 container orchestration chain layer eventchain service event enqueue service event dispatch service 18 18 18 18 18 19 x0c3 live contracts business process modeling common strategy medium large organization 7 creating visual representation workflow process allows analyzed improved automated figure 1 unlike procedures written natural language written programming language models understood humans computers draft document review document declined xc3 x97 accepted party signs party b signs fig 1 bpmn diagram visualize workflows inter organizational cooperation modeling merely improve communication parties involved specify process serve binding agreement 8 lto platform called live contract lto platform creates ad hoc private blockchain live contract blockchain intended immutable ledger ensures parties date countersigned history events shared states 1 l ive vs s mart c ontracts live contracts similar goal smart contracts implemented ethereum 9 define solidify logic applied trustless verifiable way philosophy types digital contracts different ethereum describes smart contracts cryptographic xe2 x80 x9dboxes xe2 x80 x9d contain value boxes unlock certain conditions met 10 live contracts directly hold value describe parties interact intent closer traditional paper contract programs inherent property live contract obtained way defined separate natural language version legal purposes coded version programme execution 1 2 1 3 ricardian contracts live contract fits definition ricardian contract1 11 notably xe2 x80 x99s easily readable people 1 ricardian contract defined single document contract offered issuer holders b valuable right held holders managed issuer c easily readable people like contract paper d readable programs parsable like database e digitally signed f carries keys server information g allied unique secure identifier user interface ethereum provides internal turing complete scripting language programmer use construct smart contract transaction type mathematically defined 10 makes abstract state contained contract intrinsic meaning interact contracts user interface created specific smart contract precisely interface contract 15 standards like erc 20 16 erc 721 16 manage decouple ui contract logic cases restrict possibilities designing contract live contracts information intrinsic meaning restricts use cases enable generating interface purely based data provided contract process result workflow digitalized executed lto platform need creating specific ui 2 1 1 enforcement chain enforcement poorly suited real world cases smart contracts rely proactive enforcement meaning breaching agreement impossible dropping possible 12 non disclosure agreement example blockchain xe2 x80 x99t prevent party disclosing information force party actively participate resolving breach contract work self enforcing agreement 13 hold penalty deposit party better participating resolution having tie large amounts funds deposits penalty fees arbitrary contracts impractical organizations 14 additionally effectiveness penalty interest similar measures limited value held smart contract inter organizational business processes offchain dispute resolution authoritative party live contract facilitate resolving dispute include conflict negotiation mediation arbitration arbiter judge running process lto platform forms verifiable history events reducing asymmetrical information distribution information influences negotiations case dispute 3 influences assessment authoritative party f inite state machine live contract defines workflow finite state machine fsm 17 makes possible visualize workflow flowchart figure 2 makes understandable humans computers x0c4 2 1 deterministic finite state machine blockchain logic needs deterministic 18 computer programs require extra effort comply requirement dfsm deterministic definition start q0 request review document declined q1 document accepted party 2 signed q2 party 1 signed q4 party 1 signed q3 q5 party 2 signed fig 2 example finite state machine visualized flowchart 2 2 extended finite state machine visualized figure 2 problem arises multiple actions required state order occur arbitrary modeled transition path possible order figure 2 approach number states state transitions grow exponentially number actions makes visualization workflow clear makes harder error prone define workflow instead regular fsm live contract uses extended finite state machine 19 efsm allowing conditional state transitions figure 3 defines workflow figure 2 efsm start document declined q0 request review q1 document accepted party signed party 6 signed q2 finalize document xe2 x88 x80 xe2 x88 x88 parties signed q3 fig 3 example extended finite state machine conditions brackets true transition valid 2 3 event chain section 9 able function communication channel fsms processes isolated different event chains communication channel non deterministic inherently makes system non deterministic 20 overcome making acknowledgments fsm shown section 13 1 communicating finite state machines finite state machines limited sequential behavior support concurrent processes order represent workflows concurrency sequence parallel instructions represented individual fsm 2 4 contract automaton finite state machine applied agreement participants formalizing obligations permissions prohibitions parties impose 21 contracts like financial agreements 22 service contracts 23 fully digitized fsm representations sufficient workflow define orchestration communication choreography process factors incorporated causes fsm grow exponentially complexity 24 practicality fsm best represent incomplete contract doesn xe2 x80 x99t problem gaps filled default rules 25 system allow renegotiation live contract resolve particular situation general shown section 8 thing note action process constitutes binding factor figure 1 acceptance text document constitute binding agreement occurs document signed facilitate distinction actions categorized informative performative actions 26 3 lternative modeling methodologies communicating extended finite state machines commonly describing telecommunication systems realtime systems 27 business processes common notations workflows provide additional challenges modeling decentralized inter organizational processes 3 1 petri nets petri nets 28 graphical way representing system multiple independent activities running time ability model multiple activities differentiates petri nets finite state machines finite state machine single xe2 x80 x9ccurrent xe2 x80 x9d state determines action occur petri nets states evolve changing state petri net alternatively states evolve parallel causing independent changes petri net occur 29 workflow nets wf nets subset petri nets describe business processes 30 wf nets describe process sequence extended finite state machines use global state hold information information isolated sequence failure making data immutable exploited shown section5 1 petri nets global information isn xe2 x80 x99t possible instead information needs flow workflow approach cefsms sequences defined individual processes makes trivial apply access control representing workflow xe2 x80 x99t addressed way x0c5 petri nets interesting notation proven able correctly represent business workflow given xe2 x80 x99s possible address mentioned challenges wf nets notation preferable individual fsms similarity petri nets fsms switching wf nets fundamentally change solution described paper 3 2 bpmn bpmn industry standard business model processing likely candidate modeling notation lto number limitation particularly problematic inter organizational systems 31 business process execution language bpel typically associated bpmn non deterministic turing complete language web services 32 makes ill suited automation blockchain proposed alternative translate bpmn model petri net translated smart contract 33 translation turing complete smart contract unnecessary translation bpmn petri net cefsm interesting order support current industry standard 3 3 demo xe2 x80 x9cdemo xe2 x80 x9d acronym xe2 x80 x9cdesign engineering methodology organizations xe2 x80 x9d methodology describing organizations business processes based xe2 x80 x9dcommunicative action xe2 x80 x9d uses models create holistic view construction model cm process model pm action model fact model fm 34 considering step process individually establishes generalized workflow single performative transaction transaction roles initiator executor standard sequence follows follows initiator request executor makes promise executor performs actions makes statement result initiator accepts transaction completed rejects 26 alternative flows modeled like executor declining request initiator wanting revoke request executor unable fulfill promise etc alternative flows partially modeled modeling methodologies practice present process model pm combines transactions model complete business process difference model workflow model everybody works parallel possible specifying dependencies transactions needed models don xe2 x80 x99t clear overview process mutual exclusion information don xe2 x80 x99t edit document xe2 x80 x99s ready signed immersive needs specified demo good way high level model yields workflow fine tuned reduces reliance deviations section 8 2 4 s cenario workflow defined data object scenario consists xe2 x80 xa2 xe2 x80 xa2 qx state q0 initial state q set possible states q q0 qn xe2 x88 x921 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 4 1 xcf x83x action xce xa3 set possible actions xce xa3 xcf x831 xcf x83n xce xb4 transition function xce xb4 q xc3 x97 xce xa3 xe2 x86 x92 q f set final states f xe2 x8a x82 q f xe2 x88 x85 xc2 xaf actor definitions xcc x84 asset definitions d set embedded data objects states states set q typically consists xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 title short title state xe2 x86 x92 set actions transaction xe2 x88 x92 qx xce xb4 description long description state map instructions specific actors state describes actions performed state includes state transition allows actions different states 4 2 actions scenario defines xce xa3 set possible actions performed workflow examples actions filling form reviewing document sending http request response action type object properties defined json schema action defines actors set execute optionally additional constraints described efsm action executed state transition triggered actions categorized manual actions require human interference executed system actions executed automatically system optionally actions define instructions updating actors assets data response 4 3 actors set xc2 xaf defines actors role process actor defined object json schema actor properties relevant process defined actor scenario static definition instantiated process 4 4 assets xcc x84 defines assets available process asset variable data object properties relevant process defined note scenario defines structure assets assets instantiated process 5 data objects scenarios types data objects defined data objects including scenarios use json schema type definition common examples forms documents templates data objects embedded process linked stored independently linked objects identified sha256 hash json representation ensure json encoding data yields result deterministic method json encoding applied x0c6 5 1 immutability data objects immutable extent applying modification data object yields new data object data object embedded process asset old object replaced modified importantly data object available multiple processes changing object process propagate processes failing lead exploitable situations figure 1 shows process negotiating signing document xe2 x80 x99s clear document allowed modified signing sequence 5 2 forms 6 1 inviting identities add parties process scenario needs define actions add identities public keys known process identity added directly public key known identity needs invited figure 4 means deemed secure including e mail inviting system generates time key sends invited identity invited party replace secure xe2 x80 x99user xe2 x80 x99 xe2 x80 x99system xe2 x80 x99 keys new identity fully participate process additional authentication required range sms verification federated identity verification notary approval form definition uses json schema define data structure result filling form optionally ui schema specify corresponding field rendered displayed similar implementations 35 xe2 x80 x9338 aim work projects form unified standard initiate process q0 generate temporary key pair q1 send key pair identity 5 3 documents q2 digital workflows largely eliminate need paper documents legal compliance backward compatibility simply convention require use documents defining templates live contract natural language documents generated data gathered process recommend open document format 39 supports fields conditional sections creating templates invitee replaces temporary keys key pair q3 fig 4 inviting identity join process 6 2 5 4 custom types json schema defines object dataobject type usage custom types causes risk workflow working properly parties participate node doesn xe2 x80 x99t support type data unknown types stored xe2 x80 x9das xe2 x80 x9d unavailable outside context process 6 updating identity identity free modify information identifier allows party switch node cases user allowed switch nodes xe2 x80 x99s node identity reject change removing identity clearing sign keys encrypt key node uri updating identities possible action defined scenario allowed current state dentities identity defines person team organization live contract identity following information xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 identifier node uri custom information sign keys encrypt key identities actors actor abstract role like xe2 x80 x99student xe2 x80 x99 identity xe2 x80 x99bruce willis xe2 x80 x99 xe2 x80 x99acme corp xe2 x80 x99 sign keys map public keys associated identity xe2 x80 x99user xe2 x80 x99 key belongs identity sign action xe2 x80 x99system xe2 x80 x99 key owned node identity uses sign automated actions key types meaning defined process public encryption key encrypt data decrypted identity 7 p rocess scenario stateless definition workflow process stateful instantiation consisting xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 7 1 xce xb8x response f qx 7 xe2 x86 x92 xce xb8x xce x98 ordered list responses xce x98 xce xb80 xce xb8n qt current state set available actors set created assets actions executing action yields response response signed actor submitted new event nodes independently determine new state based current state executed action scenario defined deterministic fsm concerns state transitions projection systems like ethereum hyperledger logic deterministic xe2 x80 x99s executed nodes needs yield identical results systems 40 x0c7 lto single node single actor executes action meaning actions need deterministic concepts like oracles needed 7 2 manual actions applications built lto platform inform human actors actions perform current state human actor sign response event submitting node distribute parties 7 3 system actions system actions require human interference executed node automatically node signs response human user actions performed single system deterministic parties validate response reject needed human interference involved system actions actions signed system instead actor xe2 x80 x99s possible schedule system action executed later time specified scenario allows timeout state polling external source predetermined frequency system actions automatically executed yield error incorrectly fail actions state transitions defined successful execution case error 7 7 passive testing scenario contains loop consisting exclusively system actions result infinite loop causing massive transactions validating want reject scenarios construct determining program run forever known halting problem 41 problem proven unsolvable turing complete machines solved fsms 42 fsm finite transition paths checked loops passive tests efsm models complicated presence infeasible paths problem welldocumented remains unsolved 19 43 simplicity reasons assume path feasible ignoring conditions accept cause false positives 8 daptive workflows scenario model typical cases process xe2 x80 x99s impossible foresee situations advance tedious model possible edge case taking code law approach system rigid instead live contracts supports methods resolving issues 8 1 comments process based fsm state time sub processes allow live contract hold multiple states possible different procedures parallel processes share event chain data process isolated facilitate sub processes live contract contain subscenarios instantiated main scenario comments communicate identities example resolve conflicts conduct discussions outside process comments instead chain communication methods makes sure conversations logged blockchain allows backtracking check procedure certain conversations took place comments restricted text messages possible use images documents assist communication comments process meaning adding comment trigger state transition way possible conduct discussion subjects predefined procedure 7 5 8 2 7 4 sub processes projection fsm state process contains stateful data assets actors payload response update data rules payload updates data defined scenario updating projection deterministic applying given set responses scenario yield projection projection set parameters action xe2 x80 x99s data conditions extended finite state machine 7 6 data operators data operators scenario specifying projection affects process operators deterministic functions effects arithmetic logical operations result operations stored projection example base state transitions deviation party propose deviation main flow defining partial scenario sub flow start states existing scenario end state scenario deviation flows executed longer available process returns existing state parties need agree deviation note deviations lead forks resolved manual conflict resolution deviation resolve disputes party propose dispute correctness previous event present solution correct typical case deviations payment arrangement organizations obviously don xe2 x80 x99t want option known forehand predefined sub flows allow arrangements keeping wraps 8 3 scenario update required change scenario running process instance agreement updated new law passed party provide new scenario given process deviation flow flow moves state outdated scenario ends transition new scenario x0c8 9 e vent chain 10 1 private chain order determine state fsm projection need process set responses given order inserting removing event changing order events modifying payload result radically different state centralized solution controlling party responsible data integrity parties rely trust party represents single source truth decentralized system power responsibility shared parties facilitate event chain works like ad hoc private blockchain response wrapped event viewed block single action sequence events form hash chain shared parties consensus algorithm ensures parties agree sequence events event chain private chain shared nodes chosen identities nodes aware private chains node stores facilitates event chains time unlike chains event chains completely isolated chains affect directly allows horizontal scaling given activity event chain reasonably low 9 1 11 cryptographic signatures 10 2 genesis anybody create new event chain genesis block chain contains identity user xe2 x80 x99s creating process subsequent block contains scenario scenario identities invited private blockchain c onsensus mechanism event uniquely identified sha 2 256bit hash industry standard algorithm fast resistant pre image second preimage attacks collisions 47 xe2 x80 x99s recommended cryptographic hashing algorithm nist 48 embedding hash previous event hash event creates hash chain records chronology events combination cryptographic signatures hash chain provides adequate measure proving specific sequence events resulted current state 49 lto distributed system parties able participate node nodes distribute events peers process means brief moment state process nodes differs eventual consistency 50 guarantees given new event submitted eventually state process nodes new events submitted consistency achieved moment possible nodes append event event chain byzantine failure 51 nodes believe information valid overall system inconsistent state state nodes longer accept new events need able come consensus halt distributed applications use different kind consensus algorithm general case byzantine fault tolerance bft early byzantine fault tolerance methods scale 52 invention better scaling consensus algorithms like proof work 53 proof stake 54 proofof authorization 55 possible create distributed networks large number participants called distributed ledger technology consensus methods scale better traditional bft methods need relatively high participants order secure event chain private blockchain relatively participants meaning algorithms won xe2 x80 x99t work trusting majority vote nodes consider state correct proven 10 11 1 ensure falsify forge events event signed submitted asymmetric cryptography signed event serves receipt allowing parties prove action executed signing identity platform uses ed25519 44 signatures ellipticcurve signatures widely supported considered secure institutions like nist 45 enisa 46 elliptic curve cryptography allows faster single signature verification signing losing security reduces needed size keys signatures note method doesn xe2 x80 x99t grant complete security party able falsify forge events words cryptographic signatures xe2 x80 x99t prove event occur 9 2 hash chain d istribution requiring parties pull information central server party responsible pushing events system parties systems need available order events lost decoupling use message queue reduce issues temporary unavailability typical case parties connect node trust receives processes events node larger system section 19 1 focus organizations governments xe2 x80 x99s organizations run node users connect node organization publicly available node choosing participate process chance conflict event chains rely optimistic concurrency control conflicts strain consensus algorithm relatively slow wait block generated define distributed event chain follows xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 let n set entities n1 n2 n3 contributing event chain let cn event chain sequence consisting events e1 e2 e3 belonging entity n let c set copies event chain cn n xe2 x88 x88 n let xe2 x80 x99s define conflict branch xe2 x88 x83 j xe2 x88 x88 n 6 j ci0 cj0 ci 6 xe2 x8a x82 cj cj 6 xe2 x8a x82 ci x0c9 conflict occur accident parties add block chain received chain update let xe2 x80 x99s chance somebody propagating update chain p x chance depends blocks added chain given time frame time takes propagate block rest network entities contributing chain time frame assuming everybody contributes equally network derived formula 1 p x f xc2 xb7t n 1 f total transactions time frame n total active participants t time takes propagate block rest network chance calculate probability conflict occur probability derived subtracting chance having conflict 1 conflict means contributed chain moment chance calculated formula 2 1 xe2 x88 x92 p x n 2 node contributed chain chance calculated formula 3 p x xc2 xb7 1 xe2 x88 x92 p x n xe2 x88 x921 xc2 xb7 n 3 chance conflict calculated 4 p c 1 xe2 x88 x92 1 xe2 x88 x92 p x n xe2 x88 x92 p x xc2 xb7 1 xe2 x88 x92 p x n xe2 x88 x921 xc2 xb7 n 4 network delay 1200ms chance conflict 2% chance conflict xc2 xb710 xe2 x88 x922 2 f 10 f 0 5 xc2 xb7 n 1 0 5 10 15 20 number active participants 25 fig 5 plot shows chance conflict occurring increases number participants increases stabilizes total number transactions stays figure 5 shows chance conflict occurring constant number participants increases total number transactions stay number participants increases usually number transactions increase example participants lead comments case chance conflict increases exponentially number participants lto works active participants single event chain reduces chance conflict 5 participants number active participants longer relevant 10 participants chance conflict linear based network delay transaction frequency individual shared events chains decoupled message queues transaction frequency low marginalizes chance conflict 11 2 branch validation node prove party aware chain point event party allowed branch chain commit party tries branch chain point event branch automatically discarded parties event logged accepting new events conflicting branch validated similar received set events event signed correctly identities event anchored timestamp event matches anchor given boundaries 11 3 cascading rules case conflict following rules applied order xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 priority event priority actor order anchoring action scenario given priority translates event priority additionally event types like comments lower priority exact sequence importance case conflict occurs block contains action highest priority accepted case priority rules applied based identity creating different levels authority process actor scenario given priority level default priority actors resolve conflict events added actor highest priority accepted events priorities identities authorities method consensus applied nodes anchor events global blockchain order transaction global blockchain fixed mined blocks order events anchored global blockchain achieve consensus case block anchored accepted consensus private event chain reached consensus public blockchain public chain consensus reached anonymous collaboration large number participants priorities allows running attack actor respond event creating new branch subsequently invalidates action priorities problem 11 4 unanchored events block received anchored decide accept block course conflict arises accepting anchoring block merely delayed accepting prevent unnecessary delays process hand block anchored real problems arise everybody accepts block process continue normal block anchored later x0c10 11 5 merging branches case fork blockchain applications pick chain ignore happened branches blockchain like bitcoin transactions included mined blocks branch eventually event chain events build hash chain picking forks lose information executed action instead node aware branch precedence branch base events locally chain similar rebase action git 56 11 6 forks guaranteed way achieve consensus participating party decide ignore chains fork place blockchain applications like ethereum 57 reason interfere value comes participating main chain live contracts tool digitize partly automate existing processes blockchain allows forks processes usually case fork parties start secondary procedure try resolve conflict manually 12 p rivacy lto built running processes parties parties needs aware process collaboration public blockchains allow anonymous accounts function pseudonyms transaction reveal identity account exposing transaction history smart contracts require data public needs available node consortium blockchains participants aware ad hoc private blockchains uniquely allow random assortment participants collaborate need approval making information public blockchains completely erased process completed 12 1 linked data party connects node node trusts node private storage service users store data users complete control data stored similar data stored service like dropbox remove personal data time data shared processed valid data processing agreement explicit approval user action results linked data data directly shared parties hash added blockchain lto prevents hash verifying received data putting envelope timestamp random data hash created form envelope occur blockchain organization indicates wants perform action requires linked data node organization automatically request data owners node checks specified action valid performed actor current state 12 2 gdpr arrival new gdpr 58 general data protection regulation europe argument risen fact lot blockchain applications gdpr compliant 59 main reasons xe2 x80 xa2 xe2 x80 xa2 fact blockchains immutable nature conflict right amend erase data fact dedicated data controller distributed environment linked data means node chosen party participate act data controller user parties data processors data requests automatically formatted proper data agreements include purpose time required processing data ad hoc blockchains allow complete chain erased required short lto privacy features solution gdpr compliant additional effort 12 3 zero knowledge proofs scenario require party prove party knows specific value zero knowledge proof method conveying information apart fact knows value platform supports zero knowledge proofs interactive proof system parties prover verifier exchange messages goal prover convince verifier honesty completeness verifier expose dishonest prover soundness 60 zk proof live contract action parties need experimental non interactive zero knowledge proofs like zksnarks 13 13 1 c ommon patterns chain interaction processes interact processes able continue examples process needs permission process continue retrieve result conflict resolution process requesting data process following pattern shown figure 6 q0 request receive request sent request q1 sent response q0 q1 response q2 receive response q2 fig 6 pattern followed processes interact 13 2 explicit synchronization cases especially troublesome event propagated late case explicit synchronization built scenario requires parties acknowledge current state continuing process x0c11 pattern fsm intended prevent parties forking chain events prior event case dispute conflict acknowledgment decide branch continue process kind explicit synchronization works parties acknowledge current state parties lack incentive continue incentive fork process solution required case party wants continue process announces parties party receives announcement notices announced action valid chain propagate means fork happened regular conflict resolution applied remove impact network delays announcement set time waited assuming rejected announced event x0c12 ii global blockchain lto global blockchain permissionless public blockchain purposely build verifying information exists support live contracts private event chains global blockchain features anchoring digital identities interoperable event chains blockchains applications notary transactions nearly blockchain blockchains optimized financial transactions general logic notary type transactions expensive inefficient 61 furthermore optimizations pruning sharding negative effect relevant information omitted 62 63 global blockchain nxt family 64 unique characteristic blockchain transactions based series core transaction types require script processing transaction input output processing network nodes reduces blockchain size increases efficiency allows ways aggregation particularly beneficial notary transactions starting nxt directly use fork waves platform 65 basis platform implemented number improvements like ng protocol section 15 6 network benefit existing transaction types focusing digital assets including colored coins removed disabled replaced notary transaction types 15 1 14 staked tokens % total contributed transactions % total s t ratio related xe2 x80 x98raffle factor xe2 x80 x99 raffle factor mathematical formula influences chance node chosen generate new block balanced st ratio closer 1 0 higher raffle factor st ratio unbalanced node contribute transactions raffle factor 1 0 vs decentralized anchoring solutions blockchain anchoring use centralized approach hashes collected period time transactions merkle tree created single transaction party blockchain like bitcoin direct feedback system hours final receipt collected 66 central service lto global blockchain decentralized solution node sees transactions anchoring transaction broadcasted xe2 x80 x99s instantly visible approximately 3 seconds xe2 x80 x99s pre approved ng section 15 6 transaction block minute nodes track anchored hashes needed create receipt independently section 16 1 need centralized service 15 c onsensus algorithm global blockchain functions typical public blockchain node selected generator validate transactions forge block determine generator use leased proof importance lpoi consensus algorithm generator rewarded fees transactions forged block proof importance variation proof stake pos chance selected forge block determined based number tokens hold stake proof importance chance increases based usage network node 67 68 token economy emerges consensus algorithm described detail xe2 x80 x9dlto token economy xe2 x80 x9d paper 69 nxt waves blockchains family use leased proof stake 64 70 leasing tokens token holder passes right forge block selected node nodes work similar mining pool sharing rewards proportionally lessors nxt style networks susceptible attack attacker controls 1 3 active balances 71 issue projects implemented lpos algorithm tend lead high level centralization 2 nxt nodes control 50% network 72 waves 2 nodes control 1 3 network 5 50% 73 section 18 discuss importance high decentralization network prevent nodes massive leased stakes limitation leveraging leased tokens node needs 10% tokens stakes proof importance counters effect disadvantages nodes passive stakers 15 2 raffle factor calculate usage network node influences chance forge block balance staking versus transactions s t ratio st ratio 2 raffle factor r 1 0 5 xc2 xb7 e xe2 x88 x920 5 xc2 xb7 st ratio xe2 x88 x921 formula results large standard deviation bell curve 1 6 raffle factor c entralized leasing 1 4 1 2 1 0 8 0 1 2 3 st ratio 4 5 maximum raffle factor 1 5 halfway minimum absolute maximum 2 0 absolute maximum determined possibility importance inflation spam transactions shown detail section 18 1 fully understand concept raffle factor effect token economy read xe2 x80 x9dlto token economy xe2 x80 x9d paper 69 x0c13 15 3 forge probability chance selected forge p f orge s xc2 xb7 r contributed transactions t calculated time calculating p f orge s constant period time prevent possibility abuse start staking stop staking 1 c b 2 3 4 5 6 moment p forge calculated b moment forge block c moment tokens locked fig 7 timeline staking tokens forging blocks time measured number summary blocks 15 4 fair pos formula decides node eligible forge new block based fair proof stake algorithm 74 created waves improvement original nxt pos algorithm overvalues higher stakes understanding underlying algorithm read xe2 x80 x9dfair proof stake xe2 x80 x9d paper 74 convert algorithm pos poi formula applies raffle factor staked balance result effective balance bi xc2 xb7 r xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 ti block generation time th account xn generation signature r raffle factor bi percentage staked vs total staked xce x9bn base target tmin 5 constant delay blocks c1 70 constant defining shape delay distribution c2 5e17 constant adjust base target ti tmin c1 xc2 xb7 log 1 xe2 x88 x92 c2 xc2 xb7 log xn xmax r xc2 xb7 bi xc2 xb7 xce x9bn receive new block time delay reached block added chain new time delay calculated previous ti longer relevant node calculates ti information supplied generator means point incorrect stake calculations 15 5 generator signature block hash considered determining time delay ti hash based contents block determined node forging block hash played determining forge trivial manipulate ti node create different blocks broadcast lowest time prevent generation signature signature secondary hash chain previous generation signature plus public key generator nxt completely deterministic making susceptible taken advantage 71 combat reduce chance forks fair pos uses generation signature 100 blocks ago change balance node leases changes ti given xn nonetheless group controlling 1 3 tokens 30% advantage poi requires staked balance raffle factor constant fixed period blocks vulnerable attack solution generation hash publicly calculated instead node hash previous generations signature sign hash private key serves generation signature contrary nxt waves node calculate ti making impossible determine generators advance 15 6 ng protocol ng protocol proposed reduce scalability issues bitcoin implemented bitcoin waves ng active main net december 2017 ng type blocks generated micro block key block node previously elected continue validating transactions creating micro blocks average 3 seconds new node elected creates key block outstanding micro blocks transactions micro block considered secure extent suitable low risk transactions like anchoring reward transaction fees split node forged micro block node forged key block 40% 60% split split favor key block forger incentive disregard forged micro blocks create new micro blocks public stress test waves xe2 x80 x99 ng proven able process 6000 tx min peak 17 000 tx min 75 potentially ng protocol handle 1000 tx sec 60 000 tx min ng reduces practical latency key component optimizations 16 t ransaction types lto global blockchain uses predefined transaction types allows compact blocks removes need scripting list transaction types extended future needed types transactions currently possible xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 16 1 anchor verify transaction private blockchains issue certificate declare relationships identities extend revoke certificate extend remove relationship transfer token send tokens identity stake tokens let participant stake lease tokens cancel staking stop staking leasing tokens set script transaction configure smart accounts anchoring anchoring method taking hash document data storing transaction blockchain goal impossible including creator date forward date document 76 x0c14 event private event chain anchored global blockchain party applications use global chain anchor documents proof existence estimate 99% transactions global chain anchoring transactions considering transactions anchoring aggregating reduces disk space required blockchain forging block node creates merkle tree 77 transactions order presented list merkle root added blockchain validation node recreates merkle tree nodes able index anchor hash reduce disk size nodes opt extract merkle path anchor transactions path forms receipt stored original data like event 16 2 authentication authorization challenge response authentication methods like username password verification requires centralized system fully decentralized system rely cryptographic signatures provide authentication information isn xe2 x80 x99t shared event chains parties identified chains given key pair signing broader sense parties sign type information way similar use case currently presented pki certificates reliance central authorities issue revoke certificates hindered adoption replacement challenge response authentication public blockchains public private key pairs created need central authority key pair forms unique identity referenced address determined hash public key 16 3 certificates certificate transaction allows identity convey information identity referencing address unlike tokens granting revoking account fully control issuer certificate given specific type chosen party issued certificate required xe2 x80 x99s recommended certificate acknowledged recipient account displayed 16 4 chain trust public address private key pair method authentication doesn xe2 x80 x99t provide solution authorization certificates specify relationships identities similar approach web trust wot wot number drawbacks pki platform establishing revoking relationship marking identity compromised simple instant irrevocable blockchain blockchain transactions timestamped allows verifying existence relationships certain point time simply setting identity set specific relationship transaction doesn xe2 x80 x99t confirm deny information identity existence relationship removing need physically meeting party given context care finding chain trust identities based relationship mimics chain trust pki validation central authority absolute root certificate blockchain address organization organization business functions trust root 16 5 smart accounts default transaction account signed private key associated account waves introduced concept smart accounts allowing customize logic 78 logic scripted non turing complete language script verify deny transaction specific account trigger transactions type smart contract prevent aggregation limitation placed lto smart accounts ensure lto data transactions transactions accessible script validate transaction signed parties enabling multi signature specifying accounts directly requirement reference certificate instead limitations place account account locked allow transfer tokens number blocks require minimum number tokens remain account allow transferring tokens specific accounts anchoring transactions exception need signed private key account logic place apply future optimizations xe2 x80 x99t modified multi signature recommended running node account associated node typically holds large number tokens order stake anchor private key account known node multi signature obtaining key won xe2 x80 x99t direct access tokens 17 s ummary blocks anchoring low impact non disrupting method bring extra layer security blockchain anticipate applications use live contracts use anchoring feature aspect blockchain counteracts scalability fact blockchain growing 79 size puts certain requirements hardware copy puts burden new nodes play chain reduce growing speed chain uses summary blocks 17 1 key block size table 3 shows structure key block blockchain global chain scalable 50 million transactions day times expected usage size key block determined block data transaction data 5 keyblock size d t 5 d block data t transaction data calculating expected blocksize following assumptions xe2 x80 xa2 99 98% transactions anchoring transactions table 5 main use global blockchain x0c15 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 0 02% issue certificate transactions table 7 transactions infrequent neglected transactions uniformly distributed blocks average key block minute generated day 1440 key blocks created block data 277 bytes big table 3 assumptions previously size transaction data calculated equation 6 t ransaction data size n xc2 xb7 0 9998 xc2 xb7 0 0002 xc2 xb7 c 6 size anchor transaction table 5 c size issue certificate transaction table 7 n transaction block makes total size key block 3 8mb 17 2 growth aggregation 3 8mb block 1440 blocks day blockchain grow 5 47gb day 2tb year blockchain continuously run capacity expected usage average 10 million transactions growing blockchain 1 1gb day results 3 65 billion transaction 400gb year bitcoin 340 million transactions total 80 takes 7 days synchronize genesis depending network hardware speed billions transactions naively mean waiting weeks months global blockchain synchronize goals aggregating transactions require 20 minutes synchronization year depending network hardware speed 365 summery blocks year node able process summery block 3 seconds second summary block blocks final nodes consider forks point regardless longest chain means transactions previous 500 1000 key blocks stored removing transaction data key blocks stored summary block key block size reduced 11 3mb 277 bytes making negligible compared summary blocks 17 5 17 6 xe2 x80 xa2 xe2 x80 xa2 segregated witness segregated witness strategy employed bitcoin reduce data block 81 separating transaction data needs processed data verify transaction block second called witness data containing signatures things finality guarantee blocks sufficiently deep removed blockchain regardless probabilistic finality protocol finality witness data longer useful block guaranteed reverted nodes free remove witness data blocks reached finality saving disk space xe2 x80 x99ve built logic segregated witness concept summary blocks 17 4 aggregation aggregation blocks special blocks created 1440 blocks day contain aggregated values blocks previous summary block replaying chain summary blocks need applied close current state blocks created summary block replayed decreases replay time significantly summary block size summary blocks contain information non anchor transactions aggregated version transaction fees token transfers larger blocks especially compared key blocks reduce memory transaction fees token transfer transactions reduced balance change participant table 4 aggregation summary contain transactions calculate expected size summary block following assumptions xe2 x80 xa2 17 3 difference pruning glance approach similarities blockchain pruning maintain limited set transactions danger pruning introduction falsified state threatening immutability nature danger comes distributing state blockchain segregated witness transactions applied signature validation relying concept finality node needs apply transactions genesis calculate current state actual transaction data calculate block xe2 x80 x99s signature stored attachment block table 2 events transactions key blocks blockchain xe2 x80 x99t ignored transactions applied validation aggregating holds little risk total 200000 participants day 1 summary block created based assumptions previous section assume balance change summary significant summary block assumptions size summary block calculated equation 7 results 10 3mb summary block size t ransaction summary p xc2 xb7 e 7 p participants 1500 blocks e size balance change summary entry table 4 17 7 total size total size blockchain consists parts static growing static consists 1000 key blocks contain attachment data 5 static n xc2 xb7 k n keyblocks stored transaction data k size keyblock 5 8 x0c16 equation 8 results total size static 11 3gb 1000 blocks stored completely means including transactions size differ slightly won xe2 x80 x99t grow noticeably growing consists summary blocks 7 left key blocks transaction data removed xe2 x80 x99ll define size growth year equation 9 growing n xc2 xb7 k m xc2 xb7 s 9 n number keyblocks year m number summaryblocks year k size keyblock transaction data s size summaryblock 7 following previously assumptions result blockchain growing 3 7gb year 17 8 history nodes nodes required delete old transactions maintaining transactions history nodes able prove correctness blockchain case xe2 x80 x99s needed history nodes unable pass falsified history blocks history node need match nodes network rely relatively small history nodes chain benefit running history node doesn xe2 x80 x99t increase chance forging new blocks running node community interest secondary income 18 n etwork 18 1 vulnerability importance inflation particular worry poi inflation importance dummy transactions calculate profit loss spam transactions formula maximum raffle factor xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 raffle factor r percentage staked tokens bi cost transaction c total transactions network n spam transactions xcf x84 rewards p profit loss spam xe2 x88 x86p prmax xe2 x88 x92 pr 1 costs undesirable aid attacker trying undermine network 51% attack maximum raffle factor 1 5 ensures high cost inflating importance 18 2 stake stake principle assumption nodes continue build forks picking longest chain downside 82 nodes display ill behavior attacker need small percentage tokens force network switch chain 1% attack situation tragedy commons 83 parties seek individual gain abusing system everybody benefits instead leads undermining network causing decrease value underlying token waves fair pos lot difficult unpublished orphaned branch catch main branch 74 possibility profiting behavior bad actors hold small percentage tokens neglectable bad actor need create maintain altered version node costs combined knowledge little chance benefiting disincentivize behavior 84 18 3 lpos centralization projects implemented lpos algorithm tend lead high level centralization effect explained reward token professional setup near 100% uptime miss forging opportunity yielding reward set tokens staked draws token holders lease nodes reinforcing effect reduced overhead allows higher payouts lessors limiting number tokens node flawed method enabling opportunity sybil attack 85 permissionless reputation system single node advert multiple pseudonymous identities circumventing limitation nature solution means majority transactions signed key pair associated node network consist relatively large number nodes effect pos poi gives platform users advantage non user token holders additional measure limitation leveraging leased tokens node needs 10% tokens stakes p r xc2 xb7 bi xc2 xb7 n xc2 xb7 c xe2 x88 x92 xcf x84 xc2 xb7 c 10 r 1 xcf x84 0 xe2 x86 x92 p bi xc2 xb7 n xc2 xb7 c 11 18 4 12 limited scalability xe2 x80 x99s fairly easy overload public blockchain transactions transaction fees primary defense sorts attacks transactions need verified conclude insufficient funds decent funds xe2 x80 x99s possible overload network spam transactions seen ethereum july 2018 nodes option automatically increase transactions fees case attachment ideally nodes gain staking spend transactions spam tokens increase rewards transaction fees automatically counter attack r rmax xcf x84 bi xc2 xb7 n xe2 x86 x92 rmax xe2 x88 x92 1 xc2 xb7 bi xc2 xb7 n xc2 xb7 c gives xe2 x88 x86p rmax xe2 x88 x92 2 xc2 xb7 bi xc2 xb7 n xc2 xb7 c 13 bi 0 n 0 c 0 xe2 x88 x86p 0 xe2 x86 x92 rmax xe2 x88 x92 2 0 14 rmax 2 15 given equation 15 proves xe2 x80 x99s impossible gain directly spam transactions maximum raffle factor raffle factor close spam transactions nearly free increasing importance network little denial service attack x0c17 18 5 sha 2 vulnerability 2017 sha 1 proven vulnerable google research lab managed find collision different documents resulted hash 86 sha 2 256bit similar vulnerability devastating anchoring based merkle tree collision found claim colliding document notarized worse given merkle root random hash able generate valid merkle path allow hacker verify document trivial task branch tree hashes need combined exactly 32 bytes long bruteforcing specific sha 1 require computations achieve lifetime birthday paradox results fewer computations required find collision birthday paradox applies lto public chain merkle roots maximum number merkle paths overcome verification fall history nodes case verification disputed reduces overall uses anchoring nodes instead secondary merkle tree added sha 2 hash hashed algorithm like sha 3 blake2 simply double hashing isn xe2 x80 x99t useful xe2 x80 x99s possible falsify merkle vulnerability outer algorithm required exploit merkle trees algorithms need broken collision needs found trees single block removing birthday paradox advantage x0c18 iii platform 19 rchitecture 19 1 micro architecture lto node developed microservices architecture pattern means functionality node split microservices service responsible small entire node advantages pattern xe2 x80 xa2 failure isolation service fails won xe2 x80 x99t necessarily interfere services xe2 x80 xa2 scalability services node decoupled run different machines makes suitable horizontal scaling scaling automated found description section 24 xe2 x80 xa2 flexibility certain functionality flourishes better certain programming languages service developed different programming language xe2 x80 xa2 code quality splitting node small welldefined modules easier developers read review leads better code quality microservices grouped docker container containers run kubernetes container orchestration platform described section 24 microservice designed run independently means shared dependencies container xe2 x80 x99s database event queue microservices designed operate statelessly easily scalable 19 2 application layers services described section 19 1 node split services services grouped 4 different layers node consists following layers xe2 x80 xa2 ui layer consists ui applications interact application layer xe2 x80 xa2 application layer contains services handle actions triggered events event chain xe2 x80 xa2 private chain layer takes care decoupling node xe2 x80 xa2 public chain layer manages public chain service global public blockchain optimized storing hashes node indexes hashes easily verified 21 2 actual creation execution live contracts workflow service event received event chain service contains action live contract sent workflow service workflow service execute action lead state transition workflow new projection workflow projection stored mongodb database 22 p rivate ui l ayer ui layer contains frontend applications enable users easily develop debug live contracts chain viewer chain viewer allows users connect specific node list chains user list view chains second application playground application playground application lets users develop live contract scenarios visualizes scenario state diagram contains visualization verification tools 21 pplication l ayer 21 1 web server web server application serves proxy frontend applications node web server performs functions xe2 x80 xa2 authentication requests services xe2 x80 xa2 proxies requests correct service chain layer private chain layer decouples node decoupling ensures stable system case bad connectivity high load message queue communication layer private chain technology providing message queue rabbitmq rabbitmq lightweight message broker perfectly suited deliver messages node nodes rabbitmq function called shovel shovel dynamically setup connection rabbitmq broker exchanges messages mechanism send events node services manage inbound outbound events 22 1 eventchain service service manages private chains event chain service service processes incoming events processing events services following steps xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 validate incoming event s checking xe2 x80 x99s correctly signed chain isn xe2 x80 x99t broken validate chain matches locally stored chain performs conflict resolution possible event s sent identity belongs node execute received event s store database new identity added different node chain forwarded node new events forwarded related nodes storage event chain service uses mongodb database 22 2 20 workflow engine event enqueue service event enqueue service small task putting events event queue services node e g workflow service event service external users 22 3 event dispatch service messages event queue handled event dispatch service picks messages distributes event service event service processes message marked handled moved dead letter queue x0c19 23 23 1 p ublic chain layer anchor service anchor service heart public chain anchor service fork nxt platform extended ng protocol anchor service extended able handle xe2 x80 x99normal xe2 x80 x99 transactions data transactions data transactions store hashes events private chains described section 16 1 hashes collected daily merged deterministically merkle tree way data transactions removed storage reduce storage footprint people able verify hash existed able verify certain hash stored hashes indexed way verification faster won xe2 x80 x99t search data transactions 24 c ontainer orchestration node build multiple microservices container orchestration platform required manage running containers container orchestration platforms care tasks provisioning hosts instantiating containers restarting failed containers scaling cluster adding removing containers different container orchestration tools purpose like docker swarm mesos nomad kubernetes initially configuration file included kubernetes service configured run pod load balancer individual services scale independently scaling services managed horizontal pod autoscaler 87 x0creferences r eferences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 hannah ritchie max roser technological progress https www ft com content cb56d86c 88d6 11e7 afd2 74b8ecd34d3b accessed 03 06 2018 2017 christine legner kristin wende xe2 x80 x9cthe challenges inter organizational business process design xe2 x80 x93 research agenda xe2 x80 x9d 2007 benjamin e hermalin michael l katz xe2 x80 x9cmoral hazard verifiability effects renegotiation agency xe2 x80 x9d 1990 audun j xc3 xb8sang xe2 x80 x9cthe right type trust distributed systems xe2 x80 x9d proceedings 1996 workshop new security paradigms acm 1996 pp 119 xe2 x80 x93131 israel z ben shaul gail e kaiser xe2 x80 x9ca paradigm decentralized process modeling realization oz environment xe2 x80 x9d proceedings 16th international conference software engineering ieee computer society press 1994 pp 179 xe2 x80 x93188 ray fisman roberta gatti xe2 x80 x9cbargaining bribes role institutions xe2 x80 x9d international handbook economics corruption 2006 pp 127 xe2 x80 x93139 jo xcc x88rg becker michael rosemann christoph von uthmann xe2 x80 x9cguidelines business process modeling xe2 x80 x9d business process management springer 2000 pp 30 xe2 x80 x9349 manfred reichert thomas bauer peter dadam xe2 x80 x9centerprise wide cross enterprise workflow management challenges research issues adaptive workflows xe2 x80 x9d 1999 vitalik buterin xe2 x80 x9cethereum white paper nextgeneration smart contract decentralized application platform xe2 x80 x9d 2013 vitalik buterin karthik gollapudi generation smart contract decentralized application platform https github com ethereum wiki wiki white paper f18902f4e7fb21dc92b37e8a0963eec4b3f4793a accessed 22 05 2018 ian grigg xe2 x80 x9cthe ricardian contract xe2 x80 x9d 2004 nick sabo xe2 x80 x9cformalizing securing relationships public networks xe2 x80 x9d 1997 telser xe2 x80 x9ca theory self enforcing agreements xe2 x80 x9d 1980 david joulfaian douglas holtz eakin harvey s rosen xe2 x80 x9csticking entrepreneurial survival liquidity constraints xe2 x80 x9d 1993 toshi wallet supports erc20 tokens erc721 collectibles https blog toshi org toshi wallet supports erc20 tokens erc721 collectibles e718775895aa accessed 30 08 2018 erc 20 token standard https eips ethereum org eips eip 20 accessed 30 08 2018 daniel ia cohen daniel ia cohen introduction computer theory vol 2 wiley new york 1991 marko vukolic xcc x81 xe2 x80 x9crethinking permissioned blockchains xe2 x80 x9d proceedings acm workshop blockchain cryptocurrencies contracts acm 2017 pp 3 xe2 x80 x937 abdulsalam kalaji rob mark hierons stephen swift xe2 x80 x9ca search based approach automatic test generation extended finite state machine efsm xe2 x80 x9d testing academic industrial conference practice research techniques 2009 taic xe2 x80 x9909 ieee 2009 pp 131 xe2 x80 x93132 m g gouda e g manning y t yu xe2 x80 x9con progress communication finite state machines xe2 x80 x9d 1984 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 g pace j schapachnik xe2 x80 x9ccontracts interacting party systems xe2 x80 x9d 2012 mark d flood oliver r goodenough xe2 x80 x9ccontract automaton computational representation financial agreements xe2 x80 x9d 2015 davide basile pierpaolo degano gian luigi ferrari xe2 x80 x9cautomata service contracts xe2 x80 x9d 2014 pierpaolo degano davide basile gian luigi ferrari xe2 x80 x9cfrom orchestration choreography contract automata xe2 x80 x9d 2014 ian ayres robert gertner xe2 x80 x9cfilling gaps incomplete contracts economic theory default rules xe2 x80 x9d 1989 jan l g dietz xe2 x80 x9cunderstanding modeling business processes demo xe2 x80 x9d 1999 youngjoon byun beverly sanders chang sup keum xe2 x80 x9cdesign patterns communicating extended finite state machines sdl xe2 x80 x9d 2001 petri xe2 x80 x9ckommunikation mit automaten xe2 x80 x9d 1962 dennis kafura notes petri nets http people cs vt edu kafura computationalthinking class notes petri net notes expanded pdf accessed 01 09 2018 wil m p van der aalst xe2 x80 x9cthe application petri nets workflow management xe2 x80 x9d 1998 jan recker et al xe2 x80 x9chow good bpmn insights theory practice xe2 x80 x9d 2006 wil m p van der aalst et al xe2 x80 x9clife bpel xe2 x80 x9d 2005 luciano garc xc4 xb1 xcc x81a ban xcc x83uelos et al xe2 x80 x9coptimized execution business processes blockchain xe2 x80 x9d 2017 jan l g dietz xe2 x80 x9cdemo discipline organisation engineering xe2 x80 x9d 1999 jsonforms react https jsonforms io accessed 3008 2018 jsonform bootstrap 3 https github com jsonform jsonform accessed 30 08 2018 mozilla react jsonschema form https github com mozilla services react jsonschema form accessed 3008 2018 angular schema form http schemaform io accessed 30 08 2018 open document format http www opendocumentformat org accessed 30 08 2018 sindhu sajana sethumadhavan xe2 x80 x9con blockchain applications hyperledger fabric ethereum xe2 x80 x9d 2018 stephen cook xe2 x80 x9cthe complexity theorem proving procedures xe2 x80 x9d proceedings annual acm symposium theory computing acm 1971 pp 151 xe2 x80 x93158 daniel brand pitro zafiropulo xe2 x80 x9con communicating finite state machines xe2 x80 x9d journal acm jacm 30 2 1983 pp 323 xe2 x80 x93342 robert m hierons abdulsalam kalaji stephen swift xe2 x80 x9cnew approaches passive testing extended finite state machine specification xe2 x80 x9d 2003 o sury r edmonds edwards curve digital security algorithm eddsa dnssec tech rep 2017 nist transition plans key establishment schemes public key cryptography https csrc nist gov news 2017 transition plans key establishment schemes accessed 13 07 2018 2017 daniel j bernstein et al xe2 x80 x9chigh speed high security signatures xe2 x80 x9d journal cryptographic engineering 2 2 2012 pp 77 xe2 x80 x9389 issn 2190 8516 doi 10 1007 s13389 012 0027 1 url https doi org 10 1007 s13389 012 00271 x0c21 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 henri gilbert helena handschuh xe2 x80 x9csecurity analysis sha 256 sisters xe2 x80 x9d international workshop selected areas cryptography springer 2003 pp 175 xe2 x80 x93193 nist nist policy hash functions https csrc nist gov projects hash functions nist policy hashfunctions accessed 13 07 2018 2015 bruce schneier john kelsey xe2 x80 x9ccryptographic support secure logs untrusted machines xe2 x80 x9d usenix security symposium vol 98 1998 pp 53 xe2 x80 x9362 peter bailis ali ghodsi xe2 x80 x9ceventual consistency today limitations extensions xe2 x80 x9d queue 11 3 2013 p 20 andrew s tanenbaum maarten van steen distributed systems principles paradigms prentice hall 2007 miguel castro barbara liskov byzantine fault tolerance patent 6 671 821 2003 satoshi nakamoto bitcoin peer peer electronic cash system https bitcoin org bitcoin pdf accessed 17 052018 aggelos kiayias et al xe2 x80 x9couroboros provably secure proof stake blockchain protocol xe2 x80 x9d annual international cryptology conference springer 2017 pp 357 xe2 x80 x93388 poa network proof authority consensus model identity stake https medium com poa network proof authority consensus model identity atstake d5bd15463256 accessed 17 05 2018 git documentation git branching rebasing https git scm com book en v2 git branching rebasing accessed 09 08 2018 aaron van wirdum xe2 x80 x9crejecting today xe2 x80 x99s hard fork ethereum classic project continues original chain xe2 x80 x99s xe2 x80 x9d bitcoin magazine 20 2016 european parliament regulation eu 2016 679 european parliament council protection natural persons regard processing personal data free movement data repealing directive 95 46 ec general data protection regulation https eur lex europa eu legalcontent en txt html uri celex 32016r0679 en accessed 12 07 2018 2016 olly jackson xe2 x80 x9cis possible comply gdpr blockchain xe2 x80 x9d international financial law review 2018 s goldwasser s micali c rackoff xe2 x80 x9cthe knowledge complexity interactive proof systems xe2 x80 x9d 1989 blockchain costs transaction https www blockchain com charts cost transaction accessed 05 09 2018 emanuel palm implications impact blockchain transaction pruning 2017 wenting li et al xe2 x80 x9ctowards scalable private industrial blockchains xe2 x80 x9d proceedings acm workshop blockchain cryptocurrencies contracts acm 2017 pp 9 xe2 x80 x9314 serguei popov xe2 x80 x9ca probabilistic analysis nxt forging algorithm xe2 x80 x9d ledger 1 2016 pp 69 xe2 x80 x9383 waves platform waves whitepaper https blog wavesplatform com waves whitepaper 164dd6ca6a23 accessed 16 07 2018 2016 chainpoint node api create chainpoint proof https github com chainpoint chainpoint node wiki chainpoint node api create chainpointproof accessed 05 09 2018 gleb kostarev review blockchain consensus mechanisms https blog wavesplatform com review blockchainconsensus mechanisms f575afae38f2 accessed 13 072018 2017 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 nem nem technical reference https nem io wp content themes nem files nem techref pdf accessed 13 07 2018 2018 lto xe2 x80 x9clto token economy xe2 x80 x9d 2018 waves platform blockchain leasing proof stake https blog wavesplatform com blockchain leasing proof stake bac5335de049 accessed 13 07 2018 2018 mthcl xe2 x80 x9cthe math nxt forging xe2 x80 x9d 2014 waves generators http dev pywaves org generators accessed 28 08 2018 nxt blockchain explorer https nxtportal org monitor accessed 28 08 2018 kofman begicheva xe2 x80 x9cfair proof stake xe2 x80 x9d 2018 waves ng stress test results https blog wavesplatform com waves ng stress test results 44090f59bb15 accessed 05 09 2018 s haber w s j stornetta xe2 x80 x9chow time stamp digital document xe2 x80 x9d 1991 ralph c merkle xe2 x80 x9cmethod providing digital signatures xe2 x80 x9d u s pat 4309569 jan 5 1982 begicheva smagin xe2 x80 x9cride smart contract language waves xe2 x80 x9d pat 2018 saifedean ammous xe2 x80 x9cblockchain technology good xe2 x80 x9d 2016 blockchain number transaction https www blockchain com en charts n transactions total accessed 05 092018 bip 141 segregated witness consensus layer https github com bitcoin bips blob master bip 0141 mediawiki accessed 05 09 2018 problems ethereum https github com ethereum wiki wiki problems accessed 30 08 2018 g hardin xe2 x80 x9cthe tragedy common xe2 x80 x9d 1969 considered look stake vulnerability cryptocurrencies https pivx org considered look stake vulnerability cryptocurrencies accessed 30 08 2018 john r douceur xe2 x80 x9cthe sybil attack xe2 x80 x9d international workshop peer peer systems springer 2002 pp 251 xe2 x80 x93260 marc stevens et al xe2 x80 x9cthe collision sha 1 xe2 x80 x9d 2017 kubernetes kubernetes horizontal pod autoscaling https github com kubernetes community blob master contributors design proposals autoscaling horizontalpod autoscaler md accessed 03 08 2018 x0c22 1 2 3 4 5 6 7 8 9 10 field version timestamp parent block signature consensus block length base target generation signature transaction list hash anchor merkle root generator public key block xe2 x80 x99s signature length 1 8 64 4 8 32 32 32 32 64 table 1 key block structure 1 2 xc2 xb7 xc2 xb7 xc2 xb7 2 k 1 field transactions x transaction 1 bytes xc2 xb7 xc2 xb7 xc2 xb7 transaction k bytes length 4 113 xc2 xb7 xc2 xb7 xc2 xb7 113 table 2 key block attachment 1 2 3 4 5 6 7 8 xc2 xb7 xc2 xb7 xc2 xb7 8 k xe2 x88 x92 1 9 k xe2 x88 x92 1 xc2 xb7 xc2 xb7 xc2 xb7 9 k xe2 x88 x92 1 n xe2 x88 x92 1 10 k xe2 x88 x92 1 n xe2 x88 x92 1 11 k xe2 x88 x92 1 n xe2 x88 x92 1 field version timestamp parent block signature consensus block length base target generation signature transaction list hash transaction 1 bytes xc2 xb7 xc2 xb7 xc2 xb7 transaction k bytes balance change summary entry 1 xc2 xb7 xc2 xb7 xc2 xb7 balance change summary entry n generator public key block xe2 x80 x99s signature table 3 summary block structure 2 3 field wallet address balance change length 32 8 table 4 balance summary entry 1 2 3 4 5 field transaction type anchor hash fee timestamp signature length 1 32 8 8 64 table 5 anchor transactions structure 1 2 3 4 5 6 7 field transaction type sending address receiving address fee timestamp signature length 1 32 32 8 8 8 64 table 6 transfer transaction structure length 1 8 64 4 8 32 32 todo xc2 xb7 xc2 xb7 xc2 xb7 todo 40 table 4 xc2 xb7 xc2 xb7 xc2 xb7 40 table 4 32 64 x0c23 1 2 3 4 5 6 7 8 9 field transaction type id sending address receiving address expiration date certificate type fee timestamp signature length 1 32 32 32 8 32 8 8 64 table 7 issue certificate transaction structure 1 2 3 4 5 6 field transaction type id new expiration date fee timestamp signature length 1 32 8 8 8 64 table 8 update certificate transaction structure 1 2 3 4 5 6 7 field transaction type sending address receiving address fee timestamp signature length 1 32 32 8 8 8 64 table 9 lease transaction structure 1 2 3 4 5 6 7 field transaction type sending address receiving address fee timestamp signature length 1 32 32 8 8 8 64 table 10 cancel lease transaction structure x0c