b chainlink decentralized oracle network steve ellis ari juels xe2 x80 xa0 sergey nazarov 4 september 2017 v1 0 abstract smart contracts poised revolutionize industries replacing need traditional legal agreements centrally automated digital agreements performance verification execution rely manual actions contracting parties automated system programmatically retrieves updates relevant changes unfortunately underlying consensus protocols blockchains smart contracts run support native communication external systems today solution problem introduce new functionality called oracle provides connectivity outside world existing oracles centralized services smart contract services single point failure making secure traditional centrally run digital agreement paper present chainlink decentralized oracle network describe chain components chainlink provides contracts gain external connectivity software powering nodes network present simple chain contract data aggregation system efficient chain consensus mechanism describe supporting reputation security monitoring services chainlink help users informed provider selections achieve robust service aggressively adversarial conditions finally characterize properties ideal oracle guidance security strategy lay possible future improvements including richly featured oracle programming data source infrastructure modifications confidential smart contract execution 1 x0ccontents 1 introduction 3 2 architectural overview 2 1 chain architecture 2 2 chain architecture 4 5 6 3 oracle security 7 4 chainlink decentralization approach 4 1 distributing sources 4 2 distributing oracles 11 11 11 5 chainlink security services 5 1 validation system 5 2 reputation system 5 3 certification service 5 4 contract upgrade service 5 5 link token usage 16 16 17 19 20 21 6 long term technical strategy 6 1 confidentiality 6 2 infrastructure changes 6 3 chain computation 21 21 25 26 7 existing oracle solutions 26 8 conclusion 27 chain aggregation 1 oca protocol 2 proof sketches 3 discussion 33 34 36 37 b sgx trust assumptions 38 2 x0c1 introduction smart contracts applications execute decentralized infrastructure blockchain tamperproof sense party creator alter code interfere execution historically contracts embodied code run centralized manner leaves subject alteration termination deletion privileged party contrast smart contracts xe2 x80 x99 execution guarantees bind parties agreement written create new powerful type trust relationship rely trust party self verifying self executing e tamperproof explained smart contracts offer superior vehicle realizing administering digital agreements powerful new trust model smart contracts embody introduces new technical challenge connectivity vast majority interesting 27 1 smart contract applications rely data real world comes key resources specifically data feeds apis external blockchain mechanics consensus mechanisms underpinning blockchains blockchain directly fetch critical data propose solution smart contract connectivity problem form chainlink secure oracle network differentiates chainlink oracle solutions ability operate fully decentralized network decentralized approach limits trust single party enabling tamperproof quality valued smart contracts extended end end operation smart contracts apis rely making smart contracts externally aware meaning capable interacting chain resources necessary going replace digital agreements use today today lion xe2 x80 x99s share traditional contractual agreements digitally automated use external data prove contractual performance require data outputs pushed external systems smart contracts replace older contractual mechanisms require high assurance versions types data inputs outputs examples potential generation smart contracts data requirements include xe2 x80 xa2 securities smart contracts bonds interest rate derivatives require access apis reporting market prices market reference data e g interest rates 1 main use smart contracts ethereum today management tokens common functionality smart contract networks believe current focus tokens exclusion possible applications lack adequate oracle services situation chainlink specifically aims remedy 3 x0c xe2 x80 xa2 insurance smart contracts need data feeds iot data related insurable event question e g warehouse xe2 x80 x99s magnetic door locked time breach company xe2 x80 x99s firewall online flight insurance arrive time xe2 x80 xa2 trade finance smart contracts need gps data shipments data supply chain erp systems customs data goods shipped order confirm fulfillment contractual obligations problem common examples inability smart contracts output data chain systems output takes form payment message routed traditional centralized infrastructure users accounts e g bank payments paypal payment networks chainlink xe2 x80 x99s ability securely push data apis legacy systems behalf smart contract permits creation externally aware tamperproof contracts whitepaper roadmap whitepaper review chainlink architecture section 2 explain define security oracles section 3 describe chainlink approach decentralization distribution oracles data sources section 4 follow discussion security services proposed chainlink role played link tokens section 5 describe proposed long term development strategy includes better confidentiality protections use trusted hardware infrastructure changes general oracle programmability section 6 briefly review alternative oracle designs section 7 conclude short discussion design principles philosophy guiding chainlink development section 8 2 architectural overview chainlink xe2 x80 x99s core functional objective bridge environments chain offchain describe architecture chainlink component chainlink initially built ethereum 16 35 intend support leading smart contract networks chain cross chain interactions chain versions chainlink designed modularity mind piece chainlink system upgradable different components replaced better techniques competing implementations arise 4 x0c2 1 chain architecture oracle service chainlink nodes return replies data requests queries behalf user contract refer requesting contracts denote user sc chainlink xe2 x80 x99s chain interface requesting contracts chain contract denote chainlink sc chainlink sc chainlink chain component consisting main contracts reputation contract order matching contract aggregating contract reputation contract keeps track oracle service provider performance metrics order matching smart contract takes proposed service level agreement logs sla parameters collects bids oracle providers selects bids reputation contract finalizes oracle sla aggregating contract collects oracle providers xe2 x80 x99 responses calculates final collective result chainlink query feeds oracle provider metrics reputation contract chainlink contracts designed modular manner allowing configured replaced users needed chain work flow steps 1 oracle selection 2 data reporting 3 result aggregation oracle selection oracle services purchaser specifies requirements service level agreement sla proposal sla proposal includes details query parameters number oracles needed purchaser additionally purchaser specifies reputation aggregating contracts rest agreement reputation maintained chain robust set data gathered logs past contracts purchasers manually sort filter select oracles chain listing services intention chainlink maintain listing service collecting chainlink related logs verifying binaries listed oracle contracts detail listing service reputation systems section 5 data generate listings pulled blockchain allowing alternative oracle listing services built purchasers submit sla proposals oracles chain come agreement finalizing sla chain manual matching possible situations example contract need request oracle services dynamically response load automated solutions solve problem enhance usability reasons automated oracle matching proposed chainlink use order matching contracts purchaser specified sla proposal instead contacting oracles directly submit sla order matching contract submission proposal order matching contract triggers log oracle providers 5 x0cmonitor filter based capabilities service objectives chainlink nodes choose bid proposal contract accepting bids nodes meet sla xe2 x80 x99s requirements oracle service provider bids contract commit specifically attaching penalty lost misbehavior defined sla bids accepted entirety bidding window sla received qualified bids bidding window ended requested number oracles selected pool bids penalty payments offered bidding process returned oracles selected finalized sla record created finalized sla recorded triggers log notifying selected oracles oracles perform assignment detailed sla data reporting new oracle record created chain oracles execute agreement report chain detail chain interactions sections 2 2 4 result aggregation oracles revealed results oracle contract results fed aggregating contract aggregating contract tallies collective results calculates weighted answer validity oracle response reported reputation contract finally weighted answer returned specified contract function user sc detecting outlying incorrect values problem specific type data feed application instance detecting rejecting outlying answers averaging necessary numeric data boolean reason specific aggregating contract configurable contract address specified purchaser chainlink include standard set aggregating contracts customized contracts specified provided conform standard calculation interface 2 2 chain architecture chain chainlink initially consists network oracle nodes connected ethereum network intend support leading smart contract networks nodes independently harvest responses chain requests explain individual responses aggregated possible consensus mechanisms global response returned requesting contract user sc chainlink nodes powered standard open source core implementation handles standard blockchain interactions scheduling connecting common external resources node operators choose add software 6 x0cextensions known external adapters allow operators offer additional specialized chain services chainlink nodes deployed alongside public blockchains private networks enterprise settings enabling nodes run decentralized manner motivation chainlink network chainlink core core node software responsible interfacing blockchain scheduling balancing work external services work chainlink nodes formatted assignments assignment set smaller job specifcations known subtasks processed pipeline subtask specific operation performs passing result subtask ultimately reaching final result chainlink xe2 x80 x99s node software comes subtasks built including http requests json parsing conversion blockchain formats external adapters built subtask types custom subtasks defined creating adapters adapters external services minimal rest api modeling adapters service oriented manner programs programming language easily implemented simply adding small intermediate api program similarly interacting complicated multi step apis simplified individual subtasks parameters subtask schemas anticipate adapters open sourced services audited run community members different types adapters developed different developers ensuring compatibility adapters essential chainlink currently operates schema system based json schema 36 specify inputs adapter needs formatted similarly adapters specify output schema describe format subtask xe2 x80 x99s output 3 oracle security order explain chainlink xe2 x80 x99s security architecture explain security important xe2 x80 x94and means oracles secure returning simple examples section 1 smart contract security gets false data feed payout incorrect party smart contract insurance data feeds tampered insured party 7 x0cfigure 1 chainlink workflow 1 user sc makes chain request 2 chainlink sc logs event oracles 3 chainlink core picks event routes assignment adapter 4 chainlink adapter performs request external api 5 chainlink adapter processes response passes core 6 chainlink core reports data chainlink sc 7 chainlink sc aggregates responses passes single response user sc insurance fraud gps data given trade finance contract modified leaves data provider payment released goods haven xe2 x80 x99t arrived generally functioning blockchain ledger bulletin board abstraction offers strong security properties users rely blockchain functionality correctly validates transactions prevents data altered treat effect like trusted party concept discuss length supporting oracle service offer level security commensurate blockchain supports oracle serve users effective trusted party providing correct timely responses high probability security system strong weakest link highly trustworthy oracle required preserve trustworthiness wellengineered blockchain defining oracle security ideal view order reason oracle security define instructive principled way reason oracle security stems following thought experiment imagine trusted party ttp xe2 x80 x94an ideal entity functionality carries instructions faithfully letter xe2 x80 x94were tasked running oracle xe2 x80 x99ll denote oracle oracle caps general denote entity fully trusted users suppose ttp obtains data perfectly trustworthy data source src given magical service oracle instructions ask carry achieve property integrity referred authenticity property 24 simply ask oracle perform following steps 8 x0cfigure 2 behavior ideal oracle oracle defined steps 1 accept request 2 obtain data 3 return data additionally protect confidentiality request decrypting oracle uses reveals data contains query src 1 accept request ingest smart contract user sc request req src xcf x84 q specifies target data source src time range times xcf x84 query q 2 obtain data send query q src time xcf x84 3 return data receiving answer return smart contract simple instructions correctly carried define strong meaningful simple notion security intuitively dictate oracle acts trustworthy bridge src user sc 2 example src https www fountofknowledge com xcf x84 4 p m q xe2 x80 x9cprice ticker intc xe2 x80 x9d integrity oracle guarantees provide user sc exactly price intc queried 4 p m https www fountofknowledge com confidentiality desirable property oracles user sc sends req oracle clear blockchain req public situations req sensitive publication harmful user sc flight insurance contract example sends oracle query req particular user xe2 x80 x99s flight q xe2 x80 x9cether air flight 338 xe2 x80 x9d result user xe2 x80 x99s flight plans revealed world user sc contract 2 course details omitted oracle communicate user sc source src secure e tamperproof channels src web server tls required communicate user sc oracle sure scrape right blockchain digitally sign appropriately 9 x0cfinancial trading req leak information user xe2 x80 x99s trades portfolio examples course protect confidentiality req require data req encrypted public key belonging oracle continuing leverage ttp nature oracle simply oracle information flow constraint decrypting req reveal use data req query src important oracle properties availability classical cia confidentiality integrity availability triad truly ideal service oracle course availability encompasses subtle properties censorship resistance honest oracle single particular smart contracts deny requests concept trusted party similar notion ideal functionality 7 prove security cryptographic protocols certain models model blockchain similar terms conceptualizing terms ttp maintains ideal bulletin board instructions accept transactions validate serialize maintain permanently bulletin board append data structure ideal oracle oracle hard achieve course perfectly trustworthy data source src data benignly maliciously corrupted faulty web sites cheating service providers honest mistakes src isn xe2 x80 x99t trustworthy oracle operate exactly like ttp instructed doesn xe2 x80 x99t completely meet notion security want given faulty source src integrity property defined longer means oracle xe2 x80 x99s answer correct true price intel $40 https www fountofknowledge com misreports $50 example oracle send incorrect value $50 user sc problem unavoidable single source src oracle simply way know answers src provides queries correct bigger issue course fact ttp oracle abstraction service provider unconditionally trustworthy best intentioned buggy hacked way user smart contract absolute assurance service oracle carry instructions faithfully chainlink reasons security protocols terms ideal functionality oracle goal chainlink achieve real world system properties close possible oracle realistic trust assumptions explain simplicity follows denote chainlink sc complete set chainlink contracts e chain functionality interface 10 x0cto requesting contracts abstract away multiple individual contracts actually system architecture 4 chainlink decentralization approach propose basic complementary approaches ensuring faulty nodes 1 distribution data sources 2 distribution oracles 3 use trusted hardware discuss approaches involve decentralization section discuss long term strategy trusted hardware different complementary approach section 6 4 1 distributing sources simple way deal faulty single source src obtain data multiple sources e distribute data source trustworthy oracle query collection sources src1 src2 srck obtain responses a1 a2 ak aggregate single answer agg a1 a2 ak oracle number ways example majority voting majority sources return identical value function agg returns returns error case provided majority k 2 sources functioning correctly oracle return correct value alternative functions agg ensure robustness erroneous data handle fluctuations data values time e g stock prices example agg discard outliers e g largest smallest values ai output mean remaining ones course faults correlated data sources way weakens assurances provided aggregation site src1 echoecho com obtains data src2 thehorsesmouth com error src2 imply error src1 subtle correlations data sources occur chainlink proposes pursue research mapping reporting independence data sources easily digestible way oracles users avoid undesired correlations 4 2 distributing oracles sources distributed ideal service oracle approximated distributed system instead single monolithic oracle node o instead collection n different oracle nodes o1 o2 oracle oi contacts distinct set data sources 11 x0cfigure 3 requests distributed oracles data sources figure shows example level distribution overlap oracles oi aggregates responses data sources outputs distinct answer ai query req oracles faulty clearly set oracles xe2 x80 x99 answers a1 a2 need aggregated trustworthy way single authoritative value given possibility faulty oracles aggregation happen chainlink initial solution contract aggregation initial proposed solution chainlink simple called contract aggregation chainlink sc xe2 x80 x94 denotes chain chainlink xe2 x80 x94will aggregate oracle responses alternatively chainlink sc aggregation contract conceptual simplicity assume components form single contract words chainlink sc compute agg a1 a2 function agg similar agg described send result user sc approach practical small n distinct benefits xe2 x80 xa2 conceptual simplicity despite fact oracle distributed single entity chainlink sc performs aggregation executing agg xe2 x80 xa2 trustworthiness chainlink sc xe2 x80 x99s code publicly inspected correct behavior verified chainlink sc relatively small simple piece code additionally chainlink sc xe2 x80 x99s execution fully visible 12 x0cchain users e creators user sc achieve high degree trust chainlink sc xe2 x80 xa2 flexibility chainlink sc implement desired aggregation functions agg xe2 x80 x94the majority function averaging etc simple approach presents novel interesting technical challenge problem freeloading cheating oracle oz observe response ai oracle oi copy way oracle oz avoids expense querying data sources charge query fees freeloading weakens security undermining diversity data source queries disincentivizes oracles responding quickly responding slowly freeloading cheaper strategy suggest known solution problem use commit reveal scheme round oracles send chainlink sc cryptographic commitments responses chainlink sc received quorum responses initiates second round oracles reveal responses algorithm 1 shows simple sequential protocol guarantees availability given 3f 1 nodes uses commit reveal scheme prevent freeloading oracle responses decommitted exposed potential freeloader commitments excluding freeloader copying oracles xe2 x80 x99 responses chain protocols leverage block times support synchronous protocol designs chainlink oracle nodes obtain data sources highly variable response times decommitment times nodes vary e g use different gas prices ethereum ensure fastest possible protocol responsiveness alg 1 designed asynchronous protocol commitr denotes commitment value witness r sid denotes set valid session ids protocol assumes authenticated channels players easy alg 1 terminate successfully given 3f 1 nodes total f faulty 2f 1 send commitments step 4 commitments f come faulty nodes f 1 come honest nodes commitments eventually decommitted additionally easy correct alg 1 f 1 decommitments single value come honest node contract aggregation alg 1 main approach supported chainlink short term proposed initial implementation involve sophisticated concurrent variant algorithm longer term proposal reflected complicated protocol oca chain aggregation specified algorithms 2 3 appendix oca chain aggregation protocol 13 x0calgorithm 1 inchainagg oi ni 1 code chainlink sc wait req received user sc sid xe2 x86 x90$ sid broadcast request sid wait set c 2f 1 messages commit ci commitri ai sid distinct oi received 5 broadcast committed sid 6 wait set d f 1 distinct valid decommitments decommit ri ai sid received ai 7 send answer sid user sc 1 2 3 4 minimizes chain transaction costs protocol includes payment oracle nodes ensures payments freeloaders medium term strategy chain aggregation contract aggregation key disadvantage cost incurs cost transmitting processing onchain o n oracle messages commits reveals a1 a2 permissioned blockchains overhead acceptable permissionless blockchains onchain transaction fees ethereum n large costs prohibitive cost effective approach aggregate oracle responses chain transmit single message chainlink sc propose deployment approach called chain aggregation medium long term problem achieving consensus value face potentially faulty nodes like problem consensus underpins blockchains given predetermined set oracles consider classical byzantine fault tolerant bft consensus algorithm compute classical bft protocols aim ensure end protocol invocation honest nodes store value e g blockchain nodes store fresh block oracle setting goal slightly different want ensure chainlink sc user sc obtains aggregate answer agg a1 a2 participating consensus protocol needing receive answers multiple oracles problem freeloading needs addressed chainlink system proposes use simple protocol involving threshold signatures signatures realized number signature schemes especially simple implement schnorr signatures 4 approach oracles collective public key pk corresponding private key sk shared o1 o2 t n threshold manner 3 sharing means node oi distinct private public keypair ski pki oi 14 x0cfigure 4 sigsk achieved n 2 1 oracles generate partial signature xcf x83i sigski ai verified respect pki key feature setup partial signatures value aggregated set t oracles yield single valid collective signature xce xa3 sigsk answer set t xe2 x88 x92 1 oracles produce valid signature value single signature xce xa3 implicitly embodies partial signatures t oracles threshold signatures realized na xc3 xafvely letting xce xa3 consist explicitly set t valid independent signatures individual nodes threshold signatures similar security properties na xc3 xafve approach provide significant onchain performance improvement reduce size cost verifying xce xa3 factor t setup oracles generate broadcast partial signatures t partial signatures enable computation xce xa3 problem freeloading arises ensure oracles genuinely obtain data designated sources cheating copying ai oracle solution involves financial mechanism entity provider realizable smart contract rewards oracles sourced original data partial signatures distributed setting determining oracles qualify payment turns tricky oracles intercommunicate chain longer single authoritative entity chainlink sc receiving responses un 15 x0cable identify eligible payees directly participating oracles consequently provider obtain evidence misbehavior oracles untrustworthy propose use consensus like mechanisms solution chainlink ensure provider pay freeloading oracles chain aggregation system propose chainlink accompanying security proof sketches found appendix makes use distributed protocol based threshold signatures provides resistance freeloading f n 3 oracles believe resistance freeloading interesting new technical problem 5 chainlink security services thanks protocols described previous section chainlink proposes ensure availability correctness face f faulty oracles additionally trusted hardware discussed section 6 actively considered secure approach protecting corrupted oracles providing incorrect responses trusted hardware provide definitive protection reasons deployed initial versions chainlink network second users trust trusted hardware appendix b discussion finally trusted hardware protect node downtime node misbehavior users wish ensure choose reliable oracles minimize probability user sc relying f faulty oracles end propose use key security services validation system reputation system certification service contract upgrade service services initially run company group interested launching chainlink network designed operate strictly accordingly chainlink xe2 x80 x99s philosophy decentralized design chainlink xe2 x80 x99s proposed security services block oracle node participation alter oracle responses services provide ratings guidance users contract upgrade service entirely optional users additionally services designed support independent providers participation encouraged users eventually multiple security services choose 5 1 validation system chainlink validation system monitors chain oracle behavior providing objective performance metric guide user selection oracles seek monitor oracles 16 x0c xe2 x80 xa2 availability validation system record failures oracle respond timely way queries compile ongoing uptime statistics xe2 x80 xa2 correctness validation system record apparent erroneous responses oracle measured deviations responses provided peers 3 initial chain aggregation system chainlink monitoring straightforward oracle activity visible chainlink sc recall chain aggregation system envisaged chainlink xe2 x80 x99s oracles perform aggregation consequently chainlink sc direct visibility oracle responses monitor availability correctness fortunately oracles digitally sign responses effect generate non repudiable evidence answers proposed approach realize validation service smart contract reward oracles submitting evidence deviating responses words oracles incentivized report apparently erroneous behavior availability somewhat trickier monitor oracles course don xe2 x80 x99t sign failures respond instead proposed protocol enhancement require oracles digitally sign attestations set responses received oracles validation contract accept reward submission sets attestations demonstrate consistent non responsiveness underperforming oracle peers chain chain cases availability correctness statistics oracles visible chain users developers able view real time appropriate end dapp ethereum equivalent application permissioned blockchain 5 2 reputation system reputation system proposed chainlink record publish user ratings oracle providers nodes offering means users evaluate oracle performance holistically validator system reports likely major factor determining oracle reputations placing reputations firm footing trust factors chain history provide essential information oracle node 3 xe2 x80 x9cdeviation xe2 x80 x9d defined data specific manner simple boolean responses xe2 x80 x94for example flight arrived time xe2 x80 x94deviation simply means response opposite majority temperature city vary legitimately sensors sources deviation mean significant numerical deviation course reasons e g broken sensors functioning oracle deviate majority answer fraction time 17 x0csecurity profiles include users xe2 x80 x99 familiarity oracles xe2 x80 x99 brands operating entities architectures envision chainlink reputation system include basic chain component users xe2 x80 x99 ratings available smart contracts reference additionally reputation metrics easily accessible chain larger amounts data efficiently processed flexibly weighted given oracle operator reputation system initially proposed supporting following metrics granularity specific assignment types section 2 general types supported node xe2 x80 xa2 total number assigned requests total number past requests oracle agreed fulfilled unfulfilled xe2 x80 xa2 total number completed requests total number past requests oracle fulfilled averaged number requests assigned calculate completion rate xe2 x80 xa2 total number accepted requests total number requests deemed acceptable calculating contracts compared peer responses averaged total assigned total completed requests insight accuracy rates xe2 x80 xa2 average time respond necessary oracle responses time confirmation timeliness responses helpful determining future timeliness average response time calculated based completed requests xe2 x80 xa2 penalty payments penalty payments locked assure node operator xe2 x80 x99s performance result financial metric oracle provider xe2 x80 x99s commitment engage xe2 x80 x9cexit scam xe2 x80 x9d attack provider takes users xe2 x80 x99 money doesn xe2 x80 x99t provide services metric involve temporal financial dimension high reputation services strongly incentivized market behave correctly ensure high availability performance negative user feedback pose significant risk brand value penalties associated misbehavior consequently anticipate virtuous circle functioning oracles develop good reputations good reputations rise incentives continued high performance 18 x0c5 3 certification service validation reputation systems intended address broad range faulty behaviors oracles proposed way ensure system integrity vast majority cases chainlink include additional mechanism called certification service goal prevent remediate rare catastrophic events specifically en bloc cheating form sybil mirroring attacks explain sybil mirroring attacks simple contract aggregation protocols seek prevent freeloading sense dishonest nodes copying honest nodes xe2 x80 x99 answers protects sybil attacks 9 attacks involve adversary controls multiple ostensibly independent oracles adversary attempt dominate oracle pool causing f oracles participate aggregation protocol provide false data strategic times e g order influence large transactions high value contracts quorums cheating oracles arise control single adversary collusion multiple adversaries attacks faults involving f oracles especially pernicious undetectable chain behavior additionally reduce operational costs sybil attacker adopt behavior called mirroring causes oracles send individual responses based data obtained single data source query words misbehaving oracles share data chain pretend source data independently mirroring benefits adversary chooses send false data poses security threat data falsification slightly degrade security eliminates error correction resulting diversified queries given source src example https www datasource com emits erroneous data sporadically triggered bug multiple queriers obtain correct majority result sybil attacks resulting false data mirroring collusion general eliminated use trusted hardware long term strategy section 6 certification service design chainlink certification service seek provide general integrity availability assurance detecting helping prevent mirroring colluding oracle quorums short medium term certification service issue endorsements high quality oracle providers emphasize noted service rate providers benefit users meant dictate oracle node participation non participation system certification service supports endorsements based features oracle deployment behavior monitor validation system statistics 19 x0con oracles perform post hoc spot checking chain answers xe2 x80 x94particularly high value transactions xe2 x80 x94comparing answers obtained directly reputable data sources sufficient demand oracle provider xe2 x80 x99s data expect economic incentive justify chain audits oracle providers confirming compliance relevant security standards relevant controls cloud security alliance csa cloud controls matrix 26 providing useful security information conduct proper audits oracles xe2 x80 x99 source bytecode smart contracts addition reputation metrics automated chain automated offchain systems fraud detection certification service planned means identify sybil attacks malfeasance automated chain systems example nodes agree moon green cheese cause user sc ingest false fact moon components green cheese recorded blockchain visible post hoc review 5 4 contract upgrade service recent smart contract hacks shown coding bulletproof smart contracts extremely challenging exercise 1 20 22 smart contract correctly programmed environmental changes bugs result vulnerabilities e g 2 reason propose contract upgrade service emphasize use service entirely optional control users short term vulnerabilities discovered contract upgrade service simply new set supporting oracle contracts available chainlink newly created requesting smart contracts able migrate new set oracle contracts unfortunately existing ones stuck old potentially vulnerable set longer term chainlink sc support flag migflag oracle calls requesting contracts indicating forwarded new chainlink sc available set default e flag missing false migflag enable requesting contracts benefit automatic forwarding migration new version chainlink sc order activate forwarding user cause requesting contract issue chainlink requests migflag true users engineer smart contracts change flag receiving instruction chain authorized contract administrator migration users new oracle contracts functions kind xe2 x80 x9cescape hatch xe2 x80 x9d long advocated blockchain researchers e g 23 mechanism fix bugs remediate hacks resorting cumbersome approaches 20 x0cwhitehat hacking 1 hard forks migration updated contracts visible blockchain available audit users review upgrading recognize nonetheless users feel comfortable group controlling escape hatch form migration forwarding forced migration empower migrating contract xe2 x80 x99s controller hacker compromises relevant credentials undertake malicious activity changing oracle responses reason requesting contracts control forwarding feature opt escape hatch activation additionally accordance chainlink xe2 x80 x99s focus decentralization expect providers able support multiple versions chainlink sc developed community 5 5 link token usage chainlink network utilizes link token pay chainlink node operators retrieval data chain data feeds formatting data blockchain readable formats chain computation uptime guarantees provide operators order smart contract networks like ethereum use chainlink node need pay chosen chainlink node operator link tokens prices set node operator based demand chain resource chainlink provides supply similar resources link token erc20 token additional erc223 xe2 x80 x9ctransfer xe2 x80 x9d functionality transfer address uint256 bytes allowing tokens received processed contracts single transaction 6 long term technical strategy long term technical strategy chainlink proposed whitepaper includes key directions oracle confidentiality infrastructure changes chain computation 6 1 confidentiality distributed oracle network aims offer high degree protection faulty oracles deployment scenarios seeks attain correct response face f byzantine faults f n 2 simple aggregation protocol trusted hardware offer proposed better approach securing chainlink network trusted hardware keystone town crier tc oracle 24 currently operating ethereum mainnet 33 creators partnered smartcontract tc launch 21 x0ccertain forms trusted hardware notably intel xe2 x80 x99s recent software guard extensions sgx set instruction set architecture extensions 12 xe2 x80 x93 15 18 seek provide powerful adjunct distributed forms trust briefly sgx permits application executed environment called enclave claims critical security properties enclaves protect integrity application meaning data code control flow subversion processes second enclave protects confidentiality application meaning data code execution state opaque processes sgx seeks protect enclaved applications malicious operating system administrator host application running alternative forms trusted hardware arm trustzone existence time sgx provides additional key feature lacking technologies enables platform generate attestation execution particular application identified build hash state attestation verified remotely allows specific application instance bound public key establish authenticated confidential channels parties running oracle enclave distributing attestations provide strong assurance oracle executing particular application specifically created endorsed developers chainlink ecosystem additionally oracle running enclave connect data source https provide strong assurance data retrieves tampered 24 33 details properties long way protecting oracle misbehavior sense data corruption sybil attacks etc greater opportunity lies ability trusted hardware provide strong confidentiality need confidentiality general main hurdles blockchain deployment confidentiality preserving oracles instrumental solving problem distributed oracles don xe2 x80 x99t ensure confidentiality confidentiality fundamentally hard achieve oracle system oracle blockchain end smart contract queries oracle publicly visible queries encrypted chain decrypted oracle service oracle service heavyweight tools secure multiparty computation permits computation encrypted data xe2 x80 x99t solve problem given existing infrastructure e g 11 application oriented perspective point server needs send query target data source server query irrespective confidentiality query previously enjoyed response query 22 x0cconfidentality preserving oracles sgx oracle sgx ingest process data enclave essence acting like ttp trusted integrity confidentiality begin oracle decrypt queries enclave process exposing process human enclave process data sources confidentially securely manage sensitive information user credentials powerful capability illustrate town crier system supports confidential flight data queries flight information passed tc smart contract end encrypted public key tc service tc decrypts query contacts data source e g flightaware com https returns querying smart contract simple yes answer question xe2 x80 x9chas flight delayed xe2 x80 x9d exposes information chain interesting tc capability support trading steam gaming platform tc securely ingest user credentials passwords check game ownership transferred buyer seller create secure marketplace unachievable high assurance fair swaps cryptocurrency digital goods simple distributed oracle contrast securely manage users xe2 x80 x99 passwords behalf tc perform trusted chain aggregation data multiple sources trusted computation data multiple sources e g averaging interactive querying data sources e g searching database source response answer trusted hardware offers exciting new approach scalable usage blockchains 24 29 large portions blockchain infrastructure including smart contracts execute enclaves architecture combine transparency benefits blockchains confidentiality properties chain execution trusted hardware similar ideas suggested techniques zk snarks 21 trusted hardware far practical complicated current research agenda includes expansive vision oracles catalyzing service briefly discuss issue intel root trust appendix b defining security given sgx possible given use trusted hardware define oracle correctness formally starting formalism intel sgx proposed 32 formalism allows sgx treated global universally composable uc 6 functionality fsgx xce xa3sgx progencl r follows xce xa3 denotes signature scheme signing verification functions xce xa3 sign xce xa3 verify instance fsgx xce xa3sgx progencl r parameterized group signature 23 x0cscheme xce xa3sgx argument progencl denotes program running enclave e environment protected hardware r denotes untrusted code running sgx host e software calls application running enclave figure 5 taken 24 shows operation functionality fsgx initialization runs outp progencl initialize generating attestation code progencl outp attestation xcf x83att digitally signed statement platform progencl running enclave yielded output outp typical usage progencl initalize outputs instance specific public key create secure channel application instance resume id params fsgx continues execution outputs result progencl resume id params id denotes session identifier params denotes parameters input progencl fsgx progencl r abstraction sgx hardcoded sksgx private key xce xa3sgx assume progencl entry points initialize resume initialize receive init r let outp progencl initalize xcf x83att xce xa3sgx sign sksgx progencl outp output outp xcf x83att resume receive resume id params r let outp progencl resume id params output outp figure 5 formal abstraction sgx execution capturing subset sgx features given formalism figure 5 possible precisely define integrity oracle definition 1 slight generalization definition given 24 authenticity oracle definition 1 authenticity oracle oracle o running program progencl fsgx outputting instance key pko satisfies authenticity oracle polynomial time adversary interact arbitrarily fsgx cause honest verifier accept pko xcf x83att params url t data xcf x83 data contents url public key time t progencl resume id params 24 x0cour model formally probabilistic polynomial time adversary xef xa3 xb9 xef xa3 xae pko xcf x83att id params data xcf x83 xe2 x86 x90 afsgx 1 xce xbb x01 xef xa3 xaf xce xa3sgx verify pksgx xcf x83att progencl pko x01 1 xe2 x88 xa7 xef xa3 xba xef xa3 xba pr xef xa3 xaf xef xa3 xbb xef xa3 xb0 xce xa3 verify pko xcf x83 id params data 1 xe2 x88 xa7 data 6 progencl resume id params xe2 x89 xa4 negl xce xbb security parameter xce xbb 6 2 infrastructure changes challenges constructing secure oracles arise fact existing data sources don xe2 x80 x99t digitally sign data serve oracles need trusted refrain tampering data https protocol secure web communications enable data signing underlying public key infrastructure pki requires servers possess certificates principle support data signing observation basis tls n tls extension allows https servers sign portions sessions clients selective nature signing provides nice features ability clients exclude signed transcripts protect confidentiality credentials e g passwords use connect servers believe infrastructure changes tls n promising approaches supporting oracle security probably need concert technologies sgx following limitations 1 infrastructure modifications unfortunately tls n standard data sources expressly deploy clients benefit data sources likely near future 2 aggregation computation tls n support aggregation forms trusted computation data data sources trusted mechanism required accomplish tasks 3 cost verification tls n signed data incurs relatively high chain costs compared simple signature verification 4 confidentiality tls n support band confidential management user credentials queries instead requires users query data source purpose example confidential flight information stored smart contract later confidential automated query website 25 x0c6 3 chain computation intriguing uses oracles use credential dependent apis require oracle considerably transmit data need manage credentials log accounts scrape data forth given truly trustworthy confidential oracles sgx backed systems xc3 xa0 la town crier techniques zero knowledge proofs 21 help achieve boundary oracles smart contracts fluid chainlink supports regex based language queries enables users flexibly specify processing chain data long term strategy seeks create world oracles key chain computation resource smart contracts believe enabled building model fully general private chain computation oracles results consumed smart contracts achieved strong security believe pushing costly sensitive computation logic oracles result better confidentiality lower contract execution costs flexible architectures 7 existing oracle solutions chainlink designed fill pervasive need new oracle technology smart contract systems unfortunately today limited supply highly secure flexible oracle systems believe lack trustworthy oracles major impediment evolution smart contracts commonly option oracle services today centralized oracle providers approach problematic creates centralized point control meet high standards tamper resistance trustless smart contracts require systems e g 31 attempt remedy problem relying notarization xe2 x80 x9cprove xe2 x80 x9d correct behavior use notarization services worrisome view documented problems services 37 fact attestations feasibly verified chain resulting potentially recursive need verification approach delivering trustworthy oracle data rely manual human input unstructured data xe2 x80 x9cmanual input oracle xe2 x80 x9d commonly proposed use prediction markets 17 25 28 creating appropriate financial stakes assuming economically rational players limited financial incentives cheating oracles provide high assurance correct crowd sourced answers approach decentralized flexible manual input oracles obtain responses human beings respond questions structured data hard find difficult extract reliable way e g requires natural language processing 26 x0cof news events unfortunately human cognition costly slow manual input oracles resource intensive real time handle limited set questions given time believe chainlink useful quickly automatically resolving prediction market contracts resolved structured data final approach change form data source data source digitally signed data provided relaying server wouldn xe2 x80 x99t need trusted user sc simply check signatures data receives excellent general approach kind provided tls n discussed unfortunately mentioned tls n requires changes existing infrastructure 8 conclusion introduced chainlink decentralized oracle network smart contracts securely interact resources external blockchain outlined chainlink architecture describing chain components defining security context oracles described chainlink xe2 x80 x99s multilayered approach decentralization proposed novel protocol new features protection freeloading additional protocols security proof sketches paper appendix laid roadmap chainlink harness technological infrastructural advances trusted hardware digital signing data sources finally having examined existing oracle solutions shortcomings exposed need today system chainlink design principles continue work chainlink seek prioritize following core values xe2 x80 xa2 decentralization secure open systems decentralization foundation tamperproof properties blockchains basis permissionless nature continuing build decentralized systems aim enable permissionless development ecosystem believe decentralization crucial component globally thriving ecosystem long term sustainability xe2 x80 xa2 modularity simple flexible system design appreciate philosophy building small tools thing simple components easily reasoned securely combined larger systems believe modularity enables upgradable systems facilitates decentralization key pieces chainlink depend managed 27 x0cfew parties seek design ecosystem allows competing implementations xe2 x80 xa2 open source secure extensible systems chainlink possible standing shoulders open source projects value community continue contribute developing chainlink open source manner plan engage continually developers academics security experts peer review encourage testing audits formal proofs security aim creating platform robustness security support future innovations principles mind look forward extending reach impact blockchains smart contracts making oracles secure cornerstone ecosystem references 1 parity multi sig hack postmortem https blog ethcore io multisig hack postmortem 20 july 2017 2 gun sirer cross chain replay attacks hacking distributed blog 17 july 2016 3 adi shamir xe2 x80 x9chow share secret xe2 x80 x9d communications acm 22 11 1979 pp 612 xe2 x80 x93613 4 claus peter schnorr xe2 x80 x9cefficient signature generation smart cards xe2 x80 x9d journal cryptology 4 3 1991 pp 161 xe2 x80 x93174 5 rosario gennaro stanislaw jarecki hugo krawczyk et al xe2 x80 x9csecure distributed key generation discrete log based cryptosystems xe2 x80 x9d eurocrypt vol 99 springer 1999 pp 295 xe2 x80 x93310 6 r canetti xe2 x80 x9cuniversally composable security new paradigm cryptographic protocols xe2 x80 x9d focs 2001 7 ran canetti xe2 x80 x9cuniversally composable security new paradigm cryptographic protocols xe2 x80 x9d foundations computer science 2001 proceedings 42nd ieee symposium ieee 2001 pp 136 xe2 x80 x93145 8 douglas r stinson reto strobl xe2 x80 x9cprovably secure distributed schnorr signatures t n threshold scheme implicit certificates xe2 x80 x9d acisp vol 1 springer 2001 pp 417 xe2 x80 x93434 9 john r douceur xe2 x80 x9cthe sybil attack xe2 x80 x9d international workshop peer topeer systems springer 2002 pp 251 xe2 x80 x93260 28 x0c 10 aniket kate ian goldberg xe2 x80 x9cdistributed key generation internet xe2 x80 x9d distributed computing systems 2009 icdcs xe2 x80 x9909 29th ieee international conference ieee 2009 pp 119 xe2 x80 x93128 11 claudio orlandi xe2 x80 x9cis multiparty computation good practice xe2 x80 x9d acoustics speech signal processing icassp 2011 ieee international conference ieee 2011 pp 5848 xe2 x80 x935851 12 ittai anati shay gueron simon johnson et al xe2 x80 x9cinnovative technology cpu based attestation sealing xe2 x80 x9d proceedings 2nd international workshop hardware architectural support security privacy vol 13 2013 url https software intel com en articles innovative technology cpu based attestation sealing visited 05 23 2016 13 matthew hoekstra reshma lal pradeep pappachan et al xe2 x80 x9cusing innovative instructions create trustworthy software solutions xe2 x80 x9d proceedings 2nd international workshop hardware architectural support security privacy hasp xe2 x80 x9913 tel aviv israel acm 2013 11 1 xe2 x80 x9311 1 isbn 978 1 4503 2118 1 doi 10 1145 2487726 2488370 url http doi acm org 10 1145 2487726 2488370 14 frank mckeen ilya alexandrovich alex berenzon et al xe2 x80 x9cinnovative instructions software model isolated execution xe2 x80 x9d proceedings 2nd international workshop hardware architectural support security privacy 2013 p 10 url http css csail mit edu 6 858 2015 readings intel sgx pdf visited 05 23 2016 15 intel intel software guard extensions programming reference 2014 visited 05 23 2016 16 gavin wood xe2 x80 x9cethereum secure decentralised generalised transaction ledger xe2 x80 x9d ethereum project yellow paper 2014 17 jack peterson joseph krug xe2 x80 x9caugur decentralized open source platform prediction markets xe2 x80 x9d arxiv preprint arxiv 1501 01042 2015 18 victor costan srinivas devadas xe2 x80 x9cintel sgx explained xe2 x80 x9d cryptology eprint archive 2016 url https eprint iacr org 2016 086 pdf visited 05 24 2016 19 victor costan ilia lebedev srinivas devadas xe2 x80 x9csanctum minimal hardware extensions strong software isolation xe2 x80 x9d usenix security symposium 2016 pp 857 xe2 x80 x93874 29 x0c 20 kevin delmolino mitchell arnett ahmed kosba et al xe2 x80 x9cstep step creating safe smart contract lessons insights cryptocurrency lab xe2 x80 x9d international conference financial cryptography data security springer 2016 pp 79 xe2 x80 x9394 21 ahmed kosba andrew miller elaine shi et al xe2 x80 x9chawk blockchain model cryptography privacy preserving smart contracts xe2 x80 x9d s p xe2 x80 x9916 ieee 2016 22 loi luu duc hiep chu hrishi olickel et al xe2 x80 x9cmaking smart contracts smarter xe2 x80 x9d proceedings 2016 acm sigsac conference computer communications security acm 2016 pp 254 xe2 x80 x93269 23 bill marino ari juels xe2 x80 x9csetting standards altering undoing smart contracts xe2 x80 x9d international symposium rules rule markup languages semantic web springer 2016 pp 151 xe2 x80 x93166 24 fan zhang ethan cecchetti kyle croman et al xe2 x80 x9ctown crier authenticated data feed smart contracts xe2 x80 x9d proceedings 2016 acm sigsac conference computer communications security acm 2016 pp 270 xe2 x80 x93 282 25 augur project page https augur net 2017 26 csa cloud controls matrix url https cloudsecurityalliance org group cloudcontrols matrix 2017 27 mark flood oliver goodenough contract automaton computational representation financial agreements https www financialresearch gov working papers files ofrwp 2015 04 contract automaton computational representation financial agreements pdf office financial research 2017 28 gnosis project page https gnosis pm 2017 29 hyperledger sawtooth https intelledger github io introduction html 2017 30 abhiram kothapalli andrew miller nikita borisov xe2 x80 x9csmartcast incentive compatible consensus protocol smart contracts xe2 x80 x9d financial cryptography data security fc 2017 31 oraclize project page http www oraclize 2017 32 rafael pass elaine shi florian tramer xe2 x80 x9cformal abstractions attested execution secure processors xe2 x80 x9d eurocrypt springer 2017 pp 260 xe2 x80 x93289 33 town crier ethereum service http www town crier org 2017 30 x0c 34 florian tramer fan zhang huang lin et al xe2 x80 x9csealed glass proofs transparent enclaves prove sell knowledge xe2 x80 x9d security privacy euros amp p 2017 ieee european symposium ieee 2017 pp 19 xe2 x80 x9334 35 vitalik buterin et al ethereum white paper https github com ethereum wiki wiki white paper 36 json schema http json schema org 37 hubert ritzdorf karl w xc3 xbcst arthur gervais et al tls n non repudiation tls enabling ubiquitous content signing disintermediation iacr eprint report 2017 578 url https eprint iacr org 2017 578 31 x0cdisclosures xe2 x80 xa0 ari juels faculty member jacobs institute cornell tech co authored work separate capacity advisor smartcontract chainlink ltd financial interest whitepaper provided smartcontract chainlink ltd xe2 x80 x9csccl xe2 x80 x9d british virgin islands corporation support chainlink platform secure asset exchange inc xe2 x80 x9csae xe2 x80 x9d dba smartcontract com providing administrative technical support sccl including support sccl xe2 x80 x99s link token sale receiving compensation sccl technological social business structures utilizing blockchain technology continually developing evolve foreseeable future accordingly plans strategies implementation details described whitepaper likely evolve accordingly adopted sccl sae reserve rights develop pursue additional alternative plans strategies implementation details associated chainlink platform link tokens sold sccl pursuant terms conditions token sale terms available https link smartcontract com terms complete details review terms link tokens securities investments currency sold marketed participating sale involves significant technological systemic risks sale open individuals reside citizens united states canada sale period duration pricing provisions change stated token sale terms link token sale involves known unknown risks uncertainties factors cause actual functionality utility levels use link tokens materially different projected future results use functionality utility expressed implied sccl terms 32 x0ca chain aggregation ensure valid signed answers prevent freeloading chain aggregation protocol discussed section 4 2 rely simple distributed protocol based threshold signatures 8 benefit approach given query single signature generated chain collection n oracle nodes result single authenticated message needs handled chain instead o n messages distinct oracle nodes approach greatly reduces costs comparison incurred algorithm 1 idea extended 30 aggregate answers multiple queries single threshold signature idea don xe2 x80 x99t explore consider architecture suppose f n 3 oracles faulty t f 1 faulty nodes try perform freeloading range dishonest behaviors signing invalid answers complete protocol chain aggregation consists pair algorithms oca distoracle rewardoracles computing signature sigsk value agg a1 a2 majority function agg simplified single round version protocols shown respectively algorithms 2 3 executed participating oracles second executed entity provider mentioned form smart contract presenting oca basic background schnorr signatures threshold scheme computing given 8 schnorr signatures schnorr signature scheme makes use group g prime order p generator g discrete log problem presumed hard user xe2 x80 x99s key pair takes form sk pk x y g x x xe2 x86 x90$ z xc3 x97 p xc3 x97 zp zp xe2 x88 x92 0 loss generality denote group operations multiplicatively schnorr signatures computed elliptic curve groups typically modern crypto implementations figure 6 shows schnorr signature scheme threshold schnorr signature scheme use threshold signature scheme 8 scheme generates global private public keypair sk pk enables threshold generation signature sigsk m desired message m initial key generation protocol player assigned key share xi ski setup time operation distributed key generation protocol e g 5 asynchronous setting 10 generate signature players oracles setting perform distributed key generation protocol key share generation setup output protocol global ephemeral secret key e player oi receives secret share ei e 33 x0cschnorr signature signer input m sk x verifier input pk y signer r verifier xe2 x86 x90$ zxp r e xe2 x86 x90g c h m e s cx e e s m xe2 x88 x92 xe2 x88 x92 xe2 x88 x92 xe2 x88 x92 xe2 x86 x92 c h m e g s ry c figure 6 schnorr signature scheme e partial signature oi given ephemeral key e takes form xcf x83i cxi ei c h m e signature player oi exists function validi xcf x83i pk e verifies partial signature refer partial signature valid oi verifies correctly validi somewhat modified notation greatly condensed scheme exposition refer reader 8 details 1 oca protocol present distoracle rewardoracles algorithms compose oca specified algorithms 2 3 condensed notation including witnesses explicitly algorithm 1 let commit denote commitment function note players messages received chainlink sc onchain let xce xa3 xe2 x88 x97 valid signature xce xa3 sent chainlink sc alg 3 let p s xe2 x88 x97 denote set decommitments received provider partial signatures yield xce xa3 xe2 x88 x97 p s xe2 x88 x97 come oracle sent xce xa3 xe2 x88 x97 need oracle partial signature p s xe2 x88 x97 incentivized send p s xe2 x88 x97 34 x0calgorithm 2 distoracle f n ski xi pk src code oi jointly generate ephemeral key 1 execute distributed key generation protocol receive ei e obtain data 2 obtain ai src generate partial signature 3 e compute xcf x83i cxi ei c h m e m ai commit round 4 5 6 x01 e broadcast commitment commi commit xcf x83i ai wait set ci n xe2 x88 x92 f valid commitments distinct oracles received send ci provider prepare round 7 8 broadcast prepared wait n xe2 x88 x92 f distinct prepared messages received reveal decommit round 9 10 e broadcast decommitment xcf x83i ai commi wait set p s xe2 x89 xa5 t valid decommitments received signature computation 11 12 13 14 15 valid xce xa3 received chainlink sc aggregate partial signatures p s xce xa3 sigsk send xce xa3 chainlink sc send p s provider end 35 x0calgorithm 3 rewardoracles code provider 1 2 3 4 5 6 wait set c n xe2 x88 x92 f commitment sets ci distinct oracles p s xe2 x88 x97 received oracle oj xcf x83j xe2 x88 x88 p s xe2 x88 x97 2f sets c include commitments xcf x83j oj send $reward oj end end 2 proof sketches offer proof sketches key properties oca assuming f faulty nodes protocol generates valid signature correct answer rewards freeloading oracle nodes claim 2 protocol oca reward freeloading node proof sketch suppose oz freeloading broadcast valid commitment time xcf x84 time honest oi decommits step 9 alg 2 oi received n xe2 x88 x92 f prepared messages n xe2 x88 x92 2f come honest nodes let oj denote n xe2 x88 x92 2f honest nodes oj longer accept commitments sending prepared message set cj honest node oj longer change time xcf x84 cj exclude commitment correct partial signature xcf x83z oz n xe2 x88 x92 n xe2 x88 x92 2f 2f sets c alg 3 include oz oz receive reward unfortunately oca ensure non freeloading nodes paid cheating adversary receiving decommitment rush honest nodes step 13 alg 2 generating partial signatures including honest node xe2 x80 x99s partial signature generation xce xa3 honest node xe2 x80 x99s commitment included n xe2 x88 x92 f collected node come afterward claim 3 oca result valid signature xce xa3 sigsk eventually sent chainlink sc proof sketch n xe2 x88 x92f honest nodes f n 3 2f xe2 x89 xa5 f 1 honest nodes t honest nodes step 1 alg 2 complete successfully similarly n xe2 x88 x92 f honest nodes oracle eventually complete step 7 alg 2 sending prepared message honest nodes eventually 36 x0creceive n xe2 x88 x92 f prepared messages decommit permitting step 13 completed honest node claim 4 valid signature sigsk received chainlink sc oca valid value proof sketch easy valid signature sigsk includes correct value t partial signatures needed compute sigsk f t nodes faulty partial signature provided honest node correct 3 discussion oca introduces design challenges briefly discuss payment honest nodes unfortunately penalizes freeloaders non payment oca able guarantee conversely honest nodes paid benign case nodes faulty unlucky message ordering result honest nodes contributed partial signatures xce xa3 receiving payment problem addressed making alg 2 synchronous specifically xe2 x80 x9cwait xe2 x80 x9d steps require nodes wait period time xe2 x88 x86 receipt messages honest nodes guaranteed case nodes partial signatures incorporated xce xa3 guaranteed payment effects slower execution challenge setting xe2 x88 x86 correctly problem designing asynchronous protocol strong payment guarantees open research problem currently exploring redundant messages oca aims minimize chain communication ideally involves chain message signed response xce xa3 set participating oracles practice signature xce xa3 post immediately blockchain multiple oracles independently send signed responses blockchain best way limit redundant messages oracles monitor blockchain mempool e pending messages key management course case key management major challenge protocols kind distribution shares sk performed distributed manner 5 updates accommodate new nodes remove departing nodes provide proactive security e ongoing resilience compromise nodes xe2 x80 x99 keys additionally nodes organized 37 x0cinto distinct cliques bound size n propose chainlink employ techniques ensure flexible responsive secure distributed oracle b sgx trust assumptions intel xe2 x80 x99s role providing stronger assurance correctness sgx enhances supplant integrity protections chainlink words use sgx makes system strictly stronger trusting sgx confidentiality require trust intel trust circumscribed assuming intel backdoor cpus enabling leakage enclave data means inspecting enclave state backdoor possible require presence physical evidence user xe2 x80 x99s machine pose reputational risk intel adversary corrupts intel xe2 x80 x99s manufacturing processes principle falsify attestation keys platform epid keys adversary generate epid keys embedded sgx enabled servers instead permit attestations generated non sgx platform effect adversary create bogus servers generate valid looking sgx attestations provide protections enclaved code f nodes course adversary corrupt oracle responses problematically nodes expose sensitive data handled oracle nodes adversary ability falsify epid keys imply ability corrupt existing valid sgx instances important recognize course today like trust intel inescapable cpu machine reading paper bears witness fact xe2 x80 x94or cpu server downloaded paper course preferable use trusted hardware multiple vendors hoped create equivalent capabilities new open architectures trusted hardware ways weaken trust assumptions required hardware active areas research e g 19 34 ability diversify vendors architectures se ensure data confidentiality interested research techniques confidentiality assurance distributed networks use cover traffic 38 x0c