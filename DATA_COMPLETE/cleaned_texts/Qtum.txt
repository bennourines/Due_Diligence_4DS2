b smart contract value transfer protocols distributed mobile application platform patrick dai1 neil mahi1 jordan earls1 alex norta2 1 2 qtum foundation singapore foundation qtum org large scale systems group tallinn university technology akadeemia tee 15a 12816 tallinn estonia alex norta phd ieee org abstract blockchain enabled smart contracts employ proof ofstake validation transactions promise significant performance advantages compared proof work solutions broad industry adoption important requirements met addition example stable backwards compatible smart contract systems automate cross organizational information logistics orchestration lite mobile wallets support simple payment verification spv techniques currently leading smart contract solution ethereum uses computationally expensive proof work validation expected hard fork multiple times future requires downloading entire blockchain consequently ethereum smart contracts limited utility lack formal semantics security issue whitepaper fills gap state art presenting qtum smart contract framework aims sociotechnical application suitability adoption formalsemantics language expressiveness provision smart contract template libraries rapid best practice industry deployment discuss qtum utility advantages compared ethereum alternative present qtum smart contract future development plans industrycases applications key words smart contract business network model dapp mobile information logistics cross organizational peer peer distributed system e governance qtum framework 1 introduction orchestration choreography protocols facilitate verify enact computing means negotiated agreement consenting parties termed smart contracts initially find application diverse domains e g financial technology 6 internet things iot applications 33 digitalsigning solutions 11 essential aspect smart contracts decentralized validation transactions initially means called proof work pow 42 core technology enables smart contracts public distributed ledger termed blockchain records transaction events requir x0c2 alex norta ing trusted central authority blockchain technology spreads popularity inception bitcoin 23 peer peer p2p cryptocurrency payment system comprises limited set operations protocol layer bitcoins use pow transaction validation computationally expensive electricity intensive contrast bitcoins smart contract systems equipped turing complete language solidity1 resembles javascript syntax targets enactment e g ethereum virtual 44 machine ethereum defacto leading smart contract system despite plagued deficiencies proof work transaction validation diminishes scalability point ethereum considered feasible industry applications second recent crowdfunding casestudy ethereum affiliated solidity smart contract hacked2 security flaws resulting lack state art respect tools formal verifications 3 security flaw resulted loss $50 million consequently ethereum performed hardfork resulting schism yielding separate ethereum versions3 ethereum hardfork4 caused denial service attack hardforks expected5 realizing proof stake 2 transaction validation blockchain sharding 20 reasons limit widespread ethereum industry adoption 8 example inability automate cross organizational information logistics lacking privacy protecting differentiations external versus related internal private contracts secure stable virtual machines blockchains better performing proof stake 2 transaction validation formally verifiable smartcontract languages lite wallets require downloading entire blockchain mobile device solutions smart contracts simple payment verification spv 14 means clients merely download block headers connect arbitrary node 23 qtum uses ethereum virtual machine evm current lack suitable alternatives according 19 evm deficiencies earlier experienced attacks mishandled exceptions dependencies transaction ordering timestamps desirable smart contract system achieve industry scalability employing sidechains 10 unspent transaction outputs utxo 10 achieving compatibility blockchain systems bitcoins 23 colored coins 36 furthermore adoption features bitcoin lightning network 35 yields scalability bidirectional micropayment channels 1 2 3 4 5 http solidity readthedocs io en develop https www wired com 2016 06 50 million hack showed dao human https bitcoinsmagazine com articles ethereum classic hard forks diffusesdifficulty bomb 1484350622 https cointelegraph com news ethereum hard fork 4 arrived dosattacks intensify https forum daohub org t whats casper proof stake andsharding 6309 x0csmart contract information value logistics 3 smart contract systems ethereum attract attention widespread industry adoption exist discussed reasons whitepaper addresses gap specifying qtum6 framework smart contract systems answers question develop smart contract solution satisfy critical customer requirements enabling cross organizational information logistics reduce costs time establish separation concerns pose following sub questions differentiating technological performance advantages qtum smart contract solutions provide critical smart contract requirements qtum framework satisfies unique features cross organizational information logistics automation qtum framework aims support remainder whitepaper structured follows section 2 focuses concrete advantages qtum framework achieving technologically performance increases comparison related solutions section 3 gives functional quality goals combination involved stakeholders sociotechnically organized smart contract systems section 4 shows running case supported qtum framework value transfer protocol finally section 5 concludes whitepaper discussing limitations open issues future development work 2 qtum performance advantage primary goals qtum build utxo based smartcontract system proof stake pos 37 consensus model means creator block chosen based held wealth cryptocurrency blocks usually forged minted instead mined block rewards addition transaction fees forgers receive percentage xe2 x80 x9dinterest xe2 x80 x9d funds stake qtum compatible bitcoin ethereum ecosystems aims producing variation bitcoin ethereum virtual machine evm compatibility note differently ethereum qtum evm constantly backwards compatible pursuing pragmatic design approach qtum employs industry use cases strategy comprising mobile devices allows qtum promoting blockchain technology wide array internet users decentralizing pos transaction validation remainder structured follows section 2 1 compares advantages bitcoin utxo versus ethereum account model section 2 2 discusses consensus platform qtum blockchain section 2 3 shows integration qtum contracts evm finally section 2 4 describes payment model qtum operations 6 https qtum org x0c4 alex norta 2 1 utxo versus account model utxo model transactions use input unspent bitcoins destroyed transaction outputs new utxos created unspent transaction outputs created change returned spender 1 way certain volume bitcoins transferred different private key owners new utxos spent created transaction chain utxo bitcoin transaction unlocked private key sign modified version transaction bitcoin network miners generate bitcoins process called coinbase transaction contain inputs bitcoin uses scripting language transactions limited set operations7 bitcoin network scripting system processes data stacks main stack alt stack abstract data type following lifo principle bitcoin client developers use isstandard function 1 summarize scripting types bitcoin clients support p2pkh pay public key hash p2pk pay public key multisignature 15 private key signatures p2sh pay script hash op return standard scripting types bitcoin clients process complex payment logics non standard script created executed miners agree encapsulate non standard transaction example p2pkh process script creation execution assume paying 0 01btc bread bakery imaginary bitcoin address xe2 x80 x9dbread address xe2 x80 x9d output transaction op dup op hash160 bread public key hash op equal op checksig operation op dup duplicates item stack op hash160 returns bitcoin address item establishes ownership bitcoin bitcoin address required addition digital key digital signature op equal yields true 1 items exactly equal false 0 finally op checksig produces public key signature validation signature pertaining hashed data transaction returning true match occurs unlock script according lock script bread signature bread public key combined script bread signature bread public key op dup op hash160 bread public key hash op equal op checksig unlock script lock script matching predefined condition execution script combination true means bread signature signed matching private key valid bread address signature result true unfortunately scripting language bitcoin turing complete e g loop function bitcoin scripting language commonly programming language limitations mitigate security risks preventing 7 https en bitcoin wiki script x0csmart contract information value logistics 5 occurrence complex payment conditions e g generating infinite loops complicated logic loopholes utxo model possible transparently trace history transaction public ledger utxo model parallel processing capability initialize transactions multiple addresses indicating extensibility additionally utxo model supports privacy users use change address output utxo target qtum implement smart contracts based innovative design utxo model versus utxo model ethereum account based system8 precisely account experiences direct value information transfers state transitions ethereum account address 20 bytes comprises nounce counter assuring time processing transaction balance main internal crypto fuel paying transaction fees called ether optional contract code default account storage types ether accounts hand private key controlled external hand contract code controlled code void account type creates signs transactions message transfer activates code receiving message reading writing internal storage creating contracts sending messages ethereum balance management resembles bank account real world newly generated block potentially influences global status accounts account balance storage code space base calling accounts addresses stores respective execution results existing ethereum account system users perform p2p transactions client remote procedure calls sending messages accounts smart contracts possible internal transactions visible balance account tracking public ledger ethereum challenge based discussion consider ethereum account model scalability bottleneck clear advantages bitcoin network utxo model enhances network effect wish offer essential design decision pending qtum release adoption utxo model 2 2 consensus management ongoing discussions consensus platform meets needs respective project requirements consensus topics widely discussed pow 41 pos 2 dynamic pos9 byzantine fault tolerance 7 discussed hyperledger nature consensus achieving data consistency distributed algorithms available options e g fischer lynch paterson theorem 5 states consensus reached 100% agreement nodes 8 9 https github com ethereum wiki wiki white paper http tinyurl com zxgayfr x0c6 alex norta bitcoin network miners participate verification process hash collision pow hash value miner able calculate meet certain condition miner claim network new block mined m d miners m mining difficulty d hash represents sha256 power value range 0 m d sha256 algorithm bitcoin enables node verify block quickly number miners high versus mining difficulty 80 byte blockheader varies different nonce overall difficulty level mining adjusts dynamically according total hash power blockchain network miners solve block time small fork happens network point blockchain needs decision block accept reject bitcoin network chain legitimate proven work attached pos blockchains source heritage peercoin10 based earlier version bitcoin core different pow algorithms scrypt11 x1112 groestl13 equihash 4 etc purpose launching new algorithm prevent accumulation computing power entity ensure application specific integrated circuits asic introduced economy qtum core chooses pos based latest bitcoin source code basic consensus formation traditional pos transaction generation new block meet following condition hash blockheader xe2 x89 xa4 p roof hash coins xc3 x97 age xc3 x97 target proofhash stake modifier 40 computes unspent outputs current time method malicious attacker start double spending attack accumulating large amounts coin age problem caused coin age nodes online intermittently rewarding instead continuously online improved version pos agreement coin age removal encourages nodes online simultaneously original pos implementation suffers security issues possible coin age attacks types attacks 16 qtum agrees security analysis blackcoin team 40 adopts pos 3 0 14 latest qtum core pos 3 0 theoretically rewards investors stake coins longer giving incentive coin holders leave wallets offline 10 11 12 13 14 https peercoin net https litecoin info scrypt http cryptorials io glossary x11 http www groestlcoin org groestlcoin http blackcoin co x0csmart contract information value logistics 7 2 3 qtum contract evm integration evm stack based 256 bit machine word smart contracts run ethereum use virtual machine execution evm designed blockchain ethereum assumes value transfer use account based method qtum based blockchain design bitcoin uses utxo based model qtum account abstraction layer translates utxo based model account based interface evm note abstraction layer computing instrumental hiding implementation details particular functionality establish separation concerns facilitating interoperability platform independence evm integration transactions qtum use bitcoin scripting language like bitcoin qtum exist new opcodes xe2 x80 x93 op exec opcode triggers special processing transaction explained executes specific input evm bytecode xe2 x80 x93 op exec assign opcode triggers special processing op exec opcode input contract address data contract follows execution contract bytecode passing given data given callerdata evm opcode optionally transfers money smart contract xe2 x80 x93 op txhash opcode reconcile odd accounting abstraction layer pushes transaction id hash currently executed transaction traditionally scripts executed attempting spend output example script blockchain standard public key hash transaction validation execution takes place execution validation happen transaction input references output point transaction valid input script scriptsig provide valid data output script causes return non zero qtum accommodate smart contracts execute immediately merged blockchain depicted figure 1 qtum achieves special processing transaction output scripts scriptpubkey contain op exec op exec assign opcodes detected script executed nodes network transaction placed block mode actual bitcoin script language serves scripting language instead carries data evm changes state state database execution opcodes similar ethereum contract easy use qtum smart contracts authenticate data sent smart contract creator stemming particular pubkeyhash address order prevent utxo set qtum blockchain large op exec op exec assign transaction outputs spendable op exec assign outputs spent contracts code sends money contract pubkeyhash address op exec outputs x0c8 alex norta fig 1 qtum transaction processing spent contract uses suicide operation remove blockchain qtum account abstraction layer evm designed function account based blockchain qtum based bitcoin uses utxobased blockchain contains account abstraction layer aal allows evm function qtum blockchain significant modifications virtual machine existing ethereum contracts evm account model simple use smart contract programmers operations exist check balance current contract contracts blockchain operations sending money attached x0csmart contract information value logistics 9 data contracts actions fairly basic minimalistic trivial apply utxo based qtum blockchain aal implementation operations complex expected qtum blockchain deployed smart contract assigned callable address comprises newly deployed contract balance set zero currently protocol qtum allows contract deployed non zero balance order send funds contract transaction uses op exec assign opcode example output script sends money contract 1 t h e v e r s o n o f t h e vm 1 0 0 0 0 g s l m t f o r t h e transaction 1 0 0 g s p r c e qtum s t o s h s 0 xf012 data t o send t h e c o n t r c t u s u l l y t h e s o l d t y abi 0 x1452b22265803b201ac1f8bb25840cb70afe3303 ripemd xe2 x88 x92160 hash o f c o n t r c t t x d op exec assign simple script hands transaction processing op exec assign opcode assuming gas exceptions occur value given contract outputvalue exact details gas mechanism discuss adding output blockchain output enters domain contract owned utxo set output value reflected balance contract sum spendable outputs fig 2 assign funds message contract tx figure 2 shows sending funds contract standard public key hash output method sending money contract nearly identical contract sends funds contract public key hash address spends owned outputs sending x0c10 alex norta contract involves expected contract transactions fund sending transactions special exist block valid qtum network expected contract transactions generated miners verifying executing transactions generated consumers broadcast p2p network fig 3 qtum block validation showing expected contract transaction list primary mechanism perform expected contract transactions new opcode op txhash figure 3 internally op exec op exec assign different modes execution output script processing evm executed opcodes executed input script processing evm executed avoid double execution instead op exec op exec assign opcodes behave similar ops return 1 0 e spendable spendable respectively based given transaction hash op txhash x0csmart contract information value logistics 11 important functioning concept briefly op txhash new opcode added pushes current spending transaction xe2 x80 x99s sha256 hash bitcoin script stack op exec op exec assign opcodes check expected contract transaction list spend attempt transaction passes usually op txhash opcodes exist expected contract transaction list result 1 spendable return 0 spendable way op exec op exec assign vouts spendable contract account abstraction layer requires vout spendable e contract attempts sending money results secure sound way allowing contract funds spent respective contract alignment normal utxo transaction specific scenario occurs contract output spent node pick different outputs use completely different transactions spending op exec assign transactions resolved qtum consensus critical coin picking algorithm similar standard coin picking algorithm user wallet qtum significantly simplifies algorithm avoid risk denial service dos attack vectors realize simple consensus rules consensus critical coin picking algorithm possibility nodes pick different coins spent contract miner node picks different outputs fork away main qtum network blocks rendered invalid evm contract figure 4 sends money pubkeyhash address contract event constructs new transaction consensus critical coin picking algorithm chooses best owned outputs contract pool outputs spent inputs input script scriptsig comprising single op txhash opcode outputs destination funds change output required send remaining funds transaction contract transaction hash added expected contract transaction list transaction added block immediately contract execution transaction constructed transaction validated executed confirmation check expected contract transaction list follows transaction hash removed expected contract transaction list model impossible spoof transactions spending providing hardcoded hash input script instead op txhash described abstraction layer renders evm contracts oblivious coin picking specific outputs instead evm contracts know contracts balance money sent contracts outside contract system pubkeyhash addresses consequently contract compatibility qtum ethereum strong modifications required port ethereum contract qtum blockchain x0c12 alex norta fig 4 spend contract op exec assign transaction added standard transaction types following standard transaction types add qtum documented bitcoin script templates deploying new contract blockchain requires output script follows 1 t h e v e r s o n o f t h e vm gas l m t gas p r c e c o n t r c t evm b y t e c o d e op exec sending funds deployed contract blockchain requires script 1 t h e v e r s o n o f t h e vm gas l m t gas p r c e data t o send t o t h e c o n t r c t r p xe2 x88 x92emd160 hash o f c o n t r c t transaction d op exec assign note standard transaction types spending requires expected contract transaction list spending transactions broadcast valid p2p network 2 4 gas model problem qtum faces adding turing completeness bitcoin blockchain relying size transaction reasonable determining fee paid miners reason transaction infinitely loop halt entire blockchain transaction processing miners figure 5 shows qtum project adopts concept gas ethereum gas concept evm opcode executed price transaction x0csmart contract information value logistics 13 gas spend post transaction remaining gas refunded sender fig 5 gas refund model gas required contract execution exceeds gas available transaction actions transaction state changes reverted modified permanent storage reverted original state including spending contract funds spent despite reversion gas transaction consumed given processing miner computing resources spent qtum uses gas model ethereum expect gas schedule e gas price evm opcode significantly differ ethereum exact values determined comparing existing prices ethereum processing blockchain resources required opcode qtum creating contract funding deployment transaction user specifies specific items gas gaslimit determines consumable gas contract execution second item gasprice set exact price unit gas qtum satoshis currently smaller unit bitcoin currency blockchain records maximum qtum expenditure contract execution equates multiplication gaslimit gasprice maximum expenditure exceeds transaction fee provided x0c14 alex norta transaction invalid mined processed remaining transaction fee subtracting maximum expenditure transaction size fee analogous standard bitcoin fee model determine appropriate priority transaction miners consider variables transaction size fee match total size transaction e usually determined minimum coins kilobyte formula second variable gasprice contract execution combination pos miners choose important profitable transactions process include block consequently exists free market fee model miners users optimizing best fee suits transaction speed price willing pay refunds utxo model funds sent miners transaction fees non negotiable impossible miner partially refund fee transaction easier miner process expected gasmodel useful method exist refund funds sender possible roll state transaction runs gas return gas fees miners refunding gas fees qtum enabled creating new outputs coinbase transaction miner add new block validation consensus rule ensure refunding outputs required exist coinbase transaction miners choose refund gas refund given sender transaction fund copying output script security reasons script currently standard pay pubkeyhash pay scripthash script plan lift restriction security studies reference op exec assign following format assign contract funds inputs push order xe2 x80 x93 xe2 x80 x93 xe2 x80 x93 xe2 x80 x93 xe2 x80 x93 xe2 x80 x93 transaction hash spending optional version number vm version use currently 1 gas limit maximum gas exec gas price qtum gas unit data data passed smart contract smart contract address outputs pop order xe2 x80 x93 spendable funds currently spendable consequently example exec assign 1 10000 100 0xabcd1234 3d655b14393b55a4dec8ba043bb286afa96af485 exec assign x0csmart contract information value logistics 15 vm execution results gas exception vout spent transaction block redeem script op txhash generated vout transaction pubkeyhash script taken vin 0 prevout script early version qtum pubkeyhash senders allowed vm funding transactions forms accepted blocks result vm execution msg sender evm xe2 x80 x9d0 xe2 x80 x9d gas gas refund needed results contract keeping funds partial refund model pertaining gas model necessary refund unspent portion reasons hand users spend large funds ensure contract executed properly unused gas returns qtum refund return address gas expressed blockchain vin 0 prevout script sending transaction gas sent contract standard bitcoin transaction fee mechanism new fee model slightly augments transaction fee gas fee gas limit xe2 x88 x97 gas price t x f e e v n xe2 x88 x92 vout t x r e l y f e e t x f e e xe2 x88 x92 g s f e e refund g s f e e xe2 x88 x92 gas proposal exists enabling miners evaluate tx relay fee gas price single xe2 x80 x9dcredit price xe2 x80 x9d value determining transaction priority contract execution gas tokens subtracted total fee e multiplying gas price completing contract execution remainder gas fee returned given gas return script adding output coinbase transaction miners use retrieve block reward coinbase added vout pubkeyhash vin 0 prevout order receive gas refund spent pubkeyhash vout gas refund remains miner gas condition funds sent remain contract note currently possible evm contract execution transaction case arise contract executions attempt share transaction fee scenario enabled solving existing problems multiple evm executions transaction current design support multiple contract executions transaction important gas edge cases miners cautious contract gas fund return scripts script output causes block exceed maximum size contract transaction block instead gas return script execution place mined block miners ensure sufficient capacity exists candidate block gas return script attempting execute contract following rule results contract requiring repeated execution refund script x0c16 alex norta fit current block gas funds return vout requirement exists returning funds consensus critical transaction fee includes gas fee transaction invalid adding block results negative gas refund gas fee lower transaction fee transaction output script valid op exec op exec assign opcode limits scripting abilities preferable potential recursion multiple execution problems consequently static analysis suffices determine script invalid blockchain oriented qtum technicalities describe conceptually management smart contract lifecycles note conceptual presentation sequel backed scientific literature 12 13 24 18 26 27 32 3 smart contract management stipulated assume lifecycle management essential securing smart contracts proper vetting potential collaborating parties takes place enactment consider real life case failed seafood delivery15 business transaction conflict emerges underspecified conventional contract cc eu company buyer orders 12 920 kg cuttlefish south asian company seller cc liability product quality rests seller carrier obtains goods underspecification pertains quality goods specified cc buyer check goods transferral shipping company carrier smart contract alternative resolves underspecification conflict exist cc section 3 1 presented qtum framework goal model reflects properties smart contract lifecycle fully formalized 18 26 27 32 section 3 2 gives small lifecycle example seafoodshipment case 3 1 lifecycle management goals discussing goals use following approach agent oriented modeling aom method 38 socio technical requirements engineering approach takes account humans belong organizations use technology collaborate solving problems section use aom goal model type capture important socio technical behavioral features qtum smart contract system supports running case goal models enhance communication technical non technical stakeholders increase understanding problem domain note aom goal models instrumental 39 novel agile software development techniques 15 http cisgw3 law pace edu cases 090324s4 html x0csmart contract information value logistics 17 fig 6 modeling elements aom goal models goal model comprises main elements depicted figure 6 functional requirements refer goals depicted parallelograms roles depict sticky men non functional requirements variants quality goals software related non functions requirements depicted clouds human related emotional goals depicted ellipses goal model starts central root value proposition atomic consequently value proposition decomposed tree hierarchy sub goals sub goal represents aspect achieving parent goal 21 lowest sub goal atomic goals assigned roles quality emotional goals inherited lower level goals value proposition qtum framework root goal qtum framework depict figure 7 value proposition crossorganizational information value transfer logistics automation split complex value proposition goals smart contract lifecycle management 26 27 32 e setup rollout enactment rollback termination refined goals explore section 3 2 fig 7 qtum value proposition lifeycle management refinement 26 27 18 essential emotional goal industry adoption figure 7 trust sociotechnical qtum system 34 reliably perform intended behavior case trust pertains dependencies humans use technology achieve goals consider economically viable easy adopt additional emotional goals influence widespread industry diffusion means x0c18 alex norta qtum system results economic return investment means personal barrier entry working qtum low quality goals affiliated value proposition affect refining parts qtum system quality goals derive reference architecture 28 cross organizational business process aware collaboration quality goals structured accordance 9 17 following quality goals discernible system execution time m odif iable means qtum system changes adapts lifecycle business context additionally harmonizes cross organizationally heterogeneous system environments comprising regularly updating commercial software integrable systems consists separately developed integrated components interface protocols components match integrability components qtum assured specify quality goals qtum discernible runtime interoperable means qtum interoperate runtime systems supporting business functions planning logistics production external partner systems dynamic interoperability challenges business conceptual technical heterogeneity secure refers resisting unauthorized attempts usage denial service providing services trusted users good reputation address security trust reputation problems strategies possible qtum blockchain supported authentication service checks collaborating parties monitors inspects logs network events communication system encrypted highly automated collaboration requires systems cover entire smart contract lifecycle qtum provide possibilities high degree meaningful collaboration automation processes tedious repetitive work allowing humans focus remaining creative action f lexible collaboration highly dynamic process enacting activities diverse partners exchanging heterogeneous data 25 qtum enable diverse cross organizational collaboration scenarios harmonizing heterogeneous concepts technologies u sable means qtum easy use cross organizational information logistics automation decomposes areas error avoidance anticipate prevent commonly occurring collaboration errors error handling system support user recover errors learnability refers required learning time users master qtum system finally exist quality goals architecture specific completeness quality qtum comprising set components smart contract lifecycle management scalable refers ability qtum combine collaborating parties configuration applicable means qtum instrumental automating cross organizational information logistics value transfers p ortable means qtum supports information logistics independent industrial domain collaboration heterogeneity respect business conceptual technological system infrastructure note includes mobile devices p erf ormant means computational communicational strain low information logistics automation important ensure x0csmart contract information value logistics 19 phases smart contract lifecycle carried desirable response time exponential need computing power 3 2 lifecycle management example goal model section 3 1 map figure 8 projecting running seafood case modeling notation figure 8 business process model notation bpmn 22 complete lifecycle formalized 26 27 18 green circle denotes start lifecycle red circle lifecycle end rectangles plus signs called subprocesses correspond lifecycle stages section 3 1 subprocess compound activity hides lower level business process details fig 8 qtum smart contract lifeycle management starting point smart contract lifecycle figure 8 business case seafood transportation requires cross organizational information logistics automation assuming exists collaboration hub 29 serves preparation platform inception smart contracts designer creates template business network model bnm service types inserted roles bnm template enters population phase roles affiliated respective service types filled organizations collaborate smart contract e bank2 seller f ridge1 carrier f ridge2 buyer bank1 note possible candidate organizations compete filling specific role order reinforce desire fill role potential partner organizations match service offer service type role affiliated service consumer evaluate proposal decide service offer acceptable roles filled service types match acceptable service offers smart contract negotiation commences assume party x0c20 alex norta running seafood delivery case desire disagree bring setup phase sudden end instead buyer provides counter offer introduces obligations pertaining temperature inside containers seafood stored assume shipment containers equipped internet things iot 15 sensors inform shipper seller buyer realtime temperature threshold violation occurs counteroffer buyer defines case price reduction follows accordance reduced quality seafood temperature change results seafood fit consumption buyer right reject purchasing shipment arrival counteroffer accepted parties consensus occurs prerequisite contract establishment smart contract coordinating agent distributed governance infrastructure dgi deduced party running case receives local contract copy set respective obligations deduced example obligation carrier temperature inside seafood shipping container 20c obligations observed monitors assigned business network model agents bnma connect iot sensors collaborating parties assign respective private processes 12 emerging dgi example assume peer peer payment bitcoins buyer purchase euros purchase payment bank1 involves process comprises compliance reporting steps government impose regulations use crypto currencies enabling information exchanges bank1 bank2 seller communication endpoints established way management seller compliance data automated assuming temperature threshold obligation violation occurs domain fridge1 assigned bnma escalates event buyer checks breach severity temperature breach lasts period time resulting diminished seafood quality allows successful sale lower price buyer tolerates response requests cooling different company slips role fridge1 assuming seafood severely spoiled sold target country buyer triggers disruptive rollback collapses transaction seafood shipment arrives buyer agreed state payment seller bank2 complete termination stage dissolves dgi releases collaborating parties relationships detailed collaboration elements lifecycle management figure 8 coordinates 4 value transfer protocol integral qtum framework notion value transfer protocol vtp orchestrates cross organizational information logistics value x0csmart contract information value logistics 21 transfers line value proposition figure 7 depicts consequently section 4 1 describes relationship process types form vtp section 4 2 discusses need specific smart contract language utility specify vtps finally section 4 3 discusses features vtp supporting language versus solidity ethereum uses 4 1 cross organizational processes vtp comprises different types collaborating processes figure 9 shows simplified bnm bpmn notation seafood delivery section 3 introduces bnm assumes sequence subprocesses placeholders service types 12 13 labels indicate roles organizations seafood delivery bnm fig 9 qtum bnm assume bnm comprises tasks connecting service type subprocesses establishing choreography control flow simplicity figure 9 depicts unlabeled choreographing tasks split join bnm commences seafood seller informing bank prepare international currency transaction seafood cooled carrier performs shipping destination destination country seafood cooled local bank processes currency transaction countries finally buyer receives seafood local sales carrier service type process view fig 10 externalized service type process view carrier subprocess bnm assumption candidate organizations exist filling role seafood carrier figure 10 depicts x0c22 alex norta simplified example lower level refinement form service type process view 12 13 simplified process figure 10 assumes carrier receives seafood fridge source country charges bank seller parallel branches require temperature monitoring preparing delivery papers informing cooling company target company place simultaneously candidate organization serviceproviding carrier promises adhering simplified process note collaboration hub 30 offer service type process views matching corresponding service offering organizations local contract carrier local contract fig 11 local carrier contract vtp element figure 11 shows local contract carrier uses internally note differently service type process view figure 10 local contract comprises additional tasks labels inform buyer charge bank2 local contract subclass service type process view respect enactment behavior 12 13 e tasks process view experienced externally carrier option insert hidden additional steps privacy assuring way constitute competitive advantage interest external display 4 2 qtum smart contract language support vtp scenario section 4 1 current smart contract lingua franca solidity required utility level respect contained concepts properties instead objective develop qtum smart contract language qscl compiler comparatively better utility vtp management high level qscl concepts properties figure 12 depicts vtp scenario section 4 1 resembles esourcing framework dedicated language exists esourcing markup language esml 31 currently specified semantic web domain intend map concepts properties esml blockchain domain creating qscl language compiler novel qtum virtual machine briefly refer reader 31 details properties figure 12 organize conceptual interrogatives qscl instance x0csmart contract information value logistics 23 qscl company contact data resource section data definition section business context provisions legal context provisions exchanged value process conjoinment lifecycle definition mapping qtum smart contract language party company data lifecycle mapping active node label mapping monitorability exchanged value fig 12 properties concepts future qtum smart contract language 31 resembles bnm definition figure 9 concept qscl comprises constructs defining contracting parties uniquely involved resources data definitions concept specifies business contextand legal context provisions specific smart contract holds concept allows defining exchanged values service type process views figure 10 lifecycle definitions process views elementary tasks respectively qscl instance service type process views defined comparable figure 9 finally conjoinment constructs specifically defined exchange channels cross organizational data flow monitorability constructs allow flexible definition dedicated task monitoring uses polling messaging principle 4 3 comparative discussion smart contract ontology 31 examine informally suitability existing solidity versus qscl construct qtum framework general observation solidity language focus low level blockchain manipulation commands javascript resembling syntax possible import party apis perform external function calls socalled external functions solidity smart contract interface called contracts transactions turing completeness solidity principle possible define cumbersome supports concepts properties smart x0c24 alex norta contract ontology qscl embodies concepts pattern based design process awareness matching processes etc adopted way solidity respect inventing cumbersome workarounds recent conference paper publication 43 uses solidity demonstrate feasibility untrusted business process monitoring execution smart contracts stress solidity historically backed formal verification means differently design inception qscl 31 formally verifiable expressiveness possible know ahead enactment contract correct free security issues solidity related security incident16 triggered recently development application verification tools why17 solidifier18 casper19 likely leads shift proof work proof stake ethereum 5 conclusions whitepaper presents qtum framework novel smart contract blockchain technology solution specific qtum transaction processing implementation uses proof stake validation furthermore qtum integrates ethereum virtual machine evm bitcoin unspent transaction output protocol note qtum evm constantly remains backwards compatible additionally qtum framework recognizes smart contract lifecycle management important supporting proper security vetting collaborating parties support qtum lifecycle management current lingua franca solidity lacks suitability consequently emerging qtum framework requires novel smart contract language enhanced utility adoption proof stake qtum constitutes considerable saving computational effort scaling ethereum alternative uses proof work ethereum plans adopt proof stake unclear new version released use unspent transaction outputs scalable comparison account management ethereum combination simple payment verification qtum develops smartcontract mobile device solution scaling ethereum solution allow mobile solutions qtum aims achieve democratized highly distributed proof stake transaction validation mobile strategy qtum framework clear understanding quality criteria future developments satisfy respect functional requirements qtum plans develop application layer smart contract lifecycle management importantly lifecycle management important vetting collaborating parties reduce security breaches ethereum recently experienced resulting multiple hardforks 16 17 18 19 https www wired com 2016 06 50 million hack showed dao human http why3 lri fr https hack ether camp idea solidifier xe2 x80 x94formal verification solidity programs http www coindesk com ethereum casper proof stake rewrite rules blockchain x0csmart contract information value logistics 25 value transfer protocol information logistics qtum comprises business network model choreographing collaborating organizations provide services local contracts match specified runtime behavior service type process views business network model multi layered smart contract management layer collaborating parties protect privacy business secrets pose competitive advantage hiding extension steps local contracts summary qtum framework recognizes smart contracts sociotechnical artifacts account essential quality requirements achieving widespread user adoption ongoing real life industry projects qtum applications result continuous empirical requirements harvesting mobile strategy support highly distributed proof stake transaction processing aims significant advancement state art qtum recognizes smart contract lifecycle management requires applicationlayer development sophisticated end user experience current solutions pay attention sufficiently references 1 m antonopoulos mastering bitcoins 2014 2 bentov gabizon mizrahi cryptocurrencies proof work pages 142 xe2 x80 x93157 springer berlin heidelberg berlin heidelberg 2016 3 k bhargavan delignat lavaud c fournet gollamudi g gonthier n kobeissi n kulatova rastogi t sibut pinote n swamy s zanellabe xcc x81guelin formal verification smart contracts short paper proceedings 2016 acm workshop programming languages analysis security plas xe2 x80 x9916 pages 91 xe2 x80 x9396 new york ny usa 2016 acm 4 biryukov d khovratovich equihash asymmetric proof work based generalized birthday problem proceedings ndssa xcc x82a xcc x86z xcc x8116 21 xe2 x80 x9324 february 2016 san diego usa isbn 1 891562 41 x 2016 5 b bisping p d brodmann t jungnickel c rickmann h seidler stu xcc x88ber wilhelm weidner k peters u nestmann mechanical verification constructive proof flp international conference interactive theorem proving pages 107 xe2 x80 x93122 springer 2016 6 o bussmann future finance fintech tech disruption orchestrating innovation pages 473 xe2 x80 x93486 springer international publishing cham 2017 7 c cachin architecture hyperledger blockchain fabric workshop distributed cryptocurrencies consensus ledgers 2016 8 k christidis m devetsikiotis blockchains smart contracts internet things ieee access 4 2292 xe2 x80 x932303 2016 9 l chung b nixon e yu j mylopoulos non functional requirements software engineering volume 5 springer science business media 2012 10 k croman c decker eyal e gencer juels kosba miller p saxena e shi e gu xcc x88n sirer d song r wattenhofer scaling decentralized blockchains pages 106 xe2 x80 x93125 springer berlin heidelberg berlin heidelberg 2016 11 n emmadi h narumanchi reinforcing immutability permissioned blockchains keyless signatures xe2 x80 x99 infrastructure proceedings 18th x0c26 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 alex norta ternational conference distributed computing networking icdcn xe2 x80 x9917 pages 46 1 xe2 x80 x9346 6 new york ny usa 2017 acm r eshuis norta o kopp e pitkanen service outsourcing process views ieee transactions services computing 99 preprints 1 2013 r eshuis norta r roulaux evolving process views information software technology 80 20 xe2 x80 x93 35 2016 d frey m x makkes p l roman f ta xc4 xb1 xcc x88ani s voulgaris bringing secure bitcoin transactions smartphone proceedings 15th international workshop adaptive reflective middleware arm 2016 pages 3 1 xe2 x80 x933 6 new york ny usa 2016 acm j gubbi r buyya s marusic m palaniswami internet things iot vision architectural elements future directions future generation computer systems 29 7 1645 xe2 x80 x93 1660 2013 kiayias konstantinou russell b david r oliynykov provably secure proof stake blockchain protocol 2016 g kotonya sommerville requirements engineering processes techniques wiley publishing 1998 l kutvonen norta s ruohomaa inter enterprise business transaction management open service ecosystems enterprise distributed object computing conference edoc 2012 ieee 16th international pages 31 xe2 x80 x9340 ieee 2012 l luu d h chu h olickel p saxena hobor making smart contracts smarter proceedings 2016 acm sigsac conference computer communications security ccs xe2 x80 x9916 pages 254 xe2 x80 x93269 2016 l luu v narayanan c zheng k baweja s gilbert p saxena secure sharding protocol open blockchains proceedings 2016 acm sigsac conference computer communications security ccs xe2 x80 x9916 pages 17 xe2 x80 x9330 new york ny usa 2016 acm j marshall agent based modelling emotional goals digital media design projects international journal people oriented programming ijpop 3 1 44 xe2 x80 x9359 2014 business process model notation bpmn version 2 0 object management group specification 2011 http www bpmn org s nakamoto bitcoin peer peer electronic cash system consulted 1 2012 28 2008 n c narendra norta m mahunnah l ma f m maggi sound conflict management resolution virtual enterprise collaborations service oriented computing applications 10 3 233 xe2 x80 x93251 2016 norta exploring dynamic inter organizational business process collaboration phd thesis technology university eindhoven department information systems 2007 norta creation smart contracting collaborations decentralized autonomous organizations pages 3 xe2 x80 x9317 springer international publishing cham 2015 norta establishing distributed governance infrastructures enacting crossorganization collaborations pages 24 xe2 x80 x9335 springer berlin heidelberg berlin heidelberg 2016 norta p grefen n c narendra reference architecture managing dynamic inter organizational business processes data knowledge engineering 91 0 52 xe2 x80 x93 89 2014 x0csmart contract information value logistics 27 29 norta l kutvonen cloud hub brokering business processes service xe2 x80 x9drendezvous xe2 x80 x9d platform supports semi automated background checked partner discovery cross enterprise collaboration srii global conference srii 2012 annual pages 293 xe2 x80 x93302 july 2012 30 norta l kutvonen cloud hub brokering business processes service xe2 x80 x9drendezvous xe2 x80 x9d platform supports semi automated background checked partner discovery cross enterprise collaboration annual srii global conference 0 293 xe2 x80 x93302 2012 31 norta l ma y duan rull m ko xcc x83lvart k taveter econtractual choreography language properties cross organizational business collaboration journal internet services applications 6 1 1 xe2 x80 x9323 2015 32 norta b othman k taveter conflict resolution lifecycles governed decentralized autonomous organization collaboration proceedings 2015 2nd international conference electronic governance open society challenges eurasia egose xe2 x80 x9915 pages 244 xe2 x80 x93257 new york ny usa 2015 acm 33 aafaf ouaddah anas abou elkalam abdellah ait ouahman novel privacy preserving access control model based blockchain technology iot pages 523 xe2 x80 x93533 springer international publishing cham 2017 34 e paja k chopra p giorgini trust based specification sociotechnical systems data knowledge engineering 87 339 xe2 x80 x93 353 2013 35 j poon t dryja bitcoin lightning network scalable chain instant payments 2015 36 m rosenfeld overview colored coins white paper bitcoil co il 2012 37 p serguei probabilistic analysis nxt forging algorithm ledger 1 69 xe2 x80 x9383 2016 38 l sterling k taveter art agent oriented modeling mit press 2009 39 t tenso norta vorontsova evaluating novel agile requirements engineering method case study proceedings 11th international conference evaluation novel software approaches software engineering volume 1 enase pages 156 xe2 x80 x93163 2016 40 p vasin blackcoina xcc x82a xcc x86z xcc x81s proof stake protocol v2 2014 41 m vukolic xcc x81 quest scalable blockchain fabric proof work vs bft replication international workshop open problems network security pages 112 xe2 x80 x93125 springer 2015 42 m vukolic xcc x81 quest scalable blockchain fabric proof work vs bft replication pages 112 xe2 x80 x93125 springer international publishing cham 2016 43 weber x xu r riveret g governatori ponomarev j mendling untrusted business process monitoring execution blockchain pages 329 xe2 x80 x93347 springer international publishing cham 2016 44 g wood ethereum secure decentralised generalised transaction ledger ethereum project yellow paper 2014 x0c