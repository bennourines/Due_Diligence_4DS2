[
  {
    "text": "[Section 1] b filecoin decentralized storage network protocol labs july 19 2017 abstract internet middle revolution centralized proprietary services replaced decentralized open ones trusted parties replaced verifiable computation brittle location addresses replaced resilient content addresses inefficient monolithic services replaced peer peer algorithmic markets bitcoin ethereum blockchain networks proven utility decentralized transaction ledgers public ledgers process sophisticated smart contract applications transact crypto assets worth tens billions dollars systems instances internetwide open services participants form decentralized network providing useful services pay central management trusted parties ipfs proven utility content addressing decentralizing web serving billions files global peer peer network liberates data silos survives network partitions works offline routes censorship gives permanence digital information filecoin decentralized storage network turns cloud storage algorithmic",
    "metadata": {
      "chunk_id": "0283826b4206ce4bd033a5043342acd0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 2] network liberates data silos survives network partitions works offline routes censorship gives permanence digital information filecoin decentralized storage network turns cloud storage algorithmic market market runs blockchain native protocol token called xe2 x80 x9cfilecoin xe2 x80 x9d miners earn providing storage clients conversely clients spend filecoin hiring miners store distribute data bitcoin filecoin miners compete blocks sizable rewards filecoin mining power proportional active storage directly provides useful service clients unlike bitcoin mining usefulness limited maintaining blockchain consensus creates powerful incentive miners amass storage rent clients protocol weaves amassed resources self healing storage network anybody world rely network achieves robustness replicating dispersing content automatically detecting repairing replica failures clients select replication parameters protect different threat models protocol xe2 x80 x99s cloud storage network provides",
    "metadata": {
      "chunk_id": "a9f8ce30eed7e41d38723a340b178d94",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 3] dispersing content automatically detecting repairing replica failures clients select replication parameters protect different threat models protocol xe2 x80 x99s cloud storage network provides security content encrypted end end client storage providers access decryption keys filecoin works incentive layer ipfs 1 provide storage infrastructure data especially useful decentralizing data building running distributed applications implementing smart contracts work introduces filecoin network gives overview protocol walks components detail b formalizes decentralized storage network dsn schemes properties constructs filecoin dsn c introduces novel class proof storage schemes called proof replication allows proving replica data stored physically independent storage d introduces novel useful work consensus based sequential proofs replication storage measure power e formalizes verifiable markets constructs markets storage market retrieval market govern data written read filecoin respectively f",
    "metadata": {
      "chunk_id": "42621172981f5f20c38251947ac7cb91",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 4] consensus based sequential proofs replication storage measure power e formalizes verifiable markets constructs markets storage market retrieval market govern data written read filecoin respectively f discusses use cases connections systems use protocol note filecoin work progress active research way new versions paper appear https filecoin io comments suggestions contact research filecoin io 1 x0ccontents 1 introduction 1 1 elementary components 1 2 protocol overview 1 3 paper organization 4 4 4 4 2 definition decentralized storage network 2 1 fault tolerance 2 2 properties 8 8 8 3 proof replication proof spacetime 3 1 motivation 3 2 proof replication 3 3 proof spacetime 3 4 practical porep post 3 5 usage filecoin 10 10 10 11 11 14 4 filecoin dsn construction 4 1 setting 4 2 data structures 4 3 protocol 4 4 guarantees requirements 16 16 17 17 21 5 filecoin storage retrieval 5 1 verifiable markets 5 2 storage market 5 3 retrieval market markets 24 24 24 27 6 useful work consensus 30 6",
    "metadata": {
      "chunk_id": "d89abc8e3e91f7c185ed948a45772e44",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 5] 4 3 protocol 4 4 guarantees requirements 16 16 17 17 21 5 filecoin storage retrieval 5 1 verifiable markets 5 2 storage market 5 3 retrieval market markets 24 24 24 27 6 useful work consensus 30 6 1 motivation 30 6 2 filecoin consensus 30 7 smart contracts 33 7 1 contracts filecoin 33 7 2 integration systems 33 8 future work 34 8 1 going work 34 8 2 open questions 34 8 3 proofs formal verification 35 2 x0clist figures 1 2 3 4 5 6 7 8 9 10 11 12 13 sketch filecoin protocol illustration filecoin protocol illustration underlying mechanism post prove proof replication proof spacetime protocol sketches data structures dsn scheme example execution filecoin dsn description protocols filecoin dsn description manage protocol filecoin dsn generic protocol verifiable markets orders data structures retrieval storage markets detailed storage market protocol detailed retrieval market protocol leader election expected consensus protocol 3 6 7 14 15 17 21 22 23 24 26 28 29 32 x0c1 introduction",
    "metadata": {
      "chunk_id": "e3a9457eac7f8b4e1e4a478fe26de9f5",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 6] retrieval storage markets detailed storage market protocol detailed retrieval market protocol leader election expected consensus protocol 3 6 7 14 15 17 21 22 23 24 26 28 29 32 x0c1 introduction filecoin protocol token blockchain runs novel proof called proof spacetime blocks created miners storing data filecoin protocol provides data storage retrieval service network independent storage providers rely single coordinator 1 clients pay store retrieve data 2 storage miners earn tokens offering storage 3 retrieval miners earn tokens serving data 1 1 elementary components filecoin protocol builds novel components 1 decentralized storage network dsn provide abstraction network independent storage providers offer storage retrieval services section 2 later present filecoin protocol incentivized auditable verifiable dsn construction section 4 2 novel proofs storage present novel proofs storage section 3 1 proof ofreplication allows storage providers prove data replicated uniquely dedicated",
    "metadata": {
      "chunk_id": "68ff2b1d5deddbe1419820b45bee4bac",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 7] auditable verifiable dsn construction section 4 2 novel proofs storage present novel proofs storage section 3 1 proof ofreplication allows storage providers prove data replicated uniquely dedicated physical storage enforcing unique physical copies enables verifier check prover deduplicating multiple copies data storage space 2 proof spacetime allows storage providers prove stored data specified time 3 verifiable markets model storage requests retrieval requests orders decentralized verifiable markets operated filecoin network section 5 verifiable markets ensure payments performed service correctly provided present storage market retrieval market miners clients respectively submit storage retrieval orders 4 useful proof work construct useful proof work based proof ofspacetime consensus protocols miners need spend wasteful computation blocks instead store data network 1 2 protocol overview xe2 x80 xa2 filecoin protocol decentralized storage network construction built blockchain native",
    "metadata": {
      "chunk_id": "0fbf6a2550d832531f274bf24935e924",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 8] miners need spend wasteful computation blocks instead store data network 1 2 protocol overview xe2 x80 xa2 filecoin protocol decentralized storage network construction built blockchain native token clients spend tokens storing retrieving data miners earn tokens storing serving data xe2 x80 xa2 filecoin dsn handle storage retrieval requests respectively verifiable markets storage market retrieval market clients miners set prices services requested offered submit orders markets xe2 x80 xa2 markets operated filecoin network employs proof spacetime proof ofreplication guarantee miners correctly stored data committed store xe2 x80 xa2 finally miners participate creations new blocks underlining blockchain influence miner block proportional storage currently use network sketch filecoin protocol nomenclature defined later paper shown figure 1 accompanied illustration figure 2 1 3 paper organization remainder paper organized follows present definition requirements theoretical dsnscheme section",
    "metadata": {
      "chunk_id": "8f49895c51ef059006149ff632b1baba",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 9] defined later paper shown figure 1 accompanied illustration figure 2 1 3 paper organization remainder paper organized follows present definition requirements theoretical dsnscheme section 2 section 3 motivate define present proof replication proof spacetime protocols filecoin cryptographically verify data continuously 4 x0cstored accordance deals section 4 describes concrete instantiation filecoin dsn describing data structures protocols interactions participants section 5 defines describes concept verifiable markets implementations storage market retrieval market section 6 motivates describes use proof spacetime protocol demonstrating evaluating miner xe2 x80 x99s contribution network necessary extend blockchain assign block reward section 7 provides brief description smart contracts filecoin conclude discussion future work section 8 5 x0cfilecoin protocol sketch network epoch t ledger l storage time 1 new block check block valid format b check transactions valid c check orders valid",
    "metadata": {
      "chunk_id": "5aedb72e08d3b559049f7bea68d9b1ae",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 10] conclude discussion future work section 8 5 x0cfilecoin protocol sketch network epoch t ledger l storage time 1 new block check block valid format b check transactions valid c check orders valid d check proofs valid e check pledges valid f discard block fails 2 new order o introduced t add o storage market xe2 x80 x99s orderbook b o bid lock o funds c o ask lock o space d o deal run assignorders 3 o storage market xe2 x80 x99s orderbook check o expired canceled xe2 x80 xa2 remove o orderbook xe2 x80 xa2 return unspent o funds xe2 x80 xa2 free o space alloctable b o deal check expected proofs exist running manage repairorders xe2 x80 xa2 missing penalize m xe2 x80 x99s pledge collateral xe2 x80 xa2 proofs missing xe2 x88 x86fault epochs cancel order introduce market xe2 x80 xa2 piece retrieved reconstructed network cancel order fund client 1 renew expired pledges manage pledgesector 2 pledge new storage manage pledgesector 3 submit new ask order addorder epoch t 1 oask orderbook find",
    "metadata": {
      "chunk_id": "c37b81e1414eb19aab11eb28482bc4af",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 11] reconstructed network cancel order fund client 1 renew expired pledges manage pledgesector 2 pledge new storage manage pledgesector 3 submit new ask order addorder epoch t 1 oask orderbook find matched orders matchorders b start new deal contacting matching client 2 sector pledged generate proof storage manage provesector b time post proof xe2 x88 x86proof epochs submit blockchain receiving piece p client c 1 check piece size specified order obid 2 create odeal sign send c 3 store piece sector 4 sector run manage sealsector retrieval time 1 gossip ask orders network 2 listen bid orders network retrieval request c client time 1 start payment channel c 2 split data multiple parts 3 send parts payments received 1 submit new storage orders addorders find matching orders matchorders b send file matched miner m 2 submit new retrieval orders addorders find matching orders matchorders b create payment channel m receiving odeal storage miners m 1 sign odeal 2 submit signed odeal blockchain",
    "metadata": {
      "chunk_id": "6ca3c6b89eccff94451f275b60e18541",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 12] file matched miner m 2 submit new retrieval orders addorders find matching orders matchorders b create payment channel m receiving odeal storage miners m 1 sign odeal 2 submit signed odeal blockchain addorders receiving p retrieval miners m 1 verify p valid requested 2 send micropayment m figure 1 sketch filecoin protocol 6 x0corder matching settlement bid storage market chain deal ask challenge deal deal response payment orderbook filecoin blockchain transactions allocation table incremental micropayments bid retrieval market deal ask chain deal data sent parts orders gossiped chain lock storage miner client claim micropayments signed transfer filecoin send piece data query order figure 2 illustration filecoin protocol showing overview client miner interactions storage retrieval markets shown blockchain respectively time advancing order matching phase left settlement phase right note micropayments retrieval client lock funds microtransaction 7 x0c2 definition decentralized storage",
    "metadata": {
      "chunk_id": "86c44914c8f5dbe42417e12599fad9e6",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 13] shown blockchain respectively time advancing order matching phase left settlement phase right note micropayments retrieval client lock funds microtransaction 7 x0c2 definition decentralized storage network introduce notion decentralized storage network dsn scheme dsns aggregate storage offered multiple independent storage providers self coordinate provide data storage data retrieval clients coordination decentralized require trusted parties secure operation theses systems achieved protocols coordinate verify operations carried individual parties dsns employ different strategies coordination including byzantine agreement gossip protocols crdts depending requirements system later section 4 provide construction filecoin dsn definition 2 1 dsn scheme xce xa0 tuple protocols run storage providers clients manage xe2 x80 xa2 data xe2 x86 x92 key clients execute protocol store data unique identifier key xe2 x80 xa2 key xe2 x86 x92 data clients execute protocol retrieve data currently stored",
    "metadata": {
      "chunk_id": "f2069807f9a7a5697a85fe75fc25f42f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 14] clients manage xe2 x80 xa2 data xe2 x86 x92 key clients execute protocol store data unique identifier key xe2 x80 xa2 key xe2 x86 x92 data clients execute protocol retrieve data currently stored key xe2 x80 xa2 manage network participants coordinates manage protocol control available storage audit service offered providers repair possible faults manage protocol run storage providers conjunction clients network auditors1 dsn scheme xce xa0 guarantee data integrity retrievability tolerate management storage faults defined following sections 2 1 2 1 1 fault tolerance management faults define management faults byzantine faults caused participants manage protocol dsn scheme relies fault tolerance underlining manage protocol violations faults tolerance assumptions management faults compromise liveness safety system example consider dsn scheme xce xa0 manage protocol requires byzantine agreement ba audit storage providers protocol network receives proofs storage storage providers runs ba",
    "metadata": {
      "chunk_id": "cde31de09f691189ca1aec4ae1c90c4a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 15] liveness safety system example consider dsn scheme xce xa0 manage protocol requires byzantine agreement ba audit storage providers protocol network receives proofs storage storage providers runs ba agree validity proofs ba tolerates f faults n total nodes dsn tolerate f n 2 faulty nodes violations assumptions audits compromised 2 1 2 storage faults define storage faults byzantine faults prevent clients retrieving data e storage miners lose pieces retrieval miners stop serving pieces successful execution f m tolerant results input data stored m independent storage providers n total tolerate f byzantine providers parameters f m depend protocol implementation protocol designers fix f m leave choice user extending data data f m execution stored data successful fewer f faulty storage providers example consider simple scheme protocol designed storage provider stores data scheme m n f m xe2 x88 x92 1 f m xe2 x88 x92 1 schemes designed erasure coding storage providers store special portion",
    "metadata": {
      "chunk_id": "2e7750f5fd032b872346d80b62e46902",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 16] example consider simple scheme protocol designed storage provider stores data scheme m n f m xe2 x88 x92 1 f m xe2 x88 x92 1 schemes designed erasure coding storage providers store special portion data x m storage providers required retrieve data case f m xe2 x88 x92 x 2 2 properties describe required properties dsn scheme present additional properties required filecoin dsn 1 case manage protocol relies blockchain consider miners auditors verify coordinate storage providers 8 x0c2 2 1 data integrity property requires bounded adversary convince clients accept altered falsified data end execution definition 2 2 dsn scheme xce xa0 provides data integrity successful execution data d key k computationally bounded adversary convince client accept d0 d0 6 d end execution identifier k 2 2 2 retrievability property captures requirement given fault tolerance assumptions xce xa0 data successfully stored xce xa0 storage providers continue follow protocol clients eventually retrieve data",
    "metadata": {
      "chunk_id": "0717e42dbf12ec9ed684ae399ead77a8",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 17] 2 2 retrievability property captures requirement given fault tolerance assumptions xce xa0 data successfully stored xce xa0 storage providers continue follow protocol clients eventually retrieve data definition 2 3 dsn scheme xce xa0 provides retrievability successful execution data key exists successful execution key client retrieves data 2 2 2 3 properties dsns provide properties specific application define key properties required filecoin dsn public verifiability auditability incentive compatibility definition 2 4 dsn scheme xce xa0 publicly verifiable successful network storage providers generate proof data currently stored proof storage convince efficient verifier knows key access data definition 2 5 dsn scheme xce xa0 auditable generates verifiable trace operation checked future confirm storage stored right duration time definition 2 6 dsn scheme xce xa0 incentive compatible storage providers rewarded successfully offering storage retrieval service penalized misbehaving storage",
    "metadata": {
      "chunk_id": "b4fe66654f0515e0774d9a7b824eccf2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 18] storage stored right duration time definition 2 6 dsn scheme xce xa0 incentive compatible storage providers rewarded successfully offering storage retrieval service penalized misbehaving storage providers xe2 x80 x99 dominant strategy store data 2 definition guarantee succeed eventually returns data scheme fair 9 x0c3 proof replication proof spacetime filecoin protocol storage providers convince clients stored data paid store practice storage providers generate proofs storage pos blockchain network clients verifies section motivate present outline implementations proof replication porep proof spacetime post schemes filecoin 3 1 motivation proofs storage pos schemes provable data possession pdp 2 proof retrievability por 3 4 schemes allow user e verifier v outsources data d server e prover p repeatedly check server storing d user verify integrity data outsourced server efficient way efficiently downloading data server generates probabilistic proofs possession sampling random set blocks",
    "metadata": {
      "chunk_id": "d107326edcb39b8f559ac2ff3ceb68d1",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 20] malicious miners claim storing large data instead efficiently generating demand small program program smaller purportedly stored data inflates malicious miner xe2 x80 x99s likelihood winning block reward filecoin proportional miner xe2 x80 x99s storage currently use 3 2 proof replication proof replication porep novel proof storage allows server e prover p convince user e verifier v data d replicated uniquely dedicated physical storage scheme interactive protocol prover p commits store n distinct replicas physically independent copies data d b convinces verifier v p storing replicas challenge response protocol best knowledge porep improves por pdp schemes preventing sybil attacks outsourcing attacks generation attacks note formal definition description properties depth study proof replication refer reader 5 definition 3 1 proof replication porep scheme enables efficient prover p convince verifier v p storing replica r physical independent copy data d unique p porep protocol",
    "metadata": {
      "chunk_id": "6b4db0d7bba22aaa5a4fc8ed20d553bd",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 21] replication refer reader 5 definition 3 1 proof replication porep scheme enables efficient prover p convince verifier v p storing replica r physical independent copy data d unique p porep protocol characterized tuple polynomial time algorithms setup prove verify xe2 x80 xa2 porep setup 1 xce xbb d xe2 x86 x92 r sp sv sp sv scheme specific setup variables p v xce xbb security parameter porep setup generate replica r p v necessary information run porep prove porep verify schemes require prover interaction party compute porep setup 10 x0c xe2 x80 xa2 porep prove sp r c xe2 x86 x92 xcf x80 c c random challenge issued verifier v xcf x80 c proof prover access r specific replica d porep prove run p produce xcf x80 c v xe2 x80 xa2 porep verify sv c xcf x80 c xe2 x86 x92 0 1 checks proof correct porep verify run v convinces v p storing r 3 3 proof spacetime proof storage schemes allow user check storage provider storing outsourced data time challenge use pos schemes prove data stored period",
    "metadata": {
      "chunk_id": "07a943064e50cf433736995dd6efdd45",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 22] porep verify run v convinces v p storing r 3 3 proof spacetime proof storage schemes allow user check storage provider storing outsourced data time challenge use pos schemes prove data stored period time natural answer question require user repeatedly e g minute send challenges storage provider communication complexity required interaction bottleneck systems filecoin storage providers required submit proofs blockchain network address question introduce new proof proof spacetime verifier check prover storing outsourced data range time intuition require prover 1 generate sequential proofs storage case proof replication way determine time 2 recursively compose executions generate short proof definition 3 2 proof spacetime post scheme enables efficient prover p convince verifier v p storing data d time t post characterized tuple polynomial time algorithms setup prove verify xe2 x80 xa2 post setup 1 xce xbb d xe2 x86 x92 sp sv sp sv scheme specific setup variables p v xce xbb security",
    "metadata": {
      "chunk_id": "d63f0a06dc0346dc46479df30f11f83d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 24] 5 requires slow sequential computation seal performed setup generate replica protocol sketches porep post presented figure 4 underlying mechanism proving step post illustrated figure 3 3 4 1 cryptographic building blocks collision resistant hashing use collision resistant hash function crh 0 1 xe2 x88 x97 xe2 x86 x92 0 1 o xce xbb use collision resistant hash function merklecrh divides string multiple parts construct binary tree recursively apply crh outputs root zk snarks practical implementations porep post rely zero knowledge succinct noninteractive arguments knowledge zk snarks 6 7 8 zk snarks succinct proofs short easy verify formally let l np language c decision circuit l trusted party conducts time setup phase results public keys proving key pk verification key vk proving key pk enables untrusted prover generate proof xcf x80 attesting 11 x0cx xe2 x88 x88 l instance x choice non interactive proof xcf x80 zero knowledge proof ofknowledge use verification key vk verify proof xcf",
    "metadata": {
      "chunk_id": "8fd19df1c2fce031008cf5dd979cbc71",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 28] xb0 xe2 x80 xa2 outputs replica r merkle root rt r proof xcf x80seal proving storage prove algorithm generates proof storage replica prover receives random challenge c verifier determines specific leaf r c merkle tree r root rt prover generates proof knowledge r c merkle path leading rt 12 x0c xef xa3 xae prove xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 prover proof storage key pkpos xef xa3 xaf xef xa3 xaf xe2 x80 x93 replica r xef xa3 xaf xef xa3 xaf xe2 x80 x93 random challenge c xef xa3 xb0 xe2 x80 xa2 outputs proof xcf x80pos verifying proofs verify algorithm checks validity proofs storage given merkle root replica hash original data proofs publicly verifiable nodes distributed system maintaining ledger clients interested particular data verify proofs xef xa3 xae verify xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 prover public key pkp xef xa3 xaf xef xa3 xaf xe2 x80 x93 verifier seal pos keys vkseal vkpos xef",
    "metadata": {
      "chunk_id": "e2524e427ec4a55bb71b962841ff5181",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 30] replica prover receives random challenge verifier generate proofs replication sequence output proof input specified iterations t figure 3 xef xa3 xae prove xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 prover post key pkpost xef xa3 xaf xef xa3 xaf xe2 x80 x93 replica r xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 random challenge c xef xa3 xaf xef xa3 xaf xe2 x80 x93 time parameter t xef xa3 xb0 xe2 x80 xa2 outputs proof xcf x80post 13 x0cpkseal loop counter merkle tree function rt challenge generate new challenge 0 parameter n data flow hash generate proof post output post repeat t times figure 3 illustration underlying mechanism post prove showing iterative proof demonstrate storage time 3 5 usage filecoin filecoin protocol employs proof spacetime audit storage offered miners use post filecoin modify scheme non interactive designated verifier want member network able verify verifier runs public coin model extract randomness blockchain issue",
    "metadata": {
      "chunk_id": "385a924743175e405cd7fb4571b136b7",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 31] audit storage offered miners use post filecoin modify scheme non interactive designated verifier want member network able verify verifier runs public coin model extract randomness blockchain issue challenges 14 x0cfilecoin porep protocol filecoin post protocol setup xe2 x80 xa2 inputs xe2 x80 x93 prover key pair pkp skp xe2 x80 x93 prover seal key pkseal xe2 x80 x93 data d xe2 x80 xa2 outputs replica r merkle root rt r proof xcf x80seal 1 compute hd crh d 2 compute r seal xcf x84 d skp 3 compute rt merklecrh r 4 set x pkp hd rt 5 set w skp d 6 compute xcf x80seal scip prove pkseal x w 7 output r rt xcf x80seal setup xe2 x80 xa2 inputs xe2 x80 x93 prover key pair pkp skp xe2 x80 x93 prover post key pair pkpost xe2 x80 x93 data d xe2 x80 xa2 outputs replica r merkle root rt r proof xcf x80seal 1 compute r rt xcf x80seal porep setup pkp skp pkseal d 2 output r rt xcf x80seal prove xe2 x80 xa2 inputs xe2 x80 x93 prover post key pkpost xe2 x80 x93 replica r xe2 x80 x93 random challenge c",
    "metadata": {
      "chunk_id": "ce6c790421d5d7e95ad475cffb2f708d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 34] valid 1 set x 1 pkp hd rt 2 compute b1 scip verify vkseal x 1 xcf x80seal 3 set x 2 rt c 4 compute b2 scip verify vkpos x 2 xcf x80pos 5 output b1 xe2 x88 xa7 b2 figure 4 proof replication proof spacetime protocol sketches crh denotes collisionresistant hash x np statement proven w witness 15 x0c4 filecoin dsn construction filecoin dsn decentralized storage network auditable publicly verifiable designed incentives clients pay network miners data storage retrieval miners offer disk space bandwidth exchange payments miners receive payments network audit service correctly provided section present filecoin dsn construction based dsn definition proof ofspacetime 4 1 setting 4 1 1 participants user participate client storage miner retrieval miner xe2 x80 xa2 clients pay store data retrieve data dsn requests xe2 x80 xa2 storage miners provide data storage network storage miners participate filecoin offering disk space serving requests storage miners users pledge storage depositing collateral",
    "metadata": {
      "chunk_id": "3acd9a323693f0f68d7868132f31526e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 35] dsn requests xe2 x80 xa2 storage miners provide data storage network storage miners participate filecoin offering disk space serving requests storage miners users pledge storage depositing collateral proportional storage miners respond requests committing store client xe2 x80 x99s data specified time storage miners generate proofs spacetime submit blockchain prove network storing data time case invalid missing proofs storage miners penalized loose collateral storage miners eligible new blocks receive mining reward creating block transaction fees transactions included block xe2 x80 xa2 retrieval miners provide data retrieval network retrieval miners participate filecoin serving data users request unlike storage miners required pledge commit store data provide proofs storage natural storage miners participate retrieval miners retrieval miners obtain pieces directly clients retrieval market 4 1 2 network n personify users run filecoin nodes single abstract entity network network acts",
    "metadata": {
      "chunk_id": "66de9d48f2818ba049a541f1acaa6028",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 36] miners participate retrieval miners retrieval miners obtain pieces directly clients retrieval market 4 1 2 network n personify users run filecoin nodes single abstract entity network network acts intermediary runs manage protocol informally new block filecoin blockchain nodes manage available storage validate pledges audit storage proofs repair possible faults 4 1 3 ledger protocol applied ledger based currency generality refer ledger l given time t referred epoch users access lt ledger epoch t sequence transactions ledger append only3 filecoin dsn protocol implemented ledger allows verification filecoin xe2 x80 x99s proofs construct ledger based useful work section 6 4 1 4 markets demand supply storage meet filecoin markets storage market retrieval market markets decentralized exchanges explained detail section 5 brief clients miners set prices services request provide submitting orders respective markets exchanges provide way clients miners matching offers initiate deals running",
    "metadata": {
      "chunk_id": "f6752288ff5a39041b27485fa02ffce2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 37] explained detail section 5 brief clients miners set prices services request provide submitting orders respective markets exchanges provide way clients miners matching offers initiate deals running manage protocol network guarantees miners rewarded clients charged service requested successfully provided 3t t0 implies lt prefix l0t 16 x0c4 2 data structures pieces piece data client storing dsn example data deliberately divided pieces piece stored different set storage miners sectors sector disk space storage miner provides network miners store pieces clients sectors earn tokens services order store pieces storage miners pledge sectors network allocationtable alloctable data structure keeps track pieces assigned sectors alloctable updated block ledger merkle root stored latest block practice table state dsn allowing quick look ups proof verification details figure 5 orders order statement intent request offer service clients submit bid orders markets request service resp storage market",
    "metadata": {
      "chunk_id": "e2ef2e941d4ff12090e6770a5655f8d4",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 39] allocentry m2 xe2 x80 xa2 size size sector pledged xe2 x80 xa2 coll collateral specific pledge mi deposits allocentry sid orders missing xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 xe2 x80 xa2 orderbook orderbook o1 xe2 x80 xa2 oi currently valid deal ask bid orders sid sector id oi currently valid deal ask bid orders orders set orders odeal odeal proof storage ledger l missing counter missing proofs figure 5 data structures dsn scheme 4 3 protocol section overview filecoin dsn describing operations performed clients network miners present methods protocol figure 7 manage protocol figure 8 example protocol execution shown figure 6 overall filecoin protocol presented figure 1 4 3 1 client cycle brief overview client cycle depth explanation following protocols given section 5 17 x0c1 client stores data filecoin clients store data paying storage miners filecoin tokens protocol described detail section 5 2 client initiates protocol submitting bid order storage market orderbook",
    "metadata": {
      "chunk_id": "1fc239156d7a79da5174efb69895491d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 40] x0c1 client stores data filecoin clients store data paying storage miners filecoin tokens protocol described detail section 5 2 client initiates protocol submitting bid order storage market orderbook submitting order blockchain matching ask order miners found client sends piece miner parties sign deal order submit storage market orderbook clients able decide physical replicas pieces submitting multiple orders specifying replication factor order higher redundancy results higher tolerance storage faults 2 client retrieves data filecoin clients retrieve data stored dsn paying retrieval miners filecoin tokens protocol described detail section 5 3 client initiates protocol submitting bid order retrieval market orderbook gossiping order network matching ask order miners found client receives piece miner received parties sign deal order submit blockchain confirm exchange succeeded 4 3 2 mining cycle storage miners informal overview mining cycle 1 pledge storage miners pledge provide storage",
    "metadata": {
      "chunk_id": "501e3bda303f19aff74f3dfd6b42c7e2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 41] miner received parties sign deal order submit blockchain confirm exchange succeeded 4 3 2 mining cycle storage miners informal overview mining cycle 1 pledge storage miners pledge provide storage network storage miners pledge storage network depositing collateral pledge transaction blockchain manage pledgesector collateral deposited time intended provide service returned miner generates proofs storage data commit store proofs storage fail proportional collateral lost pledge transaction appears blockchain miners offer storage storage market set price add ask order market xe2 x80 x99s orderbook xef xa3 xae manage pledgesector xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 current allocation table alloctable xef xa3 xaf xef xa3 xb0 xe2 x80 x93 pledge request pledge xe2 x80 xa2 outputs alloctable0 2 receive orders storage miners storage requests storage market pledge transaction appears blockchain alloctable miners offer storage storage market set price add",
    "metadata": {
      "chunk_id": "ca1a493f58695ffd7af7d8bcf7a2b051",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 42] xe2 x80 xa2 outputs alloctable0 2 receive orders storage miners storage requests storage market pledge transaction appears blockchain alloctable miners offer storage storage market set price add ask order market xe2 x80 x99s orderbook addorders xef xa3 xae addorders xef xa3 xaf xe2 x80 xa2 inputs list orders o1 xef xa3 xb0 xe2 x80 xa2 outputs bit b equals 1 successful check orders matched corresponding bid order client matchorders xef xa3 xae matchorders xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 current storage market orderbook xef xa3 xaf xef xa3 xb0 xe2 x80 x93 query order match oq xe2 x80 xa2 outputs matching orders o1 18 x0conce orders matched clients send data storage miners receiving piece miners run receivepiece data received miner client sign deal order submit blockchain xef xa3 xae receivepiece xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 signing key mj xef xa3 xaf xef xa3 xaf xe2 x80 x93 current orderbook",
    "metadata": {
      "chunk_id": "abaed070066a99ac661385f6c06bd692",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 43] order submit blockchain xef xa3 xae receivepiece xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 signing key mj xef xa3 xaf xef xa3 xaf xe2 x80 x93 current orderbook orderbook xef xa3 xaf xef xa3 xaf xe2 x80 x93 ask order oask xef xa3 xaf xef xa3 xaf xe2 x80 x93 bid order obid xef xa3 xaf xef xa3 xb0 xe2 x80 x93 piece p xe2 x80 xa2 outputs deal order odeal signed ci mj 3 seal storage miners prepare pieces future proofs storage miners xe2 x80 x99 storage divided sectors sector contains pieces assigned miner network keeps track storage miners xe2 x80 x99 sector allocation table storage miner sector filled sector sealed sealing slow sequential operation transforms data sector replica unique physical copy data associated public key storage miner sealing necessary operation proof replication described section 3 4 xef xa3 xae manage sealsector xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 miner public private key pair m xef xa3",
    "metadata": {
      "chunk_id": "f6f05985b2b69c224651b54d4771078e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 44] operation proof replication described section 3 4 xef xa3 xae manage sealsector xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 miner public private key pair m xef xa3 xaf xef xa3 xaf xe2 x80 x93 sector index j xef xa3 xaf xef xa3 xb0 xe2 x80 x93 allocation table alloctable xe2 x80 xa2 outputs proof xcf x80seal root hash rt 4 prove storage miners prove storing committed pieces storage miners assigned data repeatedly generate proofs replication guarantee storing data details section 3 proofs posted blockchain network verifies xef xa3 xae manage provesector xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 miner public private key pair m xef xa3 xaf xef xa3 xaf xe2 x80 x93 sector index j xef xa3 xaf xef xa3 xb0 xe2 x80 x93 challenge c xe2 x80 xa2 outputs proof xcf x80pos 4 3 3 mining cycle retrieval miners informal overview mining cycle retrieval miners 1 receive orders retrieval miners data requests retrieval market retrieval",
    "metadata": {
      "chunk_id": "0502f5081c764c2ec39ae201ab344d38",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 45] c xe2 x80 xa2 outputs proof xcf x80pos 4 3 3 mining cycle retrieval miners informal overview mining cycle retrieval miners 1 receive orders retrieval miners data requests retrieval market retrieval miners announce pieces gossiping ask orders network set price add ask order market xe2 x80 x99s orderbook xef xa3 xae addorders xef xa3 xb0 xe2 x80 xa2 inputs list orders o1 xe2 x80 xa2 outputs retrieval miners check orders matched corresponding bid order client 19 x0c xef xa3 xae matchorders xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 current retrieval market orderbook xef xa3 xaf xef xa3 xb0 xe2 x80 x93 query order match oq xe2 x80 xa2 outputs matching orders o1 2 send retrieval miners send pieces client orders matched retrieval miners send piece client section 5 3 details piece received miner client sign deal order submit blockchain xef xa3 xae sendpiece xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 ask order oask xef",
    "metadata": {
      "chunk_id": "77b75685387f4cfaf756ae60f888cc6d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 46] 5 3 details piece received miner client sign deal order submit blockchain xef xa3 xae sendpiece xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 ask order oask xef xa3 xaf xef xa3 xaf xe2 x80 x93 bid order obid xef xa3 xaf xef xa3 xb0 xe2 x80 x93 piece p xe2 x80 xa2 outputs deal order odeal signed mi 4 3 4 network cycle informal overview operations run network 1 assign network assigns clients xe2 x80 x99 pieces storage miners xe2 x80 x99 sectors clients initiate protocol submitting bid order storage market4 ask bid orders match involved parties jointly commit exchange submit deal order market point network assigns data miner makes note allocation table xef xa3 xae manage assignorders xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf 1 n odeal xef xa3 xaf xe2 x80 x93 deal orders odeal xef xa3 xaf xef xa3 xb0 xe2 x80 x93 allocation table alloctable xe2 x80 xa2 outputs updated allocation table alloctable0 2 repair network finds faults attempt repair",
    "metadata": {
      "chunk_id": "e60789b83166abdcd01d4f4da4ee93fb",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 47] xaf xe2 x80 x93 deal orders odeal xef xa3 xaf xef xa3 xb0 xe2 x80 x93 allocation table alloctable xe2 x80 xa2 outputs updated allocation table alloctable0 2 repair network finds faults attempt repair storage allocations public participant network block network checks required proofs assignment present checks valid acts accordingly xe2 x80 xa2 proof missing invalid network penalizes storage miners taking collateral xe2 x80 xa2 large proofs missing invalid defined system parameter xe2 x88 x86fault network considers storage miner faulty settles order failed reintroduces new order piece market xe2 x80 xa2 storage miner storing piece faulty piece lost client gets refunded 4 storage orders submitted blockchain section 5 20 x0c xef xa3 xae manage repairorders xef xa3 xaf xe2 x80 xa2 inputs xef xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 current time t xef xa3 xaf xef xa3 xaf xe2 x80 x93 current ledger l xef xa3 xaf xef xa3 xb0 xe2 x80 x93 table storage allocations alloctable 1 n updated",
    "metadata": {
      "chunk_id": "ed296d64990ff889957a8abf6871c875",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 48] xa3 xaf xef xa3 xaf xef xa3 xaf xe2 x80 x93 current time t xef xa3 xaf xef xa3 xaf xe2 x80 x93 current ledger l xef xa3 xaf xef xa3 xb0 xe2 x80 x93 table storage allocations alloctable 1 n updated allocation table alloctable xe2 x80 xa2 outputs orders repair odeal odeal client network addorders obid miner addorders oask sendpiece obid p receivepiece oask addorders odeal addorders odeal addorder obid addorder oask matchorders matchorders receivepiece obid sendpiece oask p addorders odeal addorders odeal sealsector manage pledgesector assignorders odeal provesector repairorders figure 6 example execution filecoin dsn grouped party sorted chronologically row 4 4 guarantees requirements following intuitions filecoin dsn achieves integrity retrievability public verifiability incentive compatibility xe2 x80 xa2 achieving integrity pieces named cryptographic hash request clients need store hash retrieve data verify integrity content received xe2 x80 xa2 achieving retrievability request",
    "metadata": {
      "chunk_id": "a22390aecab49f4a04617e1e8121432c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 49] xe2 x80 xa2 achieving integrity pieces named cryptographic hash request clients need store hash retrieve data verify integrity content received xe2 x80 xa2 achieving retrievability request clients specify replication factor type erasure coding desired specifying way storage f m tolerant assumption given m storage miners storing data maximum f faults tolerated storing data storage miner client increase chances recovery case storage miners offline disappear xe2 x80 xa2 achieving public verifiability auditability storage miners required submit proofs storage xcf x80seal xcf x80post blockchain user network verify validity proofs having access outsourced data proofs stored blockchain trace operation audited time xe2 x80 xa2 achieving incentive compatibility informally miners rewarded storage providing miners commit store data required generate proofs miners skip proofs penalized losing collateral rewarded storage xe2 x80 xa2 achieving confidentiality clients desire data stored privately",
    "metadata": {
      "chunk_id": "d587ae58b687bf301a2e7d80be359155",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 51] price c oq bid order check oi ask order ii check oi price xe2 x89 xa4 oq price 2 output matched orders o1 matchorders xe2 x80 xa2 inputs xe2 x80 x93 current storage market orderbook xe2 x80 x93 query order match oq xe2 x80 xa2 outputs matching orders o1 1 match oi orderbook oq ask order check oi bid order ii check oi price xe2 x89 xa5 oq price iii check oi size xe2 x89 xa4 oq space b oq bid order check oi ask order ii check oi price xe2 x89 xa4 oq price iii check oi space xe2 x89 xa5 oq size 2 output matched orders o1 exchange sendpiece xe2 x80 xa2 inputs xe2 x80 x93 ask order oask xe2 x80 x93 bid order obid xe2 x80 x93 piece p xe2 x80 xa2 outputs deal order odeal signed ci 1 create odeal set odeal ask oask b set odeal bid odeal 2 identity ci obid signature 3 setup micropayment channel ci 4 block data pj p set xcf x80j merkle path h p pj b send odeal pj xcf x80j ci c receive h odeal j ici 5 output odeal exchange sendpiece xe2 x80 xa2 inputs xe2 x80 x93 ask order oask xe2 x80 x93 bid",
    "metadata": {
      "chunk_id": "b2ae0d91a0be3b9ed5b0a022e5715d48",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 52] 4 block data pj p set xcf x80j merkle path h p pj b send odeal pj xcf x80j ci c receive h odeal j ici 5 output odeal exchange sendpiece xe2 x80 xa2 inputs xe2 x80 x93 ask order oask xe2 x80 x93 bid order obid xe2 x80 x93 piece p xe2 x80 xa2 outputs deal order odeal signed mi 1 identity mi oask signature 2 send oask obid p mi 3 receive odeal signed mi 4 check odeal valid according definition 5 2 5 output odeal receivepiece xe2 x80 xa2 inputs xe2 x80 x93 signing key mj xe2 x80 x93 current orderbook orderbook xe2 x80 x93 ask order oask xe2 x80 x93 bid order obid xe2 x80 x93 piece p xe2 x80 xa2 outputs deal order odeal signed ci mj 1 check obid valid check obid orderbook b check obid referenced active odeal c check obid size equal p d check o signed mi 2 store p locally 3 set odeal h oask odeal h p imi 4 identity cj obid 5 send odeal cj 6 output odeal receivepiece xe2 x80 xa2 inputs xe2 x80 x93 client xe2 x80 x99s key cj xe2 x80 x93 ask order oask xe2 x80 x93 bid order obid xe2 x80 x93",
    "metadata": {
      "chunk_id": "b0fa2c41464456d4aec450eb1d1f411e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 53] h p imi 4 identity cj obid 5 send odeal cj 6 output odeal receivepiece xe2 x80 xa2 inputs xe2 x80 x93 client xe2 x80 x99s key cj xe2 x80 x93 ask order oask xe2 x80 x93 bid order obid xe2 x80 x93 merkle tree hash p orders hp xe2 x80 xa2 outputs piece p 1 create odeal set odeal ask oask b set odeal bid obid 2 identity mi oask signature 3 set micropayment channel mi existing 4 receiving odeal pj xcf x80j mi check odeal valid matches oask obid b check xcf x80j valid merkle path root hash hp c send h odeal j ici 5 output p figure 7 description protocols filecoin dsn 22 x0cmanage protocol network assignorders xe2 x80 xa2 inputs 1 o n xe2 x80 x93 deal orders odeal deal xe2 x80 x93 allocation table alloctable xe2 x80 xa2 outputs updated allocation table alloctable0 1 copy alloctable alloctable0 2 order odeal check odeal valid according definition 5 2 b mj odeal signature alloctable0 c add details odeal 3 output alloctable0 miner pledgesector xe2 x80 xa2 inputs xe2 x80 x93 current allocation",
    "metadata": {
      "chunk_id": "b68ad288365cf378d6440f5430776711",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 54] 2 order odeal check odeal valid according definition 5 2 b mj odeal signature alloctable0 c add details odeal 3 output alloctable0 miner pledgesector xe2 x80 xa2 inputs xe2 x80 x93 current allocation table alloctable xe2 x80 x93 pledge request pledge xe2 x80 xa2 outputs alloctable0 1 copy alloctable alloctable0 2 set txpledge pledge 3 submit txpledge l 4 wait txpledge included l 5 add new sector size pledge size alloctable0 6 output alloctable0 repairorders xe2 x80 xa2 inputs xe2 x80 x93 current time t xe2 x80 x93 current ledger l xe2 x80 x93 table storage allocations alloctable 1 o n updated alloca xe2 x80 xa2 outputs orders repair odeal deal tion table alloctable 1 allocentry alloctable t allocentry xe2 x88 x86proof skip b update allocentry t c check xcf x80 lt xe2 x88 x92 xe2 x88 x86proof t post verify xcf x80 d success update allocentry missing 0 e failure update allocentry missing ii penalize collateral mi xe2 x80 x99s pledge f allocentry missing xe2 x88 x86fault set orders",
    "metadata": {
      "chunk_id": "39cb24489b453059e61bab4e0dcf8728",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 55] x86proof t post verify xcf x80 d success update allocentry missing 0 e failure update allocentry missing ii penalize collateral mi xe2 x80 x99s pledge f allocentry missing xe2 x88 x86fault set orders current sector failed orders 0 1 o n 2 output failed orders odeal deal alloctable sealsector xe2 x80 xa2 inputs xe2 x80 x93 miner public private key pair m xe2 x80 x93 sector index j xe2 x80 x93 allocation table alloctable xe2 x80 xa2 outputs proof xcf x80seal root hash rt 1 find pieces p1 pn sector sj alloctable 2 set d p1 p2 pn 3 compute r rt xcf x80seal post setup m pkseal d 4 output xcf x80seal rt provesector xe2 x80 xa2 inputs xe2 x80 x93 miner public private key pair m xe2 x80 x93 sector index j xe2 x80 x93 challenge c xe2 x80 xa2 outputs proof xcf x80pos 1 find r sector j 2 compute xcf x80post post prove pkpost r c xe2 x88 x86proof 3 output xcf x80post figure 8 description manage protocol filecoin dsn 23 x0c5 filecoin storage retrieval markets filecoin markets storage market",
    "metadata": {
      "chunk_id": "204cc920dc85ff099c1802d8d289b0da",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 56] xcf x80post post prove pkpost r c xe2 x88 x86proof 3 output xcf x80post figure 8 description manage protocol filecoin dsn 23 x0c5 filecoin storage retrieval markets filecoin markets storage market retrieval market markets structure different design storage market allows clients pay storage miners store data retrieval market allows clients retrieve data paying retrieval miners deliver data cases clients miners set offer demand prices accept current offers exchanges run network personification network nodes filecoin network guarantees miners rewarded clients providing service 5 1 verifiable markets exchange markets protocols facilitate exchange specific good service enabling buyers sellers conduct transactions purposes require exchanges verifiable decentralized network participants able verify exchange buyers sellers present notion verifiable markets single entity governs exchange transactions transparent anybody participate pseudonymously verifiable market protocols operate exchange",
    "metadata": {
      "chunk_id": "2cc089e6ced4afdb5546f117120d2299",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 57] exchange buyers sellers present notion verifiable markets single entity governs exchange transactions transparent anybody participate pseudonymously verifiable market protocols operate exchange goods services decentralized fashion consistency orderbooks orders settlements correct execution services independently verified participants miners nodes case filecoin simplify verifiable markets following construction definition 5 1 verifiable market protocol phases order matching settlement orders statements intent buy sell security good service orderbook list available orders verifiable market protocol order matching 1 participants add buy orders sell orders orderbook 2 orders match involved parties jointly create deal order commits parties exchange propagate network adding orderbook settlement 3 network ensures transfer goods services executed correctly requiring sellers generate cryptographic proofs exchange service 4 success network processes payments clears orders orderbook figure 9",
    "metadata": {
      "chunk_id": "a527c1557e9d89881b00e1997b5eeb4b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 58] 3 network ensures transfer goods services executed correctly requiring sellers generate cryptographic proofs exchange service 4 success network processes payments clears orders orderbook figure 9 generic protocol verifiable markets 5 2 storage market storage market verifiable market allows clients e buyers request storage data storage miners e sellers offer storage 5 2 1 requirements design storage market protocol accordingly following requirements xe2 x80 xa2 chain orderbook important 1 storage miners orders public lowest price known network clients informed decision orders 2 client orders submitted orderbook accept lowest price way market react new offer require orders added clear filecoin blockchain order added orderbook 24 x0c xe2 x80 xa2 participants committing resources require parties commit resources way avoid disservice avoid storage miners providing service avoid clients having available funds order participate storage market storage miners pledge depositing collateral",
    "metadata": {
      "chunk_id": "6b0a5e55ae86027460a066b74907ed80",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 59] parties commit resources way avoid disservice avoid storage miners providing service avoid clients having available funds order participate storage market storage miners pledge depositing collateral proportional storage dsn section 4 3 3 details way network penalize storage miners provide proofs storage pieces committed store similarly clients deposit funds specified order guaranteeing way commitment availability funds settlement xe2 x80 xa2 self organization handle faults orders settled storage miners repeatedly proved stored pieces duration agreed time period network able verify existence correctness proofs act according rules outlined repair portion subsection 4 3 4 5 2 2 datastructures orders types orders bid orders ask orders deal orders storage miners create ask orders add storage clients create bid orders request storage parties agree price jointly create deal order data structures orders shown detail figure 10 parameters orders explicitly defined orderbook orderbook storage",
    "metadata": {
      "chunk_id": "7505ab872e0fff9b6ab1337f562c2124",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 60] clients create bid orders request storage parties agree price jointly create deal order data structures orders shown detail figure 10 parameters orders explicitly defined orderbook orderbook storage market set currently valid open ask bid deal orders users interact orderbook methods defined protocol addorders matchorders described figure 7 orderbook public honest user view orderbook epoch new orders added orderbook new order transactions txorder appear new blockchain blocks orders removed cancelled expired settled orders added blockchain blocks orderbook valid definition 5 2 define validity bid ask deal orders valid bid order bid order client ci obid hsize funds price time coll coding ici valid xe2 x80 xa2 ci funds available account xe2 x80 xa2 time set past xe2 x80 xa2 order guarantee minimum amount5 epochs storage valid ask order ask order storage miner mi oask hspace priceimi valid xe2 x80 xa2 mi pledged miner pledge expire time epochs xe2 x80 xa2 space mi xe2 x80 x99s available",
    "metadata": {
      "chunk_id": "fc1bf08280d36c60860925ccd71e6d41",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 62] 25 x0cstorage market orders retrieval market orders bid order obid h piece price ici bid order obid hsize funds price time coll coding ici xe2 x80 xa2 piece index piece requesteda xe2 x80 xa2 price price ci paying retrieval xe2 x80 xa2 size size piece stored xe2 x80 xa2 funds total client ci depositing xe2 x80 xa2 time maximum epoch time file storeda xe2 x80 xa2 price spacetime price filecoinb xe2 x80 xa2 coll collateral specific piece miner required deposit xe2 x80 xa2 coding erasure coding scheme piece ask order oask h piece price imi xe2 x80 xa2 piece index piece requested xe2 x80 xa2 price price mj serving piece ask order oask h space price imi deal order odeal h ask order ici mj xe2 x80 xa2 space space storage miner mi providing order xe2 x80 xa2 price spacetime price filecoin xe2 x80 xa2 ask cryptographic reference oask ci xe2 x80 xa2 order cryptographic reference oask ci deal order odeal h ask bid ts hash ici mj xe2 x80 xa2 ask cryptographic reference oask ci xe2 x80 xa2 order",
    "metadata": {
      "chunk_id": "d90179379c368c9f88a91df866dd807a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 63] xa2 ask cryptographic reference oask ci xe2 x80 xa2 order cryptographic reference oask ci deal order odeal h ask bid ts hash ici mj xe2 x80 xa2 ask cryptographic reference oask ci xe2 x80 xa2 order cryptographic reference obid mi xe2 x80 xa2 ts timestamp epoch order signed mi xe2 x80 xa2 hash cryptographic hash piece mj store pieces stored filecoin requested specified piece stored expiration funds b specified storage miner faulty network introduce order current best price figure 10 orders data structures retrieval storage markets 26 x0c5 2 3 storage market protocol brief storage market protocol divided phases order matching settlement xe2 x80 xa2 order matching clients storage miners submit orders orderbook submitting transaction blockchain step 1 orders matched client sends piece storage miner parties sign deal order submit orderbook step 2 xe2 x80 xa2 settlement storage miners seal sectors step 3a generate proofs storage sector containing piece submit blockchain regularly step 3b",
    "metadata": {
      "chunk_id": "6cd6d9ae64ed397179d2a2cf04820797",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 64] miner parties sign deal order submit orderbook step 2 xe2 x80 xa2 settlement storage miners seal sectors step 3a generate proofs storage sector containing piece submit blockchain regularly step 3b rest network verify proofs generated miners repair possible faults step 3c storage market protocol explained detail figure 11 5 3 retrieval market retrieval market allows clients request retrieval specific piece retrieval miners serve unlike storage miners retrieval miners required store pieces time generate proofs storage user network retrieval miner serving pieces exchange filecoin tokens retrieval miners obtain pieces receiving directly clients acquiring retrieval market storing storage miner 5 3 1 requirements design retrieval market protocol accordingly following requirements xe2 x80 xa2 chain orderbook clients able find retrieval miners serving required pieces directly exchange pieces settling pricing means orderbook run blockchain bottleneck fast retrieval requests instead participant",
    "metadata": {
      "chunk_id": "8b127f3cd2869fff8c8f4588625bee33",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 65] orderbook clients able find retrieval miners serving required pieces directly exchange pieces settling pricing means orderbook run blockchain bottleneck fast retrieval requests instead participant partial view orderbook require parties gossip orders xe2 x80 xa2 retrieval trusted parties impossibility results fair exchange 10 remind impossible parties perform exchange trusted parties storage market blockchain network acts decentralized trusted party verifies storage provided storage miners retrieval market retrieval miners clients exchange data network witnessing exchange file result requiring retrieval miner split data multiple parts sent client receive payment way client stops paying miner stops sending data party halt exchange note work assume honest retrieval miner xe2 x80 xa2 payments channels clients interested retrieving pieces soon submit payments retrieval miners interested serving pieces sure receiving payment validating payments public ledger bottleneck retrieval request",
    "metadata": {
      "chunk_id": "678898654ffac99a23156e455a146941",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 66] channels clients interested retrieving pieces soon submit payments retrieval miners interested serving pieces sure receiving payment validating payments public ledger bottleneck retrieval request rely efficient chain payments filecoin blockchain support payment channels enable rapid optimistic transactions use blockchain case disputes way retrieval miners clients quickly send small payments required protocol future work includes creation network payment channels previously seen 11 12 5 3 2 data structures orders types orders retrieval market clients create bid orders obid retrieval miners create ask orders oask deal orders odeal created jointly storage miner client agree deal datastructures orders shown detail figure 10 orderbook orderbook retrieval market set valid open ask bid deal orders unlike storage market user different view orderbook orders gossiped network miner client track orders interested 27 x0cstorage market protocol order matching 1 storage miner mi client ci add orders",
    "metadata": {
      "chunk_id": "a7e472b1427ab70ded9410f5421beedb",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 67] unlike storage market user different view orderbook orders gossiped network miner client track orders interested 27 x0cstorage market protocol order matching 1 storage miner mi client ci add orders orderbook mi creates oask 1 oask 2 cj creates obid 1 obid 2 b orders submitted blockchain addorders o 1 o 2 c success orders added orderbook funds cj deposited space mi reserved 2 orders match involved parties jointly create odeal add orderbook mi cj independently query orderbook matchorders o b mi cj matching orders xe2 x80 xa2 cj sends piece p mi sendpiece obid oask p xe2 x80 xa2 mi receives piece p cj receivepiece obid oask p xe2 x80 xa2 mi signs odeal sends cj c cj signs odeal adds orderbook addorders odeal settlement 3 network checks storage miners correctly storing pieces storage miner fills sector seal create unique replica manage sealsector submit proof xcf x80seal rt blockchain b storage miners generate new proofs epoch add filecoin blockchain xe2 x88 x86proof epochs manage",
    "metadata": {
      "chunk_id": "98c0e07683d2ddcc7f61f86000962d6c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 68] fills sector seal create unique replica manage sealsector submit proof xcf x80seal rt blockchain b storage miners generate new proofs epoch add filecoin blockchain xe2 x88 x86proof epochs manage provesectors c network runs manage repairorders epoch proofs missing invalid network tries repair following ways xe2 x80 xa2 proofs missing invalid penalizes storage miners taking collateral xe2 x80 xa2 large proofs missing invalid xe2 x88 x86fault epochs considers storage miner faulty settles order failed reintroduces new order piece market xe2 x80 xa2 storage miner storing piece faulty piece lost client gets refunded 4 time order expired funds run service correctly provided network processes payments removes orders figure 11 detailed storage market protocol 28 x0c5 3 3 retrieval market protocol brief retrieval market protocol divided phases order matching settlement xe2 x80 xa2 order matching clients retrieval miners submit orders orderbook gossiping orders step 1 orders matched client",
    "metadata": {
      "chunk_id": "3e84fbdac204a437633b0f64a71cc722",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 69] brief retrieval market protocol divided phases order matching settlement xe2 x80 xa2 order matching clients retrieval miners submit orders orderbook gossiping orders step 1 orders matched client retrieval miners establish micropayment channel step 2 xe2 x80 xa2 settlement retrieval miners send small parts piece client piece client sends miner signed receipt step 3 retrieval miner presents delivery receipts blockchain rewards step 4 protocol explained details figure 12 retrieval market protocol order matching 1 retrieval miners clients add orders orderbook retrieval miners mi creates ask orders oask 1 oask 2 client cj creates bid orders obid 1 obid 2 b mi cj gossip orders filecoin network addorders c commonly shared orderbook users receive orders add orderbook xe2 x80 x99s view differently storage market orders binding resource committed e g clients don xe2 x80 x99t deposit 2 orders match involved parties jointly create odeal add orderbook retrieval miner mi client cj independently run",
    "metadata": {
      "chunk_id": "0277a2fc8958bb3e0c3002467273e623",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 70] storage market orders binding resource committed e g clients don xe2 x80 x99t deposit 2 orders match involved parties jointly create odeal add orderbook retrieval miner mi client cj independently run matchorders queries current orderbook view b mi cj sign odeal add orderbook addorders described c ci mj setup micropayment channel odeal settlement 3 parties check piece delivered mi sends piece p parts sendpiece b cj receives p parts cj acknowledges delivery sending micropayment receivepiece 4 p received cj mj present micropayments network retrieve payment parties remove orders orderbooks figure 12 detailed retrieval market protocol 29 x0c6 useful work consensus filecoin dsn protocol implemented consensus protocol allows verification filecoin xe2 x80 x99s proofs section present bootstrap consensus protocol based useful work instead wasteful proof work computation work filecoin miners generating proofof spacetime allows participate consensus useful work consider work miners consensus",
    "metadata": {
      "chunk_id": "749cc3e31e6838d6b70624f3d8b43208",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 71] consensus protocol based useful work instead wasteful proof work computation work filecoin miners generating proofof spacetime allows participate consensus useful work consider work miners consensus protocol useful outcome computation valuable network securing blockchain 6 1 motivation securing blockchain fundamental importance proof work schemes require solving puzzles solutions reusable require substantial wasteful computation find xe2 x80 xa2 non reusable work permissionless blockchains require miners solve hard computational puzzle inverting hash function solutions puzzles useless inherent value securing network purpose work useful attempts use work attempts use mining power useful computation efforts require miners perform special computation alongside standard proofof work efforts replace proof work useful problems hard solve example primecoin uses miners xe2 x80 x99 computational power find new prime numbers ethereum requires miners execute small programs alongside proof work",
    "metadata": {
      "chunk_id": "c5a720c6e2701d5568447b51ce964bff",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 72] replace proof work useful problems hard solve example primecoin uses miners xe2 x80 x99 computational power find new prime numbers ethereum requires miners execute small programs alongside proof work permacoin offers archival services requiring miners invert hash function proving data archived attempts perform useful work wasteful work prevalent factor computations xe2 x80 xa2 wasteful work solving hard puzzles expensive terms cost machinery energy consumed especially puzzles solely rely computational power mining algorithm embarrassingly parallel prevalent factor solve puzzle computational power reduce wasteful work attempts reduce waste ideally majority network xe2 x80 x99s resources spent useful work efforts require miners use energy efficient solutions example spacemint requires miners dedicate disk space computation energy efficient theses disks xe2 x80 x9cwasted xe2 x80 x9d filled random data efforts replace hard solve puzzles traditional byzantine agreement based proof stake",
    "metadata": {
      "chunk_id": "d32fb891e2cb2a0925427a3c133a8726",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 73] dedicate disk space computation energy efficient theses disks xe2 x80 x9cwasted xe2 x80 x9d filled random data efforts replace hard solve puzzles traditional byzantine agreement based proof stake stakeholders vote block proportional share currency system set design consensus protocol useful work based storing users xe2 x80 x99 data 6 2 filecoin consensus propose useful work consensus protocol probability network elects miner create new block refer voting power miner proportional storage currently use relation rest network design filecoin protocol miners invest storage computing power parallelize mining computation miners offer storage use computation proof data stored participate consensus 6 2 1 modeling mining power power fault tolerance technical report 13 present power fault tolerance abstraction frames byzantine faults terms participants xe2 x80 x99 influence outcome protocol participant controls power n total power network f fraction power 30 x0ccontrolled faulty adversarial",
    "metadata": {
      "chunk_id": "643f1d78f418df4b9b7ae199f8ea3f8f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 74] abstraction frames byzantine faults terms participants xe2 x80 x99 influence outcome protocol participant controls power n total power network f fraction power 30 x0ccontrolled faulty adversarial participants power filecoin filecoin power pti miner mi time t sum mi xe2 x80 x99s storage assignments influence iit mi fraction mi xe2 x80 x99s power total power network filecoin power following properties xe2 x80 xa2 public total storage currently use network public reading blockchain calculate storage assignments miner calculate power miner total power point time xe2 x80 xa2 publicly verifiable storage assignment miners required generate proofs spacetime proving service provided reading blockchain verify power claimed miner correct xe2 x80 xa2 variable point time miners add new storage network pledging new sector filling sector way miners change power time 6 2 2 accounting power proof spacetime xe2 x88 x86proof blocks6 miners required submit proofs spacetime network successfully added",
    "metadata": {
      "chunk_id": "5ab9e320d60699ff34503f758deaf585",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 75] pledging new sector filling sector way miners change power time 6 2 2 accounting power proof spacetime xe2 x88 x86proof blocks6 miners required submit proofs spacetime network successfully added blockchain majority power network considers valid block node updates alloctable adding new storage assignments removing expiring ones marking missing proofs power miner mi calculated verified summing entries alloctable ways xe2 x80 xa2 node verification node blockchain log run networkprotocol genesis block current block read alloctable miner mi process verifies proof spacetime storage currently assigned mi xe2 x80 xa2 simple storage verification assume light client access trusted source broadcasts latest block light client request nodes network 1 current alloctable entry miner mi 2 merkle path proves entry included state tree block 3 headers genesis block current block way light client delegate verification proof spacetime network security power calculation comes security proof spacetime",
    "metadata": {
      "chunk_id": "744e57e6e934c241c1afa1ab3884b213",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 77] assigned storage expected consensus basic intuition expected consensus ec deterministically unpredictably secretly elect small set leaders epoch expectation number elected leaders 6 xe2 x88 x86 proof system parameter 31 x0cepoch 1 epochs zero leaders leaders extend chain creating block propagating network epoch chain extended multiple blocks case leaderless epoch block added chain blocks chain linearly ordered data structure direct acyclic graph ec probabilistic consensus epoch introduces certainty previous blocks eventually reaching certainty likelihood different history sufficiently small block committed majority participants add weight chain block belongs extending chain signing blocks electing miners epoch miner checks elected leader similarly previous protocols coa 15 snow white 16 algorand 17 definition 6 1 ec election filecoin miner mi leader time t following condition met h x10 t rand t x11 mi 2l xe2 x89 xa4 pti xce xa3j ptj rand t public randomness available extracted",
    "metadata": {
      "chunk_id": "2b1f4dd2f770babc086a69f2122619dc",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 78] 16 algorand 17 definition 6 1 ec election filecoin miner mi leader time t following condition met h x10 t rand t x11 mi 2l xe2 x89 xa4 pti xce xa3j ptj rand t public randomness available extracted blockchain epoch t pti power mi consider size h m l m h secure cryptographic hash function hmimi message m signed mi x12 x10 x11 x13 hmimi m sigmi h m figure 13 describe protocol miner proveelect network node verifyelect election scheme provides properties fairness secrecy public verifiability xe2 x80 xa2 fairness participant trial election signatures deterministic t rand t fixed assuming h secure cryptographic hash function h ht rand t imi 2l real number uniformly chosen 0 1 probability equation true pti xce xa3j ptj equal miner xe2 x80 x99s portion power network probability linear power likelihood preserved splitting pooling power note random value rand t known time t xe2 x80 xa2 secret efficient adversary secret key mi compute signature negligible probability given assumptions digital",
    "metadata": {
      "chunk_id": "283282624e9104a182adccb321315185",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 79] preserved splitting pooling power note random value rand t known time t xe2 x80 xa2 secret efficient adversary secret key mi compute signature negligible probability given assumptions digital signatures xe2 x80 xa2 public verifiability elected leader xe2 x88 x88 lt convince efficient verifier showing t rand t h ht rand t ii 2l given previous point efficient adversary generate proof having winning secret key ec election storage miner epoch t network node receiving block epoch t proveelect r t mi xe2 x86 x92 xe2 x8a xa5 xcf x80it 1 compute h ht rii 2l xe2 x89 xa4 verifyelect xcf x80ti t mi xe2 x86 x92 xe2 x8a xa5 pti xce xa3j ptj 1 check xcf x80it valid signature user mi t r 2 check pti power mi time t xe2 x80 xa2 success output xcf x80it ht rii xe2 x80 xa2 output xe2 x8a xa5 3 test mi elected leader h xcf x80it 2l xe2 x80 xa2 success output xe2 x80 xa2 output xe2 x8a xa5 figure 13 leader election expected consensus protocol 32 pti xce xa3j ptj x0c7 smart contracts filecoin provides",
    "metadata": {
      "chunk_id": "c0851f5d674c09f56c70436ff874a75c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 80] leader h xcf x80it 2l xe2 x80 xa2 success output xe2 x80 xa2 output xe2 x8a xa5 figure 13 leader election expected consensus protocol 32 pti xce xa3j ptj x0c7 smart contracts filecoin provides basic primitives end users primitives allow clients store data retrieve data markets preferred price primitives cover default use cases filecoin enable complex operations designed supporting deployment smart contracts users program new fine grained storage retrieval requests classify file contracts generic smart contracts integrate contracts system based 18 bridge system bring filecoin storage blockchain viceversa bring blockchains xe2 x80 x99 functionalities filecoin expect plethora smart contracts exist filecoin ecosystem look forward community smart contract developers 7 1 contracts filecoin smart contracts enable users filecoin write stateful programs spend tokens request storage retrieval data markets validate storage proofs users interact smart contracts sending transactions ledger trigger",
    "metadata": {
      "chunk_id": "53823b682522764c72633c8865034fe3",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 81] contracts enable users filecoin write stateful programs spend tokens request storage retrieval data markets validate storage proofs users interact smart contracts sending transactions ledger trigger function calls contract extend smart contract system support filecoin specific operations e g market operations proof verification filecoin supports contracts specific data storage generic smart contracts xe2 x80 xa2 file contracts allow users program conditions offering providing storage services examples worth mentioning 1 contracting miners clients specify advance miners offering service participating market 2 payment strategies clients design different reward strategies miners example contract pay miner incresignly higher time contract set price storage informed trusted oracle 3 ticketing services contract allow miner deposit tokens pay storage retrieval behalf users 4 complex operations clients create contracts allow data update xe2 x80 xa2 smart contracts users associate programs",
    "metadata": {
      "chunk_id": "295339a451be1c727b56bd7e1957663b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 82] services contract allow miner deposit tokens pay storage retrieval behalf users 4 complex operations clients create contracts allow data update xe2 x80 xa2 smart contracts users associate programs transactions like systems ethereum 18 directly depend use storage foresee applications decentralized naming systems asset tracking crowdsale platforms 7 2 integration systems bridges tools aim connecting different blockchains work progress plan support cross chain interaction order bring filecoin storage blockchain based platforms bringing functionalities platforms filecoin xe2 x80 xa2 filecoin platforms blockchain systems bitcoin 19 zcash 20 particular ethereum 18 tezos allow developers write smart contracts platforms provide little storage capability high cost plan provide bridge bring storage retrieval support platforms note ipfs use smart contracts protocol tokens way reference distribute content adding support filecoin allow systems guarantee storage ipfs content exchange filecoin",
    "metadata": {
      "chunk_id": "65681daaa397d9aada36324d46cccb12",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 83] retrieval support platforms note ipfs use smart contracts protocol tokens way reference distribute content adding support filecoin allow systems guarantee storage ipfs content exchange filecoin tokens xe2 x80 xa2 platforms filecoin plan provide bridges connect blockchain services filecoin example integration zcash allow support sending requests storing data privacy 33 x0c8 future work work presents clear cohesive path construction filecoin network consider work starting point future research decentralized storage systems section identify populate categories future work includes work completed merely awaits description publication open questions improving current protocols formalization protocol 8 1 going work following topics represent ongoing work xe2 x80 xa2 specification filecoin state tree block xe2 x80 xa2 detailed performance estimates benchmarks filecoin components xe2 x80 xa2 implementable filecoin protocol specification xe2 x80 xa2 sponsored retrieval ticketing model client",
    "metadata": {
      "chunk_id": "dc8ae3735283ab333e2f51a6e5a3c2f8",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 84] tree block xe2 x80 xa2 detailed performance estimates benchmarks filecoin components xe2 x80 xa2 implementable filecoin protocol specification xe2 x80 xa2 sponsored retrieval ticketing model client c1 sponsor download client c2 issuing piece bearer spendable tokens xe2 x80 xa2 hierarchical consensus protocol filecoin subnets partition continue processing transactions temporary permanent partitions xe2 x80 xa2 incremental blockchain snapshotting snark stark xe2 x80 xa2 filecoin ethereum interface contracts protocols xe2 x80 xa2 blockchain archives inter blockchain stamping braid xe2 x80 xa2 post proofs spacetime blockchain conflict resolution xe2 x80 xa2 formally prove realizations filecoin dsn novel proofs storage 8 2 open questions number open questions answers potential substantially improve network despite fact solved launch xe2 x80 xa2 better primitive proof replication seal function ideally o n decode o nm publicly verifiable requiring snark stark xe2 x80 xa2 better primitive",
    "metadata": {
      "chunk_id": "4279a9ba3a1fc775bb96ea627f72c27d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 85] improve network despite fact solved launch xe2 x80 xa2 better primitive proof replication seal function ideally o n decode o nm publicly verifiable requiring snark stark xe2 x80 xa2 better primitive proof replication prove function publicly verifiable transparent snark stark xe2 x80 xa2 transparent publicly verifiable proof retrievability proof storage xe2 x80 xa2 new strategies retrieval retrieval market e g based probabilistic payments zero knowledge contingent payments xe2 x80 xa2 better secret leader election expected consensus gives exactly elected leader epoch xe2 x80 xa2 better trusted setup scheme snarks allows incremental expansion public parameters schemes sequence mpcs run additional mpc strictly lowers probability faults output mpc usable system 34 x0c8 3 proofs formal verification clear value proofs formal verification plan prove properties filecoin network develop formally verified protocol specifications coming months years proofs progress mind hard long term work prove",
    "metadata": {
      "chunk_id": "5dbc156e7d68da5e561814e1fd21d31a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 87] effort multiple individuals protocol labs team possible help comments review collaborators advisors protocol labs juan benet wrote original filecoin whitepaper 2014 laying groundwork work nicola greco developed new protocol wrote whitepaper collaboration rest team provided useful contributions comments review conversations particular david xe2 x80 x9cdavidad xe2 x80 x9d dalrymple suggested orderbook paradigm ideas matt zumwalt improved structure paper evan miyazono created illustrations finalized paper jeromy johnson provided insights designing protocol steven allen contributed insightful questions clarifications thank collaborators advisor useful conversations particular andrew miller eli ben sasson previous version qmycf7x6ygkisovs7eapqy3gxckw1migf57zc1cdxjzwrq 35 x0creferences 1 juan benet ipfs content addressed versioned p2p file system 2014 2 giuseppe ateniese randal burns reza curtmola joseph herring lea kissner zachary peterson dawn song provable data possession untrusted",
    "metadata": {
      "chunk_id": "618cdaf0b3a16c9f88529aea99f34dfe",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 88] benet ipfs content addressed versioned p2p file system 2014 2 giuseppe ateniese randal burns reza curtmola joseph herring lea kissner zachary peterson dawn song provable data possession untrusted stores proceedings 14th acm conference computer communications security pages 598 xe2 x80 x93609 acm 2007 3 ari juels burton s kaliski jr pors proofs retrievability large files proceedings 14th acm conference computer communications security pages 584 xe2 x80 x93597 acm 2007 4 hovav shacham brent waters compact proofs retrievability international conference theory application cryptology information security pages 90 xe2 x80 x93107 springer 2008 5 protocol labs technical report proof replication 2017 6 rosario gennaro craig gentry bryan parno mariana raykova quadratic span programs succinct nizks pcps annual international conference theory applications cryptographic techniques pages 626 xe2 x80 x93645 springer 2013 7 nir bitansky alessandro chiesa yuval ishai succinct non interactive arguments",
    "metadata": {
      "chunk_id": "7d89cd5e4eb7679a36312975cbb44d14",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 89] annual international conference theory applications cryptographic techniques pages 626 xe2 x80 x93645 springer 2013 7 nir bitansky alessandro chiesa yuval ishai succinct non interactive arguments linear interactive proofs springer 2013 8 eli ben sasson alessandro chiesa daniel genkin eran tromer madars virza snarks c verifying program executions succinctly zero knowledge advances cryptology xe2 x80 x93crypto 2013 pages 90 xe2 x80 x93108 springer 2013 9 eli ben sasson iddo bentov alessandro chiesa ariel gabizon daniel genkin matan hamilis evgenya pergament michael riabzev mark silberstein eran tromer et al computational integrity public random string quasi linear pcps annual international conference theory applications cryptographic techniques pages 551 xe2 x80 x93579 springer 2017 10 henning pagnia felix c ga xcc x88rtner impossibility fair exchange trusted party technical report technical report tud bs 1999 02 darmstadt university technology department computer science darmstadt",
    "metadata": {
      "chunk_id": "ad186cedc3fb039d07a0d0c0a696c8f2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 90] henning pagnia felix c ga xcc x88rtner impossibility fair exchange trusted party technical report technical report tud bs 1999 02 darmstadt university technology department computer science darmstadt germany 1999 11 joseph poon thaddeus dryja bitcoin lightning network scalable chain instant payments 2015 12 andrew miller iddo bentov ranjit kumaresan patrick mccorry sprites payment channels faster lightning arxiv preprint arxiv 1702 05812 2017 13 protocol labs technical report power fault tolerance 2017 14 protocol labs technical report expected consensus 2017 15 iddo bentov charles lee alex mizrahi meni rosenfeld proof activity extending bitcoin xe2 x80 x99s proof work proof stake extended abstract y acm sigmetrics performance evaluation review 42 3 34 xe2 x80 x9337 2014 16 iddo bentov rafael pass elaine shi snow white provably secure proofs stake 2016 17 silvio micali algorand efficient democratic ledger arxiv preprint arxiv 1607 01341 2016 18 vitalik buterin ethereum https ethereum",
    "metadata": {
      "chunk_id": "45f3e4fe426a6847a43809e7a8893a90",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  },
  {
    "text": "[Section 91] pass elaine shi snow white provably secure proofs stake 2016 17 silvio micali algorand efficient democratic ledger arxiv preprint arxiv 1607 01341 2016 18 vitalik buterin ethereum https ethereum org april 2014 url https ethereum org 19 satoshi nakamoto bitcoin peer peer electronic cash system 2008 20 eli ben sasson alessandro chiesa christina garman matthew green ian miers eran tromer madars virza zerocash decentralized anonymous payments bitcoin security privacy sp 2014 ieee symposium pages 459 xe2 x80 x93474 ieee 2014 36 x0c",
    "metadata": {
      "chunk_id": "9095cf92efa1a01a746e6086d8148019",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Filecoin.txt"
    }
  }
]