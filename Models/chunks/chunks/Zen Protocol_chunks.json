[
  {
    "text": "[Section 1] b introduction zen protocol zen protocol development october 16 2017 summary decentralized platforms let participants avoid counterparty risk trusted intermediaries zen protocol basis platform zen parallel blockchain bitcoin allowing users create assets react events bitcoin network zen targets financial use cases trading creating new kinds assets white paper discuss zen works differs existing smart contract platforms sort applications makes possible contents 1 introduction 3 2 digital agreements bitcoin 3 3 design zen protocol 3 1 bitcoin integration 3 2 verified contracts 3 3 contract lifecycle 3 4 chain security multihash proof work 3 5 assets 3 6 light client security 3 7 state control 4 4 4 5 5 5 5 6 x0c4 platforms 4 1 ethereum 4 2 rootstock 4 3 tezos 6 6 7 8 5 multihash mining 5 1 multiple hash functions 5 2 token holder influence 8 9 9 6 transactions 10 6 1 utxos 10 7 tokens 11 7 1 moving tokens comparison 12 7 2 different types token 13 7 3 tokens 13 8 contracts 8 1 active",
    "metadata": {
      "chunk_id": "6a23b17f95fc61caa77ad77fd10ec630",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 2] 1 multiple hash functions 5 2 token holder influence 8 9 9 6 transactions 10 6 1 utxos 10 7 tokens 11 7 1 moving tokens comparison 12 7 2 different types token 13 7 3 tokens 13 8 contracts 8 1 active contract set 8 2 resource verification 8 3 formal verification contract communication 8 4 contracts work 8 5 managing assets 8 6 chain contracts 8 7 confidential agreements decentralized escrow 14 14 16 17 17 18 18 18 9 bitcoin 19 9 1 application token sale 20 9 2 application sidechain 21 9 3 application simple cross chain swaps 21 10 zen 21 10 1 option merklized oracle 22 10 2 token exchange 23 list figures 1 2 3 4 5 6 bitcoin transaction zen transaction active contract set resource verification private agreement decentralized merged consensus escrow 12 13 15 16 19 20 x0c1 introduction bitcoin designed digital money central authority succeeded identifying key problem xe2 x80 x94consensus ownership xe2 x80 x94and providing mechanism reach consensus subverted real costly resources solution",
    "metadata": {
      "chunk_id": "72403729d68d04ca25a260f1b5bac6f7",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 3] designed digital money central authority succeeded identifying key problem xe2 x80 x94consensus ownership xe2 x80 x94and providing mechanism reach consensus subverted real costly resources solution proof work blockchain widely imitated introduce zen blockchain trade kind financial asset consensus ownership freedom central control bitcoin provides money assets connect digital agreements powerful programmable abilities process information grant rights zen observes bitcoin network allows assets backed bitcoin discussing zen detail let xe2 x80 x99s look bitcoin protocol 2 digital agreements bitcoin consensus transfers money owner bitcoin permits consensus complicated kinds digital agreements instance multi signature schemes allow bitcoins locked digital key digital agreements consensus transaction ledger entirely decentralized consensus party ability defend broken agreement bitcoin xe2 x80 x99s lightning network uses agreements kind sorts digital agreement known smart contracts smart",
    "metadata": {
      "chunk_id": "0ebccdd5ad9fd22e2635c2225fec6369",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 4] ledger entirely decentralized consensus party ability defend broken agreement bitcoin xe2 x80 x99s lightning network uses agreements kind sorts digital agreement known smart contracts smart contracts bitcoin distinctive properties 1 relate flow bitcoins e money assets 2 consume network resources direct transfer money 3 necessary applications free central control bitcoin supports smart contracts needed improve bitcoin xe2 x80 x99s ability decentralized digital money end bitcoin xe2 x80 x99s scripting language intentionally restrictive preventing contracts consuming excessive resources requiring extremely efficient possible bitcoin smart contracts pay way replacing transactions recorded blockchain assets bitcoin contracts require minimal computation validate bitcoin provide right solution reaching consensus uses compete bitcoin xe2 x80 x99s page 3 24 zenprotocol com introduction x0cmonetary function xe2 x80 x94secure reliable digital money central control conflict particular bitcoin",
    "metadata": {
      "chunk_id": "29d4291e68a2ae18beb3da83f804601a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 5] reaching consensus uses compete bitcoin xe2 x80 x99s page 3 24 zenprotocol com introduction x0cmonetary function xe2 x80 x94secure reliable digital money central control conflict particular bitcoin blockchain attempts create money provide smart contracts limit 3 design zen protocol zen blockchain designed support real financial products powerful automation freedom central control uses motivate decisions zen protocol xe2 x80 x99s architecture section gives high level overview architecture 3 1 bitcoin integration zen scarce native token contract activation token intended monetary competition zen supports tight integration bitcoin blockchain allowing bitcoin backed assets currency zen protocol scarce native token means xe2 x80 x99s need xe2 x80 x9cofficial xe2 x80 x9d bitcoin backed asset1 multiple competing services bitcoin value zen blockchain time native token lowers cost zen subsidizing miners secure chain zen node keeps track bitcoin consensus giving contracts ability use state",
    "metadata": {
      "chunk_id": "8fd5fa574fd57656f2e20212f8732468",
      "entities": {
        "crypto_project": [
          "bitcoin"
        ],
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 6] multiple competing services bitcoin value zen blockchain time native token lowers cost zen subsidizing miners secure chain zen node keeps track bitcoin consensus giving contracts ability use state bitcoin blockchain deciding actions zen protocol attempts forward compatible updates bitcoin drivechains offer decentralized way bitcoins different blockchains solves problem smart contracts competing resources secure money transfer 3 2 verified contracts contracts come proofs long run xe2 x80 x94which means compiled run faster xe2 x80 x94and come proofs xe2 x80 x94which means contracts understand treat assets accordingly proofs written language contracts section 8 2 explains proofs work zen contracts cost user resources execute successfully xe2 x80 x94there xe2 x80 x9cout gas xe2 x80 x9d errors 1 rootstock discussed blockchain xe2 x80 x9cofficial xe2 x80 x9d asset page 4 24 zenprotocol com design zen protocol x0c3 3 contract lifecycle bitcoin code xe2 x80 x9ccontract xe2 x80 x9d recorded",
    "metadata": {
      "chunk_id": "bc959e7e5bf71652165096f6edcf98ef",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 7] 1 rootstock discussed blockchain xe2 x80 x9cofficial xe2 x80 x9d asset page 4 24 zenprotocol com design zen protocol x0c3 3 contract lifecycle bitcoin code xe2 x80 x9ccontract xe2 x80 x9d recorded blockchain time ethereum contracts created live blockchain indefinitely zen contracts pay block pay miners single block active miner friendly node friendly solution persistent contracts contracts actually affect blockchain cached memory miners paid caching 3 4 chain security multihash proof work zen uses proof work secure blockchain xe2 x80 x99s transaction history proof work demands miners invest real unforgeable resources commonly proposed alternative proof stake demonstrated combine security open access incentive compatibility particular xe2 x80 x9cstake xe2 x80 x9d xe2 x80 x9cproof stake xe2 x80 x9d asset stakers compensated entrenches existing owners asset expense future users proof stake couples security blockchain value particular token blockchain token changes value cost rewriting",
    "metadata": {
      "chunk_id": "be47184084fc6890b904dd14dab3af62",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 8] x80 x9d asset stakers compensated entrenches existing owners asset expense future users proof stake couples security blockchain value particular token blockchain token changes value cost rewriting blockchain changes case proof work cost rewriting blockchain determined physical resources secure miner centralization describes phenomenon mining power concentrated hands individuals companies real concern decentralized platform concern bitcoin zen reduces influence single powerful miner introducing multihash mining described section 5 perlow cook 2017 3 5 assets idea owning asset basic meaning zen bitcoin means able xe2 x80 x9cunlock xe2 x80 x9d asset digital signature zen uses standard public key authentication user owned assets zen supports multiple assets types protocol level means contracts understand use assets assets held moved simple efficient public key authentication lets assets zen based lightning network makes easy swap assets held blockchains contracts assets define uses 3 6",
    "metadata": {
      "chunk_id": "e2c05a64c16ad6fed915857d9eece4aa",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 9] understand use assets assets held moved simple efficient public key authentication lets assets zen based lightning network makes easy swap assets held blockchains contracts assets define uses 3 6 light client security decentralized smart contract platform like zen xe2 x80 x99s unlikely users powerful devices like mobile phones download fully validate page 5 24 zenprotocol com design zen protocol x0cthe entire blockchain makes important users able obtain good level security trusting centralized source information bitcoin xe2 x80 x99s solution simplified payment verification spv uses proof work xe2 x80 x9con xe2 x80 x9d transaction zen including additional commitments xe2 x80 x94information light clients use prove additional properties contract active zen uses data structures like efficient sparse merkle tree fast update proofs fast generate 3 7 state control blockchains state transactions access state simple example transaction xe2 x80 x9cknows xe2 x80 x9d value transfers actually",
    "metadata": {
      "chunk_id": "121b3fa387ca0a894a6ac9e8f6f1976d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 10] sparse merkle tree fast update proofs fast generate 3 7 state control blockchains state transactions access state simple example transaction xe2 x80 x9cknows xe2 x80 x9d value transfers actually exists zen protocol controls state live limited exceptions mechanism data transaction outputs similar bitcoin distinct protocols like ethereum tezos allow contracts store data global store contracts zen immutable store state transaction outputs source code changes design makes easier reason smart contracts unlike protocols rights administered data areas called xe2 x80 x9cprivate xe2 x80 x9d access rights zen protocol makes clear rights granted cryptographic authentication possession tokens 4 platforms apart bitcoin restricts smart contracts bitcoins don xe2 x80 x99t compete bitcoin xe2 x80 x99s monetary function blockchains offered smart contracts2 look compare zen protocol xe2 x80 x99s solution 4 1 ethereum ethereum tries provide currency ether platform decentralized applications dapps",
    "metadata": {
      "chunk_id": "288787cc3a0a97834621c3151d10d29d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 11] monetary function blockchains offered smart contracts2 look compare zen protocol xe2 x80 x99s solution 4 1 ethereum ethereum tries provide currency ether platform decentralized applications dapps implements applications single xe2 x80 x9cworld computer xe2 x80 x9d assets implemented world computer kind application higher level abstraction ether means ethereum transactions paid ether contrast zen contract creation requires native token xe2 x80 x94a normal transaction fee paid asset internal currency unit account creates conflict mentioned dapps 2 non blockchain solutions like open transactions available limit discussing platforms purport free central authority page 6 24 zenprotocol com platforms x0cmoving ether expensive monetary function makes dapps expensive class assets ethereum token means running dapp created xe2 x80 x94even sending user dapps xe2 x80 x99t understand new asset types trusted human loop verify xe2 x80 x99re xe2 x80 x9creal xe2 x80 x9d tokens ethereum intends called",
    "metadata": {
      "chunk_id": "7148dafc4d73b03367ce2385928f4ba6",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 12] running dapp created xe2 x80 x94even sending user dapps xe2 x80 x99t understand new asset types trusted human loop verify xe2 x80 x99re xe2 x80 x9creal xe2 x80 x9d tokens ethereum intends called xe2 x80 x9cproof stake xe2 x80 x9d system determining consensus retiring proof work proposed potential efficiency measure clear prevent contention resources monetary function smart contract capability ethereum xe2 x80 x99s contracts notoriously hard verify correct fault particular ethereum xe2 x80 x94 xe2 x80 x9cformal verification xe2 x80 x9d difficult xe2 x80 x94but ethereum designed verification easy extends proofs long contracts execute proofs exist3 xe2 x80 x99re useful measure gas necessary don xe2 x80 x99t fix fundamental problem gas system creates slow interpreted contracts fail middle execution costing user money gas system creates problem formal verification solve users conflicting instructions contract win race users pay making transaction xe2 x80 x99s worse miners incentivized",
    "metadata": {
      "chunk_id": "6586c97ac0c25c781760f8df34fa03d2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 13] execution costing user money gas system creates problem formal verification solve users conflicting instructions contract win race users pay making transaction xe2 x80 x99s worse miners incentivized order transactions pays gas wins 4 particularly affects applications like auctions markets capped token sales 4 2 rootstock simply rootstock intended ethereum bitcoins instead ether involves sidechain xe2 x80 x94a blockchain connects bitcoin enabling users bitcoins sidechain rootstock xe2 x80 x99s smart contract logic internal architecture identical ethereum shortcomings sidechain rootstock goes way separating monetary functionality smart contract capability consider unlikely solve problem reasons firstly adopting ethereum xe2 x80 x99s architecture rootstock demands user pay single transaction rootstock bitcoins ethereum transaction paid ether means smart contracts greater impact monetary supply ease sending money people secondly cost securing rootstock xe2 x80 x99s blockchain paid",
    "metadata": {
      "chunk_id": "c185791b154e45af03c7a138ce57b431",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 14] rootstock bitcoins ethereum transaction paid ether means smart contracts greater impact monetary supply ease sending money people secondly cost securing rootstock xe2 x80 x99s blockchain paid entirely transaction fees meaning short term fluctuations 3 bhargavan et al 2016 demonstrate gas cost proofs translating ethereum contracts f 4 scenario xe2 x80 x94everyone pays bid person wins xe2 x80 x94is known pay auction page 7 24 zenprotocol com platforms x0coverall demand smart contracts immediate effect security platform rootstock stated intention decentralized sidechain model bitcoin protocol supports suitable mechanism drivechains current form rootstock central authority rootstock xe2 x80 x99s mechanism moving bitcoins chains single trusted xe2 x80 x9cfederation xe2 x80 x9d federation model group companies acts depositories holding bitcoins sidechain releasing according rules rootstock protocol key purpose blockchain remove need trust single authority makes blockchain unnecessary 4 3",
    "metadata": {
      "chunk_id": "544f68df58e57070b127c8407460aef6",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 15] group companies acts depositories holding bitcoins sidechain releasing according rules rootstock protocol key purpose blockchain remove need trust single authority makes blockchain unnecessary 4 3 tezos tezos clean sheet design blockchain intended xe2 x80 x9cthe cryptocurrency xe2 x80 x9d aims supplant bitcoin ethereum providing money performant smart contracts decentralized mechanism upgrading blockchain itself5 single asset blockchain competes monetary function tezos suffers conflict smart contract functionality unlike zen use proof stake shares zen goal making easy prove things contracts tezos uses custom stack based language called michelson proofs written michelson xe2 x80 x94they written existing theorem proving systems like isabelle coq apart requiring programmers learn new language means tezos protocol able use proofs initially6 tezos attempt prove long contracts execute simply takes brute force approach putting global limit execution time means tezos contracts interpreted",
    "metadata": {
      "chunk_id": "e9dded6597b9891a270cfd8831e68f2f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 16] means tezos protocol able use proofs initially6 tezos attempt prove long contracts execute simply takes brute force approach putting global limit execution time means tezos contracts interpreted compiled guarantees quick contracts expensive slow contracts cheap 5 multihash mining overview multihash mining paper zen section discusses new way secure blockchain proof work multihash mining proof work ties blockchain integrity real work occurs sort work requiring capital investment miners benefit economies 5 users submit patches written ocaml coin holders vote possible write xe2 x80 x9ccoq parsing patch xe2 x80 x9d ocaml submit protocol upgrade consider inelegant 6 page 8 24 zenprotocol com multihash mining x0cof scale lead fewer independent miners miner centralization introduces risks increased conflict miners users efficiently individual miner specialize buying equipment particularly good mining particular hash function category hash functions instance bitcoin miners use asic based",
    "metadata": {
      "chunk_id": "8af48b01096f11bfb2c0ff130b5bf221",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 17] conflict miners users efficiently individual miner specialize buying equipment particularly good mining particular hash function category hash functions instance bitcoin miners use asic based hardware sha 256 2 algorithm litecoin miners use asic hardware scrypt function hash functions specialized hardware xe2 x80 x94miners normally use gpus cpus functions multihash mining takes advantage natural economies scale implicit proof work reduce risk miner user conflict 5 1 multiple hash functions block zen proof work attached zen protocol accepts different kinds proof work corresponding different hash function hash function difficulty nodes verify blocks checking proof work difficulty hash function additional changes basic proof work algorithm leads difficulties unbalanced time unpredictable events like different rates improvement hardware changing profitability blockchains relatively easy hard particular hash function zen protocol resolves targeting hash function ratio number blocks mined",
    "metadata": {
      "chunk_id": "8b634cab73eeb865d2d63188eff7a793",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 18] like different rates improvement hardware changing profitability blockchains relatively easy hard particular hash function zen protocol resolves targeting hash function ratio number blocks mined hash function counted week period difficulty hash function adjusted create fewer blocks period 5 2 token holder influence hash function ratio fixed owners zen native token change time weeks owner zen native token vote mix hash functions mix shifts particular function function xe2 x80 x99s difficulty reduced making mining easier increasing reward miners mix shifts away difficulty increase reduces reward miners function miners specialize algorithm algorithms vote real effect profitability miners affected quickly case hard fork change proof work effects change reversed vote expect xe2 x80 x9citerated game xe2 x80 x9d encourage miners token holders cooperate page 9 24 zenprotocol com multihash mining x0c6 transactions zen protocol value stored xe2 x80 x9cunspent transaction outputs xe2 x80 x9d",
    "metadata": {
      "chunk_id": "f5ea5f558348aece00ecd9731f416906",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 19] game xe2 x80 x9d encourage miners token holders cooperate page 9 24 zenprotocol com multihash mining x0c6 transactions zen protocol value stored xe2 x80 x9cunspent transaction outputs xe2 x80 x9d utxos short utxos parts 1 value store 2 conditions unlocking value value utxo simply quantity asset token zen different kinds token condition spending utxo called lock classes lock simple locks correspond common use cases example pklock thing pay pubkey hash p2pkh bitcoin example spend utxo lock pklock bcff 3a12 transaction contain signature public key hash bcff 3a12 contract locks unlocked contract utxo lock contractlock 65b9 47c4 spent contract identifier 65b9 47c4 makes transactions similar bitcoin xe2 x80 x94they unlock inputs lock value new xe2 x80 x9coutputs xe2 x80 x9d signatures information contracts etc special xe2 x80 x9cwitness xe2 x80 x9d field equivalent bitcoin xe2 x80 x99s script language xe2 x80 x94contracts handle complex logic witnesses don xe2 x80 x99t affect hash",
    "metadata": {
      "chunk_id": "1ddbf5220df7ccff322516cb45ede86d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 20] information contracts etc special xe2 x80 x9cwitness xe2 x80 x9d field equivalent bitcoin xe2 x80 x99s script language xe2 x80 x94contracts handle complex logic witnesses don xe2 x80 x99t affect hash transaction means transactions zen protocol protected malleability attacks xe2 x80 x94the benefit bitcoin gets segwit upgrade users don xe2 x80 x99t things like pklock bcff 3a12 convenience addresses encoded error protection short identifier xe2 x80 x94zen uses bitcoin xe2 x80 x99s new bech32 format wuille 2016 6 1 utxos common paradigms blockchains utxo oriented accountoriented utxo oriented paradigm assets stored outputs destroyed soon spent think taking coins melting casting new coins metal new coins old individual coins look different marked different owners different sizes refer utxo oriented paradigm coin oriented emphasize importance coins account oriented paradigm assets live particular account xe2 x80 x9csending asset xe2 x80 x9d means removing asset account putting inside",
    "metadata": {
      "chunk_id": "a537b73fdbbac3aedf6e74a7b4204155",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 21] oriented paradigm coin oriented emphasize importance coins account oriented paradigm assets live particular account xe2 x80 x9csending asset xe2 x80 x9d means removing asset account putting inside account account oriented paradigm slightly intuitive utxo coin oriented model advantages page 10 24 zenprotocol com transactions x0cnon blocking transactions naive account oriented protocols suffer replay attack vulnerability valid transactions instance taking payment attacker reuse transaction drain buyer xe2 x80 x99s account prevent vulnerabilities account oriented protocols require transaction account include counter increases time account forces transactions occur blockchain order created gaps unfortunately leads poor performance load transaction blocks transactions account mined dropped miners xe2 x80 x99 mempools account oriented protocols encourage user account user completely blocked blockchain network load event coin oriented protocols susceptible vulnerability attempting reuse",
    "metadata": {
      "chunk_id": "99e47d785b0256d7149b6ad084fc72ed",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [
          "vulnerability"
        ],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 20.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 22] miners xe2 x80 x99 mempools account oriented protocols encourage user account user completely blocked blockchain network load event coin oriented protocols susceptible vulnerability attempting reuse transaction means attempting spend coins impossible transaction counter coin oriented protocols usually perform better load parallel validation bitcoin transaction validated limited data knowing inputs unspent current block height timestamp effects transaction simply inputs consumed outputs created makes possible validate transactions independently zen transactions require little information effects transactions affect xe2 x80 x99s validity xe2 x80 x99s fast check ones account oriented systems usually need strictly linear validation order transactions arbitrary hard check effects validity state management coin oriented protocols natural use contracts state xe2 x80 x94data changes time xe2 x80 x94is stored attached coins makes clear different contracts affect xe2 x80 x99 state gives control",
    "metadata": {
      "chunk_id": "57ef80ada7caefae0da7e749fe18e22b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [
          "vulnerability"
        ],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 20.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 23] management coin oriented protocols natural use contracts state xe2 x80 x94data changes time xe2 x80 x94is stored attached coins makes clear different contracts affect xe2 x80 x99 state gives control manage state practice digital agreements don xe2 x80 x99t require state xe2 x80 x94 agreements simply create state carrying coins 7 tokens unlike bitcoin kind token protocols like ethereum use custom contracts implement functionality tokens page 11 24 zenprotocol com tokens x0cthe zen protocol xe2 x80 x99s tokens class citizens means sort token zen similar status zen native token tokens stored transaction outputs bitcoin unlocked right permissions locked new outputs 7 1 moving tokens comparison bitcoin value transaction xe2 x80 x99s output represents certain number bitcoins locked output bitcoins spent unlocking outputs locking bitcoins inside new outputs instance transaction takes output bitcoins output bitcoins unlocks locks new outputs btc transaction input 0 5 btc input 1 2 btc output",
    "metadata": {
      "chunk_id": "af8591cfdcf497ebcaaa583788738a0f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 24] spent unlocking outputs locking bitcoins inside new outputs instance transaction takes output bitcoins output bitcoins unlocks locks new outputs btc transaction input 0 5 btc input 1 2 btc output 0 4 btc 4 b tc u t xo output 1 3 btc 3 b tc u t xo figure 1 bitcoin transactions unlock inputs freeing bitcoins inside xe2 x80 x94then immediately lock bitcoins inside new outputs new unspent transaction outputs utxos available spent zen transaction outputs lock tokens type transaction unlocks utxo carrying token x utxo carrying token y carrying token x type utxo locks new outputs page 12 24 zenprotocol com tokens x0czen transaction input 0 2 token x input 1 3 token y input 2 5 token x output 0 7 token x 7 k e n x u t xo output 1 2 token y 2 k e n y u t xo output 2 1 token y 1 k e n y u t xo figure 2 zen transactions unlock kind asset immediately lock tokens new owners inside new transactions outputs bitcoin new utxos spent according new conditions locks 7 2 different types token contract",
    "metadata": {
      "chunk_id": "5e0649c09f1018e35480ba1ddc02b94a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 25] 2 zen transactions unlock kind asset immediately lock tokens new owners inside new transactions outputs bitcoin new utxos spent according new conditions locks 7 2 different types token contract create 2256 kinds token 2256 possible contract ids total 2512 possible kinds token zen single asset issued contract native mined zen token discuss need token section 8 1 1 7 3 tokens class tokens provide convention representing financial rights contracts users immediately assets hold xe2 x80 x94without passing messages contracts parsing contract code trusted source information assets makes easy create powerful digital agreements instance contract accept kind asset collateral issue token acting option asset knowing asset users contract xe2 x80 x99s options wallets upgrades add ons etc page 13 24 zenprotocol com tokens x0czen xe2 x80 x99s token support makes easy sell transfer rights consider example interest rate swap popular financial product parties agree pay interest payments lump capital",
    "metadata": {
      "chunk_id": "20111ba65557c55ceed73d393568594d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 26] zenprotocol com tokens x0czen xe2 x80 x99s token support makes easy sell transfer rights consider example interest rate swap popular financial product parties agree pay interest payments lump capital party agrees pay fixed interest rate pays floating market rate interest zen digital agreement use contract issues different kinds token representing fixed rate floating rate contract holds reasonable collateral party order cover expected payments suppose party pays fixed rate wants close position finds willing buy takes single transaction exchange payment token grants right xe2 x80 x9cfixed leg xe2 x80 x9d transaction happens interacting interest rate swap contract 8 contracts contracts users similar abilities zen protocol interact blockchain creating transactions contracts users co operate create single transaction xe2 x80 x94the basis xe2 x80 x9clevel 2 xe2 x80 x9d protocols users pseudonymous use public key cryptographic control assets contract unique identifier automatically control",
    "metadata": {
      "chunk_id": "b1706c0b8a011d6b179be363c594853f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 27] create single transaction xe2 x80 x94the basis xe2 x80 x9clevel 2 xe2 x80 x9d protocols users pseudonymous use public key cryptographic control assets contract unique identifier automatically control assets locked identifier 8 1 active contract set contracts live active contract set contracts set create transactions interact blockchain figure 3 contracts enter acs user pays contract sacrifice zen native token goes miner activates contract rest going miners contract xe2 x80 x99s lifetime contracts extended additional contract sacrifices sacrifices run leave acs inactive reactivates providing source code new sacrifice 8 1 1 zen native token payment activating contract unusual doesn xe2 x80 x99t miner records activation user makes normal transaction things happen 1 miner includes transaction block 2 miner receives transaction fee page 14 24 zenprotocol com contracts x0cnode inactive contract node inactive contract figure 3 active contracts marked red affect zen blockchain nodes remember",
    "metadata": {
      "chunk_id": "26daaa1b58ad351568402327da526673",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 28] block 2 miner receives transaction fee page 14 24 zenprotocol com contracts x0cnode inactive contract node inactive contract figure 3 active contracts marked red affect zen blockchain nodes remember active contracts don xe2 x80 x99t need store inactive contracts actions xe2 x80 x94including transaction block receiving fee xe2 x80 x94are linked happen gives miner simple choice transaction fee worthwhile include transaction hand user activates extends contract following happens 1 miner includes transaction block 2 miner receives transaction fee 3 contract active certain number blocks 4 miner blocks track contract acs 5 miner blocks paid transaction xe2 x80 x99s contract sacrifice miner includes transaction block choice activating contract miners track active contract don xe2 x80 x99t decide transaction fee case goes miner contract sacrifice determined makes important reward miners asset know want reason zen protocol uses native token generated mining asset activate contracts asset focal",
    "metadata": {
      "chunk_id": "3f3617240d4154691bd3f8705794d5b0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 29] transaction fee case goes miner contract sacrifice determined makes important reward miners asset know want reason zen protocol uses native token generated mining asset activate contracts asset focal point miners interested mining miners likely want contract sacrifices paid asset page 15 24 zenprotocol com contracts x0c8 2 resource verification contracts zen protocol prove long run enter blockchain proofs checked automatically node zen protocol enforces dialect f programming language implement cost types verify resources program uses compile time figure 4 f language consensus source code contract goes directly blockchain makes zen contracts efficient node compile contract run times needed counting resource usage unverified program counts cycles program runs input f x 20 cycles g x 30 cycles h x 10 cycles output cost 60 verified program proves advance long function program takes run input 20 cycles 30 cycles 10 cycles f x g x h x output figure 4 conventional xe2 x80 x9cturing complete",
    "metadata": {
      "chunk_id": "8f9f8e7ac1422979ae4821cdf424800b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 31] contract leave f calculate running time developers write proofs write small pieces contract f xe2 x80 x99t prove 8 2 1 turing complete alan turing proved 1936 programs proven halt run forever zen requires contracts halt fact proof long takes halt zen turing complete xe2 x80 x94 possible programs zen xe2 x80 x99s smart contracts practice rarely use algorithms don xe2 x80 x99t good idea long run decentralized platforms particular limited resources computation allowing programs run indefinitely break consensus users use algorithms halt eventually stop execution algorithms usually automatically monitoring times outer loop algorithm rare cases internal behaviour algorithm completely chaotic 8 3 formal verification contract communication zen xe2 x80 x99s contract language powerful use formal verification lot check resource usage contracts prove things assets create contracts use proofs example interest rate swap contract subsection 7 3 prove assets collateralized swaps use libor interest",
    "metadata": {
      "chunk_id": "4ebfe091daeea2dabe6150861bf37e1d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 32] verification lot check resource usage contracts prove things assets create contracts use proofs example interest rate swap contract subsection 7 3 prove assets collateralized swaps use libor interest rate contracts identify assets use portfolios 8 4 contracts work contracts change state zen xe2 x80 x99s blockchain creating transactions contract implements function takes existing blockchain state xe2 x80 x94unspent transaction outputs block headers information bitcoin blockchain xe2 x80 x94and returns transaction nodes verify transactions running contract output contract sandboxed communicate contracts create transaction carries message contracts immutable manage state utxos code changes mentioned section 6 1 properties contracts control behaviour harder create vulnerabilities caused problems existing smart contract platforms page 17 24 zenprotocol com contracts x0c8 5 managing assets subsection 7 2 mentioned contract create different kinds token tokens tagged contract creates xe2 x80",
    "metadata": {
      "chunk_id": "393e14d48aeb87331c8083f63e25a345",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 33] existing smart contract platforms page 17 24 zenprotocol com contracts x0c8 5 managing assets subsection 7 2 mentioned contract create different kinds token tokens tagged contract creates xe2 x80 x94 contract x xe2 x80 x99t create token tagged contract y contracts use kind token xe2 x80 x94both issued contracts native zen token created mining contracts assets looking utxo set 8 6 chain contracts xe2 x80 x99s possible lock assets contract activated user checks contract valid publishing works identifier taking hash source code produces contract address like c67s4 ldn3 like contract address contract kept secret activated assets spent revealing contract xe2 x80 x99s source code 8 7 confidential agreements decentralized escrow agreements public private agreements possible simplified form mast proposal bitcoin lau 2016 scheme parties agreement different conditions turn tree use merkle root tree contract identifier figure 5 contract means revealing single branch tree condition tip branch xe2",
    "metadata": {
      "chunk_id": "8bc8ad4ea9e0116c2669380d3a8a7dc4",
      "entities": {
        "crypto_project": [
          "zen token"
        ],
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 34] bitcoin lau 2016 scheme parties agreement different conditions turn tree use merkle root tree contract identifier figure 5 contract means revealing single branch tree condition tip branch xe2 x80 x9csubcontracts xe2 x80 x9d agreement published blockchain resolve dispute parties cooperate use multisig branch tree xe2 x80 x94keeping terms private page 18 24 zenprotocol com contracts x0cagreement users sign multisig transaction m e r k l e r o ot c o n t r ac t m e r k l e r o ot m u lt s g disgreement user activates contract settle dispute b parties agree outcome agreement sign multisig transaction use proof inclusion represented red path multisig conditions reached merkle root contract stays secret c o n t r ac t m u lt s g b parties disagree party activates contract uses proof inclusion enforce agreed terms gives confidentiality use decentralized enforcement figure 5 confidential digital agreement parties 9 bitcoin existing blockchains relate bitcoin ways alternative blockchains",
    "metadata": {
      "chunk_id": "79b3f668decb5494d8c2388ae4f56768",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 35] enforce agreed terms gives confidentiality use decentralized enforcement figure 5 confidential digital agreement parties 9 bitcoin existing blockchains relate bitcoin ways alternative blockchains altcoins compete provide new variant money sidechains depend completely parent chain zen takes approach zen parallel blockchain zen tracks bitcoin blockchain recording bitcoin block headers miners compete include bitcoin block headers zen blocks days later zen nodes reach consensus headers ended best valid bitcoin blockchain miners rewarded blocks figure 6 delayed consensus mechanism avoids problems chain reorganizations sidechains experience delay means short bitcoin reorganizations don xe2 x80 x99t effect zen blockchain7 contracts need high security use validated best bitcoin chain decide actions time contracts recent bitcoin headers contracts don xe2 x80 x99t need high level security use reorganization insurance zen asset class pays insurance bitcoin chain reorganizes 7 reorganizations",
    "metadata": {
      "chunk_id": "f86ec34aea8a64a0ee14a39c58e23a72",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 36] time contracts recent bitcoin headers contracts don xe2 x80 x99t need high level security use reorganization insurance zen asset class pays insurance bitcoin chain reorganizes 7 reorganizations blocks rare bitcoin known altered hours ledger xe2 x80 x99s history page 19 24 zenprotocol com bitcoin x0czen blockchain btc blockchain zen block committed known unseen invalidated figure 6 zen nodes track zen blockchain bitcoin blockchain zen blocks contain bitcoin block headers making zen protocol aware happens bitcoin figure zen blockchain knows headers blue coloured bitcoin blocks oldest marked x zen xe2 x80 x99s consensus valid chain proof work 9 1 application token sale bitcoin integration makes possible sell tokens bitcoins sale contract checks purchase bitcoin block creates tokens sends zen address buyer xe2 x80 x99s address encoded bitcoin transaction update bitcoin protocol necessary user finds sale clicks link open zen wallet wallet checks terms shows user purchase address user sends",
    "metadata": {
      "chunk_id": "4cfbbe9356b0b862e75e3e29ec50c564",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 37] address buyer xe2 x80 x99s address encoded bitcoin transaction update bitcoin protocol necessary user finds sale clicks link open zen wallet wallet checks terms shows user purchase address user sends bitcoins address zen wallet automatically claims tokens case capped sale sale contract hold collateral insure buyers try participate sale ends zen wallet understands terms displays prospective buyers ways conduct token sale buyer seller online seller create signed promise honour transactions particular bitcoin address buyer purchase tokens downloading zen wallet xe2 x80 x94the user experience page 20 24 zenprotocol com bitcoin x0cthe bitcoin transaction buyer download zen wallet later open promise claim tokens 9 2 application sidechain ways value bitcoin zen assets zen represent bitcoin value called bitzen assets treated specially zen wallet shows risk profiles owners bitzen surrogate bitcoins assets digital agreements use bitcoin currency type bitzen asset created contract holds assets",
    "metadata": {
      "chunk_id": "07014a26e74911e29e129a1abd36e2a3",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 38] called bitzen assets treated specially zen wallet shows risk profiles owners bitzen surrogate bitcoins assets digital agreements use bitcoin currency type bitzen asset created contract holds assets collateral zen native token bitzen assets contract issues bitzen certain addresses sent bitcoins token sale application unlike token sale owns contract xe2 x80 x99s bitzen chain withdrawal request request starts countdown contract owner send bitcoins requested address provide transaction contract countdown ends contract uses collateral compensate bitzen owner type bitzen created group contract operators xe2 x80 x9cfederation xe2 x80 x9d 8 single contract common operator individually responsible fulfilling withdrawal requests contributes collateral contract case operator fails fulfill withdrawal request bitzen owner turn operator instead 9 3 application simple cross chain swaps zen protocol fully supports xe2 x80 x9catomic swaps xe2 x80 x9d blockchains parties use timelocked transactions",
    "metadata": {
      "chunk_id": "1bfeb7a7277b483c0349282e97e2bce4",
      "entities": {
        "crypto_project": [
          "token bitzen"
        ],
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 39] request bitzen owner turn operator instead 9 3 application simple cross chain swaps zen protocol fully supports xe2 x80 x9catomic swaps xe2 x80 x9d blockchains parties use timelocked transactions exchange assets chain assets case bitcoin particularly simple xe2 x80 x9ctoken sale xe2 x80 x9d contract operate asset controls allowing holding zen asset swap bitcoins slightly complex contract support multiple sellers buyers different assets different prices xe2 x80 x94which short step away token exchange discussed 10 zen zen supports financial products section discuss examples assets agreements possible zen protocol makes easier discover use 8 federation exist issue bitzen asset page 21 24 zenprotocol com zen x0c10 1 option merklized oracle option derivative gives holder buy asset set price example option stock x set price strike price 160 dollars gives holder buy x stock 160 dollars details holder use exercise option different different kinds option discuss variant option doesn xe2 x80",
    "metadata": {
      "chunk_id": "96ac48057c7b2784b90dc4151224e44c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 41] x9d collateral 10 1 2 data feed merklized oracle contract needs know current price stock order calculate pay option holder requires neutral independent source data source oracle continually creates commitments stock xe2 x80 x99s price price stocks assets efficient form merkle tree merkle tree data structure bitcoin uses committing transactions inside block produces single 32 byte hash option holder wants exercise option pays oracle audit path xe2 x80 x94a proof price stock covered commitment efficient way use oracles data actually gets blockchain data paid uses oracle commitment cover different options asset types buyer seller option don xe2 x80 x99t want rely single oracle xe2 x80 x99s simple use contract takes different oracles listens majority result page 22 24 zenprotocol com zen x0c10 1 3 interface discovering viewing asset option limited use potential buyers find view understand contract writer makes possible writing proof contract zen wallet preloaded definition options sees",
    "metadata": {
      "chunk_id": "08fbdcf476d7cc79f2968ebb34442297",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 42] 1 3 interface discovering viewing asset option limited use potential buyers find view understand contract writer makes possible writing proof contract zen wallet preloaded definition options sees proof verifies displays verified option contract information underlying stock collateral oracles information available options users download new asset type definitions new verified asset types note doesn xe2 x80 x99t mean matching contract template contract author shows contract lets use single contract hold collateral sell options multiple different stocks instance xe2 x80 x94without dividing collateral user sees options zen wallet verified available purchase 10 2 token exchange small exchange executes thousands trades day 9 makes completely chain markets far inefficient blocks mined random intervals trades final appear blockchain chain markets introduce unavoidable random delay moment trade public moment finalized runners observe trades advantage trying trades mined runners bad markets",
    "metadata": {
      "chunk_id": "de5b68b1f647a5a4a84e6f50beebf89b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 43] intervals trades final appear blockchain chain markets introduce unavoidable random delay moment trade public moment finalized runners observe trades advantage trying trades mined runners bad markets offer liquidity provide price information harris 2003 pp 245 257 discuss simple token exchange uses central coordinator transactions chain xe2 x80 x99t steal deposits users open account exchange marking funds public keys sending exchange xe2 x80 x99s contract establish state channels coleman 2015 exchange user update state channel bids asks exchange responsible executing trades matching bids asks state channels share common merkle root recent transactions exchange sends proofs user trades present merkle root exchange steal users xe2 x80 x99 assets withdrawals sending message contract proving state channel closed case dispute exchange users prove contract acted correctly party tries use old version state channel grace period lets submit fraud proof model users demand exchange hold 9 mature",
    "metadata": {
      "chunk_id": "860ec36801fb055988377f08dbb6909c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [
          "fraud"
        ],
        "operational": []
      },
      "risk_score": 10.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 44] channel closed case dispute exchange users prove contract acted correctly party tries use old version state channel grace period lets submit fraud proof model users demand exchange hold 9 mature economy significant underestimate bitfinex executes 4000 trades second nasdaq executes approximately 1 mm trades second page 23 24 zenprotocol com zen x0cof collateral collateral strictly necessary protect users acts sort buffer making easier users unwind trades quickly making possible maintain security monitoring exchange frequently references karthikeyan bhargavan antoine delignat lavaud ce xcc x81dric fournet anitha gollamudi georges gonthier nadim kobeissi natalia kulatova aseem rastogi thomas sibut pinote nikhil swamy santiago zanellabe xcc x81guelin formal verification smart contracts short paper proceedings 2016 acm workshop programming languages analysis security plas xe2 x80 x9916 pages 91 xe2 x80 x9396 new york ny usa 2016 acm isbn 978 1 4503 4574 3 doi 10 1145 2993600 2993611 url",
    "metadata": {
      "chunk_id": "45627f250e417949e4123ad1352afbdd",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [
          "fraud"
        ],
        "operational": []
      },
      "risk_score": 22.0,
      "source": "Zen Protocol.txt"
    }
  },
  {
    "text": "[Section 45] paper proceedings 2016 acm workshop programming languages analysis security plas xe2 x80 x9916 pages 91 xe2 x80 x9396 new york ny usa 2016 acm isbn 978 1 4503 4574 3 doi 10 1145 2993600 2993611 url http doi acm org 10 1145 2993600 2993611 jeff coleman state channels nov 2015 url http www jeffcoleman state channels larry harris trading exchanges oxford university press 2003 johnson lau merkelized abstract syntax tree apr 2016 url https github com bitcoin bips blob master bip 0114 mediawiki adam perlow nathan cook proportionate response multihash mining mar 2017 url https www zenprotocol com proportionateresponse pdf paul sztorc drivechain enabling bitcoin sidechains 2015 url http www drivechain info literature index html pieter wuille base32 address format native v0 16 witness outputs mar 2016 url https github com bitcoin bips blob master bip 0173 mediawiki bech32 page 24 24 zenprotocol com zen x0c",
    "metadata": {
      "chunk_id": "2367b21a0f8cd5104396d258e83ca342",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Zen Protocol.txt"
    }
  }
]