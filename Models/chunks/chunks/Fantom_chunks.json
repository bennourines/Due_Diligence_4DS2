[
  {
    "text": "[Section 1] opera reasoning continuous common knowledge asynchronous distributed systems sang min choia jiho parka quan nguyena kiyoung jangb hyunjoon cheonb yo sub hanb byung ik ahna afantom lab fantom foundation bdepartment computer science yonsei university abstract paper introduces new family consensus protocols lachesis class denoted l distributed networks guaranteed byzantine fault tolerance lachesis protocol l l complete asynchrony lead erless round robin proof work eventual consensus core concept technology opera chain generated lachesis protocol general form node lachesis set k neighbours preference receiving transactions node creates shares event block neighbours event block signed hashes creating node k peers opera chain event blocks directed acyclic graph dag guarantees practical byzantine fault tolerance pbft framework presented lamport timestamps concurrent common knowledge present example lachesis consensus protocol l0 framework l0 protocol reach consensus 2 3 partici pants",
    "metadata": {
      "chunk_id": "e931cbeae1186fc4f51e57e199d8bd08",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 3] 2 1 lamport timestamps 9 2 2 concurrent common knowledge 10 2 3 consensus algorithms 11 2 4 dag based approaches 11 3 generic framework lachesis protocols 14 3 1 opera chain 14 3 2 main chain 14 3 3 lachesis consensus algorithm lca 16 3 4 node structure 16 3 5 event block creation 18 3 6 topological ordering events lamport timestamps 18 3 7 topological consensus ordering 19 3 8 peer selection algorithm 21 4 lachesis consensus protocol l0 21 4 1 root selection 22 4 2 clotho selection 23 4 3 atropos selection 24 4 4 peer selection algorithm cost function 27 5 discussions 31 5 1 lamport timestamps 31 5 2 semantics lachesis protocols 32 6 conclusion 33 6 1 future work 33 1 7 appendix 35 7 1 proof lachesis consensus algorithm 35 7 1 1 preliminaries 35 7 1 2 proof byzantine fault tolerance lachesis con sensus algorithm 35 7 2 response attacks 39 7 2 1 transaction flooding 39 7 2 2 parasite chain attack 39 7 2 3 double spending 39 7 2 4 long range attack 40 7 2 5 bribery attack 40 7 2 6",
    "metadata": {
      "chunk_id": "73b4a2910f21b32a354bb853250d38a0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 4] lachesis con sensus algorithm 35 7 2 response attacks 39 7 2 1 transaction flooding 39 7 2 2 parasite chain attack 39 7 2 3 double spending 39 7 2 4 long range attack 40 7 2 5 bribery attack 40 7 2 6 denial service 41 7 2 7 sybil 41 8 reference 42 2 1 introduction success cryptocurrencies blockchain recently emerged technology platform o ers secure decentralized consistent transac tion ledgers powered innovations domains including nancial systems supply chains health care despite high demand dis tributed ledger technology 26 commercialization opportunities obstructed long processing time consensus high power consump tion issues addressed consensus algorithms 4 9 23 24 distributed database systems address byzantine fault tolerance 13 participant nodes compro mised consensus algorithms ensures integrity transactions participants distributed network 13 equivalent proof byzantine fault tolerance distributed database systems 1 12 byzan tine consensus guaranteed deterministic completely",
    "metadata": {
      "chunk_id": "5320d7b4930ea5069bad02c757bb8ba8",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 5] integrity transactions participants distributed network 13 equivalent proof byzantine fault tolerance distributed database systems 1 12 byzan tine consensus guaranteed deterministic completely asynchronous system unbounded delays 8 achieving consensus feasible nondeterministic system probability approaches consensus distributed system original nakamoto consensus protocol bitcoin uses proof work pow requires large amounts computational work generate blocks participants 19 alternative schemes proof stake pos 25 14 proposed pos uses participants stakes generate blocks respectively approach utilizes directed acyclic graphs dag 16 23 24 21 17 facilitate consensus examples dag based consensus algorithms include tangle 22 byte ball 5 hashgraph 2 tangle selects blocks connect net work utilizing accumulated weight nonce monte carlo markov chain mcmc byteball generates main chain dag reaches con sensus index information chain hashgraph connects block node random node hashgraph searches 2 3",
    "metadata": {
      "chunk_id": "1d8ff43187843f17c8ea7b1302087390",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 6] accumulated weight nonce monte carlo markov chain mcmc byteball generates main chain dag reaches con sensus index information chain hashgraph connects block node random node hashgraph searches 2 3 members reach block provides proof byzantine fault tolerance graph search 1 1 motivation practical byzantine fault tolerance pbft allows nodes success fully reach agreement block information byzantine node exists 3 pbft consensus reached created block shared 3 participants share information shared 10 18 consensus achieved block added participants chains 3 6 currently takes o n4 pbft hashgraph 2 proposes gossip gossip virtual voting reach consensus limitations hashgraph algo rithm operates known network needs awareness author itative participants second gossip propagation slow latency increases o n n participants remains unclear virtual voting faster chain weight aka longest chain proof work concept issues gossip problems consensus problems interested new approach address aforementioned",
    "metadata": {
      "chunk_id": "4b2c43a90c6586622ad830f9b5b897a6",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 7] o n n participants remains unclear virtual voting faster chain weight aka longest chain proof work concept issues gossip problems consensus problems interested new approach address aforementioned issues pbft approaches 3 10 18 hashgraph 2 speci cally propose new consensus algorithm addresses following questions 1 reach local consensus k cluster faster k 2 gos sips faster broadcast based gossip subset 3 continuous common knowledge consensus decisions high probability 4 complex decisions reduced binary value consensus paper propose new approach quickly search byzantine nodes block dag particular introduce new class consensus protocols lachesis protocol denoted l core idea lachesis use new dag structure opera chain allows faster path search consensus propose example lachesis protocol class called lachesis protocol l0 1 2 generic framework l protocols introduce generic framework lachesis protocols called l ba sic idea lachesis protocol dag based asynchronous non deterministic protocol",
    "metadata": {
      "chunk_id": "df90b31d725b8f3befb323bc144973a5",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 8] called lachesis protocol l0 1 2 generic framework l protocols introduce generic framework lachesis protocols called l ba sic idea lachesis protocol dag based asynchronous non deterministic protocol guarantees pbft propose opera chain new dag structure faster consensus lachesis protocol generates block asyn chronously lachesis algorithm achieves consensus con rming nodes know blocks opera chain figure 1 shows example opera chain constructed lachesis protocol main concepts lachesis given follows event block nodes create event blocks time t structure event block includes signature generation time transaction history hash information references information referenced event blocks copied node rst event block node called leaf event 4 1 1 1 1 1 2 2 3 4 3 5 5 6 7 6 7 7 8 8 9 10 figure 1 example opera chain lachesis protocol lachesis protocol rule set communicate tween nodes node creates event blocks determines nodes choose nodes broadcast node selection ran dom cost function happened happened",
    "metadata": {
      "chunk_id": "47f067cb3485481c7a7b4280dca3a731",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 10] timestamps topological ordering lamport timestamps al gorithm uses happened relation determine partial order event block based logical clocks clotho clotho root satis es known 2n 3 nodes 2n 3 nodes know information known nodes clotho candidate atropos atropos atropos assigned consensus time lachesis con sensus algorithm utilized determining order event blocks atropos blocks form main chain allows time consensus ordering responses attacks reselection solve byzantine agreement problem node rese lects consensus time clotho based collected consensus time root set previous frame consensus time reaches byzantine agreement clotho con rmed atropos time consensus ordering opera chain opera chain local view dag held node local view identify topological ordering select clotho create time consensus atropos selection main chain main chain core subset opera chain comprised atropos event blocks opera chain uses main chain nd rapid ordering event blocks opera chain event block assigned proper",
    "metadata": {
      "chunk_id": "4f29864af2d71d91eda6de520c758ef0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 14] block determined 1 4 contributions summary paper makes following contributions propose new family l lachesis protocols introduce opera chain main chain faster consensus de ne topological ordering nodes event blocks opera chain lamport timestamps ordering intuitive reliable distributed system introduce ag table block improve root detection present proof dag based protocol implement concur rent common knowledge consistent cuts lachesis protocols allow faster node synchronization k neighbor broadcasts speci c lachesis protocol l0 introduced speci c algo rithms bene ts lachesis protocol l0 include 1 root selection algorithm ag table 2 algorithm build main chain 3 algorithm k peers selection cost function 4 faster consensus selection k peer broadcasts 5 data pruning root creation 8 rest paper organised follows section 2 gives overview blockchain related work existing dag based protocols section 3 describes new lachesis protocol section 4 presents lachesis consensus algorithm discussions",
    "metadata": {
      "chunk_id": "2e1fd959f9c6bb2eb243ce6ca19fb647",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 19] runs send message j j channel second reception message m run sending m run implies network introduce spurious messages alter messages cck model asynchronous system mention time events ordered based lamport s happens relation use lamport s theory describe global states asynchronous system global state run n vector pre xes local histories pre x process happens relation de ne con sistent global state termed consistent cut follows de nition 2 1 consistent cut consistent cut run global state exi ey j ey j global state exi global state message chain asynchronous run sequence messages m1 m2 m3 receive mi send mi 1 consequently send m1 receive m1 send m2 receive m2 send m3 2 3 consensus algorithms consensus algorithm participant nodes distributed network share transactions agree integrity shared transactions 13 equivalent proof byzantine fault tolerance distributed database systems 1 12 practical byzantine fault tolerance pbft allows nodes successfully reach agreement block byzantine node",
    "metadata": {
      "chunk_id": "3af8914e4ddaee2b1753d6c6dbf13f47",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 20] transactions 13 equivalent proof byzantine fault tolerance distributed database systems 1 12 practical byzantine fault tolerance pbft allows nodes successfully reach agreement block byzantine node exists 3 numerous consensus algorithms proposed 4 9 proof work pow requires large amounts computational work generate blocks 19 proof stake pos 25 14 use participants stakes delegated participants stake generate blocks respectively alternative schemes proposed improve algorithms directed acyclic graphs dag 16 dag based approaches utilize graph structures de cide consensus blocks connections considered vertexes edges respectively 2 4 dag based approaches iota 22 published dag based technology called tangle tips concept address scalability issues limitations 11 internet things nonce weight level composed achieve transaction consensus setting user s di culty solve double spending problem parasite attack markov chain monte carlo mcmc tip selection algorithm randomly selects tips based size",
    "metadata": {
      "chunk_id": "edb053063cc10ce926dcbf87173bf064",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 21] composed achieve transaction consensus setting user s di culty solve double spending problem parasite attack markov chain monte carlo mcmc tip selection algorithm randomly selects tips based size accumulated transaction weights transaction con icts need examine past transaction history nd con ict byteball 5 uses internal pay system called bytes pay adding data distributed database storage unit linked includes hashes earlier storage units particular consensus ordering composed selecting single main chain determined root consisting roots majority roots detects double spend attempts consensus time main chain fee charged according size bytes list units searched updated process determining roots raiblocks 15 developed improve high fees slow trans action processing process obtaining consensus balance weighted vote con icting transactions node participating network principal manages data history locally raiblocks generate transactions similar way anti spam tool pow nodes communicate create",
    "metadata": {
      "chunk_id": "e22ea8c3d06a78bb15a77881deb7328e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 22] balance weighted vote con icting transactions node participating network principal manages data history locally raiblocks generate transactions similar way anti spam tool pow nodes communicate create transactions terms scalability need steps verify entire history transactions new node added hashgraph 2 asynchronous dag based distributed ledger node connected ancestor randomly communicates known events gossip protocol time famous node determined strong relationship round reach consensus quickly state 2 3 nodes reach consensus event assigned consensus position con ux 17 dag based nakamoto consensus protocol con ux fast scalable decentralized block chain system optimistically pro cesses concurrent blocks discarding forks con ux pro tocol achieves consensus total order blocks total order transactions decided participants network con ux toler ate half network malicious bft based approaches tolerate malicious nodes parsec 21 proposes algorithm reaching consensus presence 12 byzantine faults",
    "metadata": {
      "chunk_id": "1952b8f938092647c874fbea31b97b3f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 23] decided participants network con ux toler ate half network malicious bft based approaches tolerate malicious nodes parsec 21 proposes algorithm reaching consensus presence 12 byzantine faults randomly synchronous network like hashgraph 2 leaders round robin proof work reaches eventual con sensus probability unlike hashgraph provide high speed presence faults parsec algorithm reaches bft consensus weak synchrony assumptions messages delivered random de lays average delay nite allows byzantine arbitrary failures phantom 24 pow based protocol permissionless ledger generalizes nakamoto s blockchain dag blocks phantom includes parameter k adjust tolerance level protocol blocks created concurrently set accommodate higher throughput avoids security scalability tradeo satoshi s protocol phan tom uses greedy algorithm dag distinguish blocks honest nodes non cooperating nodes distinction gives phantom robust total order blocks eventually agreed honest nodes similar phantom ghostdag protocol",
    "metadata": {
      "chunk_id": "9d3ae84c453abe221f0d791eb83052ba",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 24] uses greedy algorithm dag distinguish blocks honest nodes non cooperating nodes distinction gives phantom robust total order blocks eventually agreed honest nodes similar phantom ghostdag protocol selects k cluster induces colouring blocks blues blocks selected clus ter reds blocks outside cluster instead searching largest k cluster ghostdag nds cluster greedy algorithm spectre 23 new protocol consensus core cryptocurrencies spectre pow based protocol relies data structure gen eralizes nakamoto s blockchain dag remains secure attackers 50% computational power high throughput fast con rmation times sprectre protocol satis es weaker properties classic consensus requires spectre order trans actions decided transactions performed honest users di erent conventional paradigm order decided non corrupt nodes blockmania 6 mechanism achieve consensus advan tages traditional pbft protocol variants blockma nia nodes quorum emit blocks linking blocks irrespective consensus state machine resulting",
    "metadata": {
      "chunk_id": "bab85c09eb1d8a21cb11417d8bca0a33",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 26] event blocks including user information edges event blocks lachesis protocol event blocks created node node communicates information opera chain node opera chain comprised event blocks vertices block communication edges let n number participant nodes consensus algorithm examines event block shared 2n 3 nodes n number nodes sharing event block 2n 3 nodes means thirds nodes opera chain knows event block 3 2 main chain faster consensus introduce main chain special sub graph opera chain improve path search propose use local hash table structure cache quickly determine closest root event block opera chain event block called root event block linked thirds previous roots leaf vertex root root event blocks track vital blocks 2n 3 network agree main chain core subgraph opera chain plays important role ordering event blocks main chain stores shortcuts connect atropos topological ordering computed event blocks lachesis protocol atropos blocks determined form main chain figure 3 shows example",
    "metadata": {
      "chunk_id": "609e98d737d456cdf639f4fda5da2e36",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 27] role ordering event blocks main chain stores shortcuts connect atropos topological ordering computed event blocks lachesis protocol atropos blocks determined form main chain figure 3 shows example main chain composed atropos event blocks particular main chain consists atropos blocks derived root blocks agreed 2n 3 14 network nodes guarantees 2n 3 nodes come consensus main chain participant node copy main chain search con sensus position event blocks event block compute consensus position checking nearest atropos event block assign ing searching consensus position introduced consensus time selection section main chain provides quick access previous transaction history e ciently process new coming event blocks main chain informa tion unknown participants attackers easily viewed main chain e ciently transaction information management pro viding quick access new event blocks agreed majority nodes short main chain gives following advantages event blocks nodes need store information e cient",
    "metadata": {
      "chunk_id": "95109d03444110617b7473840c8a220f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 28] ciently transaction information management pro viding quick access new event blocks agreed majority nodes short main chain gives following advantages event blocks nodes need store information e cient data management access previous information e cient fast based advantages opera chain respond strongly e cient transaction treatment attacks main chain r r r r r r r r r r figure 3 example main chain 15 3 3 lachesis consensus algorithm lca lachesis algorithm lca presented lca consen sus algorithms solving byzantine agreement problem lca opera chain uses root clotho atropos blocks nd consensus time event blocks algorithm 1 shows pseudo algorithm opera chain algorithm consists parts runs parallel node requests synchronization creates event block line 3 node runs node selection algorithm node selection algorithm returns k ids nodes communicate line 4 5 node synchronizes opera chain nodes line 6 runs event block creation step node creates event block checks root node broadcasts created event",
    "metadata": {
      "chunk_id": "f7784be945054f68fc4bb06e30490d61",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 29] algorithm returns k ids nodes communicate line 4 5 node synchronizes opera chain nodes line 6 runs event block creation step node creates event block checks root node broadcasts created event block nodes line 7 step line optional line 8 9 clotho selection atropos time consensus algorithms invoked algorithms determinte speci ed root clotho assign consensus time con rm atropos second respond synchronization requests line 10 11 node receives synchronization request sends response opera chain algorithm 1 main procedure 1 procedure main procedure 2 loop 3 b k node selection algorithm 4 request sync node b 5 sync known events lachesis protocol 6 event block creation 7 optional broadcast message 8 root selection 9 clotho selection 10 atropos time consensus 11 loop 12 request sync node 13 sync known events lachesis protocol 3 4 node structure section gives overview node structure lachesis 16 node signature stamp height vector degree vector ag table root hash list main chain signature stamp",
    "metadata": {
      "chunk_id": "6bba7b9b3edb07c9c2e0df7ca2952c41",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 30] known events lachesis protocol 3 4 node structure section gives overview node structure lachesis 16 node signature stamp height vector degree vector ag table root hash list main chain signature stamp data structure storing hash value indicates recently created event block node recently created event block event block ag table n dimensional vector event block e created ith node reach jth root jth value ag table e 1 0 node maintains ag table event block node signature stamp height vector degree vector 1 2 n $ 1 2 n $ 2 root hash list 3 main chain hash list atropos 3 opera chain figure 4 example node structure figure 4 shows example node structure component node gure signaturea stores hash value event block value height vector number event blocks created nodes respectively value hi number event blocks created ith node value degree vector number edges event blocks created nodes event block 17 root hash list data structure storing hash values root main chain data structure storing hash",
    "metadata": {
      "chunk_id": "796109ba905621ef4e7af34b6a6b9627",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 31] event blocks created ith node value degree vector number edges event blocks created nodes event block 17 root hash list data structure storing hash values root main chain data structure storing hash values atropos blocks main chain nd event blocks complete consensus root clotho atropos selection algorithm introduced section 4 3 5 event block creation lachesis protocol node create event block event block refers event blocks reference means event block stores hash values event blocks lachesis protocol event block refers k neighbor event blocks conditions follows 1 reference event blocks event blocks 2 reference self parent 3 event block refers k neighbor nodes 3 6 topological ordering events lamport timestamps node physical clock needs physical time create event block consensus lachesis protocols relies logical clock node purpose use lamport timestamps 11 determine time ordering event blocks asynchronous dis tributed system lamport timestamps algorithm follows 1 node increments count",
    "metadata": {
      "chunk_id": "2f81712241ee60c058d74c60f59c09d5",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 33] 1 1 1 1 2 2 3 4 3 5 5 6 7 8 7 6 7 8 9 9 10 10 10 figure 5 example lamport timestamps 3 7 topological consensus ordering sequential order event block important aspect byzan tine fault tolerance order determine pre post sequence event blocks use atropos consensus time lamport timestamp algo rithm hash value event block node creates event blocks logical times tamp based lamport timestamp means partial ordering relevant event blocks clotho consensus time atropos consensus time computed based logical time nominated nodes time 2n 3 agreement lca event block based following rules reach agreement 1 atropos di erent times frame event block smaller consensus time higher priority 2 atropos having consensus time frame determine order based logical time lamport timestamp 19 1 1 1 1 1 3 3 5 5 4 2 2 1 consensus time 3 3 prior ordering 2 consensus time lamport time prior ordering 3 consensus time lamport time prior ordering hash value consensus time 3 1 consensus time 1 lamport time 1 2 consensus",
    "metadata": {
      "chunk_id": "55ab6443b52e564471db68e06da54343",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 36] create event blocks event block root satisfying speci c conditions event blocks roots rst created event blocks roots leaf event blocks form rst root set rs1 total n nodes nodes create event blocks cardinality rst root set jrs1j n second event block e reach 2n 3 roots e called root event e belong rs1 root set rs2 excluding rst root set range cardinality root set rsk 2n 3 jrskj n event blocks including rsk rsk 1 frame fk roots rsk 1 belong frame fk included frame fk 1 root belonging rsk 2 occurs introduce use ag table quickly determine new event block root node maintains ag table event block event block newly created assigned k hashes k parent event blocks apply operation ag tables parent event blocks figure 8 shows example use ag tables determine root example r1 recently created event block apply operation ag tables r1 s k parent event blocks result ag table r1 r1 s ag table 2n 3 set bits r1 root example number set bits 4 greater 2n 3 n 5 r1 root root selection algorithm follows 1 rst",
    "metadata": {
      "chunk_id": "b5aee392552ff9362992c8e1af3e5f9e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 37] apply operation ag tables r1 s k parent event blocks result ag table r1 r1 s ag table 2n 3 set bits r1 root example number set bits 4 greater 2n 3 n 5 r1 root root selection algorithm follows 1 rst event blocks considered root 2 new event block added opera chain check event block root applying operation ag tables connected new event block sum ag table new event block 2n 3 new event block root 3 new root appears opera chain nodes update root hash list new event blocks root nodes share new event block add hash value event block root hash list 4 new root set created cardinality previous root set rsp 2n 3 new event block reach 2n 3 root rsp 22 r0 r0 r0 r0 r0 r1 flag table information 1 1 1 0 0 flag table information 0 1 1 1 0 flag table information flag table information 1 1 1 1 0 0 0 0 1 0 r0 r0 r0 r0 r0 1 2 3 1 2 3 root set rs r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 figure 8 example flag table calculation 5 new root set rsk 1 created event blocks previous root set rsk rsk 1 belong",
    "metadata": {
      "chunk_id": "c882b65aca1c5a3b03147008d7f05165",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 38] r0 r0 r0 r0 1 2 3 1 2 3 root set rs r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 r0 figure 8 example flag table calculation 5 new root set rsk 1 created event blocks previous root set rsk rsk 1 belong frame fk 4 2 clotho selection clotho root satis es clotho creation conditions clotho creation conditions 2n 3 nodes know root root knows information figure 9 shows example clotho circles label ri c represents root clotho event block sets root exists root recent clotho set roots rst root set clotho clotho selection algorithm checks root event blocks root hash list satisfy clotho condition root satis es clotho condition root clotho makes candidate time atropos root concluded clotho atropos consensus time selection algorithm triggered root r denote frame r root r th frame example frame 1 r rst root belong frame f1 23 f1 f2 c r0 r0 f3 f4 r0 r0 r1 r1 r1 r1 r1 r2 r2 r2 r3 r3 r2 r3 r2 r3 figure 9 example clotho algorithm 2 shows pseudo code clotho selection algorithm takes root r input line 4 5",
    "metadata": {
      "chunk_id": "41fec5d827c2160a969a39fa9acc687d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 40] didate time clotho opera chain grows candidate time reaching consensus called atropos consensus time atropos consensus 24 algorithm 2 clotho selection 1 procedure clotho selection 2 input root r 3 c 2 frame 3 r 4 c clotho nil 5 c yes 0 6 c0 2 frame 2 r 7 c0 share c 8 c yes c yes 1 9 c yes 2n 3 10 c clotho yes time computed clotho nominated atropos node stores hash value atropos atropos consensus time main chain main chain time order event blocks proof atropos consensus time selection shown section 7 1 25 algorithm 3 atropos consensus time selection 1 procedure atropos consensus time selection 2 input c clotho frame fi 3 c consensus time nil 4 m index frame fm 5 d 3 m 6 r root set rsi d frame fi d 7 r 2 r 8 d 3 9 r con rms c clotho 10 r time c r lamport time 11 d 3 12 s set root fj 1 r share 13 t reselection s c 14 k number root having t s 15 d mod h 0 16 k 2n 3 17 c consensus time t 18 r time c t 19 20 r time c t 21 22 r time c minimum value s algorithm 3 4 pseudo code atropos",
    "metadata": {
      "chunk_id": "6436faaad6a1517a21930880970ed136",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 42] minimum selection frame minimum selection frame minimum value candidate time selected reach byzantine agreement algorithm 4 operates middle algorithm 3 algorithm 4 input root set r output reselected candidate time line 4 5 computes frequencies candidate time roots r line 6 11 candidate time smallest time nomitated time complexity algorithm 4 o n n number nodes algorithm 3 includes algorithm 4 time complexity algorithm 3 o n2 n number nodes algorithm 4 consensus time reselection 1 function reselection 2 input root set r clotho c 3 output candidate time t 4 set ti r time c r r 5 d set tuples ti ci computed ci count ti 6 max count max ci 7 t infinite 8 tuple ti ci 2 d 9 max count ci ti t 10 t ti 11 return t atropos consensus time selection algorithm nodes reach con sensus agreement candidate time clotho additional com munication e exchanging candidate time node communicates lachesis protocol opera chain nodes grows shape allows node know candidate time nodes based opera chain reach",
    "metadata": {
      "chunk_id": "57c3ba50111321e2617d00fcbfc91159",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 43] time clotho additional com munication e exchanging candidate time node communicates lachesis protocol opera chain nodes grows shape allows node know candidate time nodes based opera chain reach consensus agreement proof agreement based opera chain agreement action shown section 7 1 4 4 peer selection algorithm cost function de ne versions cost function cf version focused updated information share discussed versions focused root creation consensus facilitation discussed following paper 27 leaf events b c d e node signature stamp height vector degree vector b c d e 1 1 1 1 1 $% b c d e 0 0 0 0 0 cost function 0 2 leaf events b c d e node signature stamp height vector degree vector b c d e 1 1 1 1 1 $% b c d e 0 0 0 0 0 cost function 0 2 34 b 0 34 c 0 34 d 0 34 e 0 step 1 step 2 figure 10 example cost function 1 de ne cost function cf preventing creation lazy nodes lazy node node lower work portion opera chain node creates event block node selects nodes low values outputs cost function",
    "metadata": {
      "chunk_id": "0efa6e8fbf0a54274c1abc5fcc6aeea6",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 53] work number directions future work lachesis protocols investigating fast node synchro nization algorithm k neighbor broadcasts opera chain k peer selection possible achieve faster gossip broadcast 33 interested comparing performance di erent gossip strate gies randomized gossip broadcast gossip collection tree protocol distributed averaging wireless sensor networks investigating semantics dag based protocols gen eral lachesis protocols particular aim formal proof pbft concurrent common knowledge consistent cuts 34 7 appendix 7 1 proof lachesis consensus algorithm section provide proof liveness safety opera chain byzantine fault tolerance represent byzantine fault tolerance assume thirds participants reliable nodes based assumption provide de nitions lemmas theorems eventually validate byzantine fault tolerance 7 1 1 preliminaries let g v e denote directed acyclic graph dag v set vertices e set edges dag directed graph cycle dag path source destination vertex path sequence p vertices",
    "metadata": {
      "chunk_id": "df05497688f96e1ca283b080fa899746",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 60] nodes e g parasite chain second condition satis ed 2n 3 roots frame fi 1 created changed event block validated new event blocks participate earlier consensus time opera chain 38 7 2 response attacks like decentralized blockchain technologies opera chain likely subject attacks attackers aim gain nancial pro t damage system describe possible attack scenarios opera chain intends preventive measures 7 2 1 transaction flooding malicious participant run large number valid transactions account control purpose overloading network order prevent case chain intends impose minimal transaction fee transaction fee malicious user continue perform attacks participants participate nodes rewarded contribute ecosystem running transactions continuously rewarded rewards expected adequate running transactions appropriate purposes require tremendous cost perform abnormal attacks di cult malicious attacker create transaction ooding 7 2 2 parasite chain attack dag based protocol parasite chain malicious",
    "metadata": {
      "chunk_id": "49721fa68e864673859d01e2b565ab71",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 61] appropriate purposes require tremendous cost perform abnormal attacks di cult malicious attacker create transaction ooding 7 2 2 parasite chain attack dag based protocol parasite chain malicious purpose attempting connection making look like legitimate event block main chain created veri cation event block performed veri cation process event block connected main chain deemed invalid ignored case double spending suppose nodes malicious malicious nodes create parasite chain root de nition roots nominated 2n 3 node awareness parasite chain shared malicious nodes participating nodes parasite chain unable generate roots shared consensus time 7 2 3 double spending double spend attack malicious entity attempts spend funds twice entity 10 tokens send 10 tokens b node na 10 tokens c node nz node na node nz agree transaction valid funds send b according na c according nz 39 consensus mechanism multiple distributed parties reach agreement order state sequence events let s consider following 3",
    "metadata": {
      "chunk_id": "8a9501c1d667e91c7ce82631bbad3abf",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 62] na node nz agree transaction valid funds send b according na c according nz 39 consensus mechanism multiple distributed parties reach agreement order state sequence events let s consider following 3 transactions txa starting balance 10 transfers 10 b txb b starting balance 0 transfers 10 c txc c starting balance 0 transfers 10 d consider node na received order txa txb txc state node na 0 b 0 c 0 d 10 consider node nb receives order txc txb txa state node nb 0 b 10 c 0 d 0 consensus ordering gives sequence events pair event blocks x y double spending transaction chain structurally detect double spend delay action event blocks event blocks assign time ordering suppose pair event blocks x y frame f1 nodes detect event blocks frame f 2 root de nition root happened 2n 3 previous roots reason roots f 1 selected happened roots thirds roots f means 2n 3 roots f 1 share roots include pair respectively root de nition previous explanation roots f 2 share pairs nodes detect double spending event",
    "metadata": {
      "chunk_id": "365c5d2f270023f20200b363d8805bdf",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 63] f 1 selected happened roots thirds roots f means 2n 3 roots f 1 share roots include pair respectively root de nition previous explanation roots f 2 share pairs nodes detect double spending event blocks f 2 earlier 7 2 4 long range attack blockchains adversary create chain chain longer original network accept longer chain mech anism exists identify chain work stake involved creation 2n 3 participating nodes required create new chain accom plish long range attack rst need create 2n 3 participating malicious nodes create new chain 7 2 5 bribery attack adversary bribe nodes validate con icting transactions 2n 3 participating nodes required require adversary bribe 1n 3 nodes begin bribery attack 40 7 2 6 denial service lca leaderless system requiring 2n 3 participation adversary deny 1n 3 participants able successfully mount ddos attack 7 2 7 sybil participating node stake minimum ftm par ticipate network able stake 2n 3 total stake pro hibitively expensive 41 8 reference 1 j aspnes",
    "metadata": {
      "chunk_id": "5ff866090cb3cbd545df3d8275ac44da",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 64] 3 participants able successfully mount ddos attack 7 2 7 sybil participating node stake minimum ftm par ticipate network able stake 2n 3 total stake pro hibitively expensive 41 8 reference 1 j aspnes randomized protocols asynchronous consensus dis tributed computing 16 2 3 165 175 2003 2 l baird hashgraph consensus fair fast byzantine fault tolerance technical report 2016 3 m castro b liskov practical byzantine fault tolerance proceed ings symposium operating systems design imple mentation osdi 99 pages 173 186 berkeley usa 1999 usenix association 4 j chen s micali algorand arxiv preprint arxiv 1607 01341 2016 5 churyumov byteball decentralized system storage trans fer value 2016 6 g danezis d hrycyszyn blockmania block dags consen sus 2018 7 m j fischer n lynch m paterson impossibility distributed consensus faulty process j acm 32 2 374 382 1985 8 m j fischer n lynch m s paterson impossibility distributed consensus faulty process journal acm jacm 32 2 374 382 1985 9 y gilad r hemo s",
    "metadata": {
      "chunk_id": "4bcffaf2751fbffa6e6bc5ec117f9b5f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 65] consensus faulty process j acm 32 2 374 382 1985 8 m j fischer n lynch m s paterson impossibility distributed consensus faulty process journal acm jacm 32 2 374 382 1985 9 y gilad r hemo s micali g vlachos n zeldovich algorand scaling byzantine agreements cryptocurrencies proceedings 26th symposium operating systems principles pages 51 68 acm 2017 10 r kotla l alvisi m dahlin clement e wong zyzzyva speculative byzantine fault tolerance acm sigops operating systems review 41 6 45 58 2007 11 l lamport time clocks ordering events distributed system communications acm 21 7 558 565 1978 42 12 l lamport et al paxos simple acm sigact news 32 4 18 25 2001 13 l lamport r shostak m pease byzantine generals problem acm trans program lang syst 4 3 382 401 july 1982 14 d larimer delegated proof stake dpos 2014 15 c lemahieu raiblocks feeless distributed cryptocurrency network 2017 16 s d lerner dagcoin 2015 17 c li p li w xu f long c c yao scaling nakamoto consensus thousands transactions second",
    "metadata": {
      "chunk_id": "7c20734d5990c93e37155a6a1cae20bf",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 66] dpos 2014 15 c lemahieu raiblocks feeless distributed cryptocurrency network 2017 16 s d lerner dagcoin 2015 17 c li p li w xu f long c c yao scaling nakamoto consensus thousands transactions second arxiv preprint arxiv 1805 03870 2018 18 miller y xia k croman e shi d song honey badger bft protocols proceedings 2016 acm sigsac conference computer communications security pages 31 42 acm 2016 19 s nakamoto bitcoin peer peer electronic cash system 2008 20 p panangaden k taylor concurrent common knowledge de ning agreement asynchronous systems distributed computing 6 2 73 93 1992 21 f h q m s s pierre chevalier bartomiej kamin ski protocol asynchronous reliable secure e cient consensus parsec 2018 22 s popov tangle 2017 23 y sompolinsky y lewenberg zohar spectre fast scalable cryptocurrency protocol iacr cryptology eprint archive 2016 1159 2016 24 y sompolinsky zohar phantom ghostdag scalable blockdag protocols 2008 25 s n sunny king ppcoin peer peer crypto currency proof stake 2012 26 m",
    "metadata": {
      "chunk_id": "9ac94c40f8fd4a378272733614376cdf",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  },
  {
    "text": "[Section 67] iacr cryptology eprint archive 2016 1159 2016 24 y sompolinsky zohar phantom ghostdag scalable blockdag protocols 2008 25 s n sunny king ppcoin peer peer crypto currency proof stake 2012 26 m swan blockchain blueprint new economy o reilly media 2015 43",
    "metadata": {
      "chunk_id": "655d29e8e9b773d667e0041fb995dc97",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Fantom.txt"
    }
  }
]