[
  {
    "text": "[Section 1] b heuristically enhanced asynchronous transactions white paper v1 01 d m de klerk svante lehtinen heat ledger ltd 2016 08 02 x0ctable contents 1 introduction 2 unlimited scalability 2 1 removal embedded database 2 2 use heap memory 2 3 split balances transactions blocks 2 4 chain blockchains 3 slicing blockchain 3 1 general description 3 2 heat token distribution genesis block 3 3 details slicing 3 4 added security pos consensus 3 5 validating recent blocks segment 4 networking improvements 5 real time external replication 5 1 replication layer 5 2 extending message protocol 6 real time asset asset exchange 6 1 bringing decentralized asset exchange web scale 6 2 colored accounts private assets 6 3 custom asset exchange a2ae 6 4 crowfunding fiat trading gateways 7 distributed services architecture 7 1 dsa 7 2 services smart contracts 7 3 writing distributed services 7 4 service example 7 5 type services expect 7 6 service operator xe2 x80 x99s privileges liabilities 7 7 ability chain",
    "metadata": {
      "chunk_id": "789dfe1d8cb0d698f4910b3fd6df917c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 2] 7 1 dsa 7 2 services smart contracts 7 3 writing distributed services 7 4 service example 7 5 type services expect 7 6 service operator xe2 x80 x99s privileges liabilities 7 7 ability chain services 8 smart offline vouchers 9 e2ee chain messaging 10 account structure aliases 10 1 heat account identifiers 10 2 aliases 10 3 balance pruning temporary accounts 10 4 minimum forger balance 2 32 x0c11 account control multi sig 11 1 protecting stake 11 2 limit transferred day 11 3 multi sig accounts 12 heat rewards mechanism 12 1 tier rewards 12 2 reward block generators pos model 12 3 reward blockchain storage pop model 12 4 segment gets reward 13 pop challenges 13 1 fair fair 13 2 challenger account 13 4 challenge generation 13 5 actual challenge 14 conclusion 15 white paper version history 3 32 x0cintroduction heat ledger self appointed xe2 x80 x9cgen 3 0 xe2 x80 x9d cryptocurrency platform focusing resolving pressing pitfalls existing 2 0 1 0 cryptocurrency server software solutions low",
    "metadata": {
      "chunk_id": "672952cead6638748c49450369996c6a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 3] 32 x0cintroduction heat ledger self appointed xe2 x80 x9cgen 3 0 xe2 x80 x9d cryptocurrency platform focusing resolving pressing pitfalls existing 2 0 1 0 cryptocurrency server software solutions low transaction rate throughput burden hosting large blockchain files single p2p node like heat software document work progress amended expanded project evolves v1 0 designed deliver reasonably complete quasi technical treatise basic elements initial heat system available time genesis block september 2016 heat inspired open source nxt1 uses time proven proof stake consensus algorithm tuned 25 second blocks2 feature wise parts heat service offering middleware solutions based originally developed fimk 3 parts heat core fully rewritten java making optimally suited custom financial business applications providing microsecond latency 15 30 million writes second vastly increased vertical scalability superior failover resiliency compared legacy datasystems heat general technical highlights xe2 x97",
    "metadata": {
      "chunk_id": "12a5015ecfe8365d19b33b87e497a338",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 4] providing microsecond latency 15 30 million writes second vastly increased vertical scalability superior failover resiliency compared legacy datasystems heat general technical highlights xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f xe2 x97 x8f written enterprise friendly java based secure mit licensed nxt cryptography p2p consensus code architected use private chains mind optimized speed low memory usage massively scalable use single blockchain chain blockchains chain required node application level contains latest 2 0 cryptocurrency features including custom asset asset trading distributed apps end end encrypted instant messaging heat cryptocurrency employs radically new approaches way cryptocurrencies built notable complete removal embedded database major core change consists changes mechanism network layer works storing consensus blockchain heat use single blockchain file increasing size instead heat makes use serialized blockchain files limited size accompanied",
    "metadata": {
      "chunk_id": "8009c40cb548294029db3334a99e2fc9",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 5] consists changes mechanism network layer works storing consensus blockchain heat use single blockchain file increasing size instead heat makes use serialized blockchain files limited size accompanied small balance files latest blockchain file reaches threshold size gb specified genesis block protocol automatically switch new blocks file cryptographically linked previous blocks balance files details achieve principle similar blocks chained 1 https nxt org average block target 3 http fimk fi 2 4 32 x0cthrough radical changes storage layer networking layer estimate possible sustain 1000 transactions second load 24 7 year round theoretical constant rate 1000 tps produce 6 3 tb worth archivable blocks files year roughly 3 new block files day commodity affordable hardware need arise process higher numbers eventually approaching visanet max level 56 000 tps4 thanks vertical scalability heat xe2 x80 x99s needed support kind boost rates stronger servers processing cores ram onboard unlimited",
    "metadata": {
      "chunk_id": "f0bef1ae0f776e869ab2accfa351d4b8",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 6] numbers eventually approaching visanet max level 56 000 tps4 thanks vertical scalability heat xe2 x80 x99s needed support kind boost rates stronger servers processing cores ram onboard unlimited scalability heard issue scalability popular blockchains face difficulty handling increasing number transactions blockchain puts growing pressure resources node network current generation blockchains eg bitcoin 5 ethereum6 dash7 nxt8 embedded database store blocks data balances embedded databases user ability ask running coin daemon block transaction past lack better solution sure helps users fact help core p2p operations instead comes brobdingnagian cost especially blockchains skip usage performant leveldb 9 opt featureful slower h210 sql database leveldb limitations store leveldb requires hard disk practically maximum size low 100 gb stated core p2p process use past blocks transactions access required constant basis access recent 720 blocks needed removing transactions rare case blockchain",
    "metadata": {
      "chunk_id": "aad9352e1100dc68b5a3356748c2e5e2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 7] disk practically maximum size low 100 gb stated core p2p process use past blocks transactions access required constant basis access recent 720 blocks needed removing transactions rare case blockchain fork resolution removal embedded database embedding leveldb h2 store transactions blocks account balances order books asset pairs heat uses custom build storage access solution based memory mapped files tailored specifically address needs cryptocurrency node 4 https usa visa com dam vcom download corporate media visa fact sheet jun2015 pdf https github com bitcoin bitcoin 6 https github com ethereum ethereum 7 https github com dashpay dash 8 https bitbucket org jeanlucpicard nxt src 9 http leveldb org 10 http www h2database com html main html 5 32 5 x0cin computing mmap 2 posix compliant unix system maps files devices memory method memory mapped file o naturally implements demand paging file contents read disk initially use physical ram actual reads disk performed lazy manner specific",
    "metadata": {
      "chunk_id": "357298ac3b66f3ed0016e9932a83b15d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 9] lightning speeds needs hft systems blockchains systems overlap search lead chronicle software14 specifically lgpl licenced product chronicle map 15 chronicle map queue properties 1 2 3 4 5 6 7 8 9 high throughput low latency cross process persisted key value store heap data storage microsecond latency designed java pauseless garbage free manner better utilizes existing hardware offering vertical scalability concurrent writes machine single copy memory resilient writes process dies write lost entirely embedded need additional processes 30 million updates second 500 million key values 16 core machine 64 mb heap minor collections data lost jvm crashes line important application startup process needed scan transactions blockchain rebuild validate running balances loading multi giga byte block file memory mapped file problem takes second 11 https en wikipedia org wiki mmap http wiki supernet org wiki ramchains 13 https en wikipedia org wiki high frequency trading 14 http chronicle software",
    "metadata": {
      "chunk_id": "f6fee3fd38dc406da3f89a0aef31595d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 10] file memory mapped file problem takes second 11 https en wikipedia org wiki mmap http wiki supernet org wiki ramchains 13 https en wikipedia org wiki high frequency trading 14 http chronicle software 15 https github com openhft chronicle map 6 32 12 x0csubsequently scanning transactions extremely fast heap memory scanning process exclusively eliminating need garbage collector run regular startups heat need scan transactions near instant loaded balance files require space block files split balance storage transactions blocks cryptocurrency decentralized ledger architecture list transactions genesis block reading transactions allows build balances account storage needed balances need store actual transactions example let s imagine 100 000 individual accounts total 100 000 000 transactions accounts transactions total size bytes total size 100 000 20 key 8 val 12 2 mb 100 000 000 200 20 gb seen total storage needed store balances 100 000 accounts 2 mb translate account 3 billion 16 users",
    "metadata": {
      "chunk_id": "f7a51609103bc26745649c46f9831ebc",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 11] transactions total size bytes total size 100 000 20 key 8 val 12 2 mb 100 000 000 200 20 gb seen total storage needed store balances 100 000 accounts 2 mb translate account 3 billion 16 users internet ll end balance file 60 gb heat produces distinct files loaded memory mapped files serving homogenous data type files unconfirmed balances confirmed balances unconfirmed confirmed asset balances open buy sell orders files comes accompanying recovery file holds transactional data grouped update recovery files serve dual purpose use rollback transaction grouped set updates use recover startup app process crashed stopped reason system crash power outage chain blockchains implemented heat main net successfully released heat instead single blockchain segmented parts blockchain segments numbered limit number segments balances distributed separately blocks transactions blockchain segment balance files smaller blockchain files balance files accompany segment file need scan segment balance file",
    "metadata": {
      "chunk_id": "0d07d352cdbe4e8615edc55335541118",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "outage"
        ]
      },
      "risk_score": 9.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 12] limit number segments balances distributed separately blocks transactions blockchain segment balance files smaller blockchain files balance files accompany segment file need scan segment balance file starting point final balance segment contained balance file cryptographic checksum expected post scan balance match match segment invalid 16 http www statista com statistics 273018 number internet users worldwide 7 32 x0clet xe2 x80 x99s example new heat user bob bob downloads heat client server package comes initial balance file bob downloads balance files segments 2 mb segment finally bob downloads recently sealed segment bob verify balance files downloaded link way original genesis segment balance file comes sha256 hash previous balance file plus 265 bit checksum balances previous balance file bob downloads balance files 1 10 000 size blocks heat software verify balance files way downloaded segment bob xe2 x80 x99s heat server software applies transactions gets starting balance start",
    "metadata": {
      "chunk_id": "87eca38f21ebe70567e7abd1c7f16cf9",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 13] file bob downloads balance files 1 10 000 size blocks heat software verify balance files way downloaded segment bob xe2 x80 x99s heat server software applies transactions gets starting balance start downloading transactions network block height counter tracked separately keeps increasing normally new blockchain segment started slicing blockchain general description note parts development discussion rule changes details implementation plan heat launched blockchain slicing operational great urgency block split main net fact arise mass stored data small right release importantly unlike cryptocurrencies driven database storage heat significantly slower time growing pile archival transactions blocks transactions stored heat way imposes small computational memory wise cost resources heat capable supporting block segment huge size bitcoin nxt instance blockchain gigabytes 1 terabyte require extremely powerful servers heat needs disk space relatively fast disks ssd modest ram servers 2 4 gb",
    "metadata": {
      "chunk_id": "01e63be379787e4f5c3d8c3d345b0e54",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 14] supporting block segment huge size bitcoin nxt instance blockchain gigabytes 1 terabyte require extremely powerful servers heat needs disk space relatively fast disks ssd modest ram servers 2 4 gb ram work fine possible store blocks transactions disk scanning blocks transactions order literally means reading byte disk faster method exists non experimental computing date 8 32 x0call parts heat framework ready block segment splitting balance storages constructed ways support practical benefits allowing distributed archival small sliced block files proper implementation heat proof presence incentive mechanism demand eventual implementation sliced blockchain structure long launch heat main net heat token distribution genesis block july 11th august 8th 2016 heat initial public distribution xe2 x80 x9cinitial coin offering xe2 x80 x9d ico period founders reserve stake heat tokens founder gets share heat tokens based proportional price laddered heat ico credits pledged paying freely chosen",
    "metadata": {
      "chunk_id": "2f43f3fb637644395dc9fa1f5177d108",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 15] x80 x9cinitial coin offering xe2 x80 x9d ico period founders reserve stake heat tokens founder gets share heat tokens based proportional price laddered heat ico credits pledged paying freely chosen btc nxt fimk eth heat ledger ltd xe2 x80 x99s ico accounts 3rd party escrow agents ico distribute 25 million heat 30 million case reservation ico period heat ledger ltd arranges required facilities heatledger com web site stakeholders need authentication process consisting creation individual heat founder account heat tokens transferred immediately automated ownership verification original credit purchasing cryptocurrency account initial accounts imported special piece data file called genesis block practice genesis block inclusion looks like plain text file entries new line entry contains public key hex form balance displayed smallest unit heat hqt heat quotient heat server source code hardcoded sha256 hash validate genesis plain text file generate genesis block starts chain choice place",
    "metadata": {
      "chunk_id": "f514f737e1f65da12ad5a971629cc7ee",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 16] key hex form balance displayed smallest unit heat hqt heat quotient heat server source code hardcoded sha256 hash validate genesis plain text file generate genesis block starts chain choice place genesis accounts separate file instead hard coding source code save application memory easily switch different genesis block applications heat software corporate private blockchain products 9 32 x0cwhen genesis block place entry blocks segment file sequentially stored data entry balance store genesis account balance account initially assigned genesis plain text file details slicing system ready use stakeholders start sending transactions node operators unlock heat server start forging blocks process run smaller data stores hold balances asset balances open orders public keys larger gb data store holds transactions block slicing mechanism deployed nodes network know exactly block height new blocks segment started hardcode height source code easiest solution publish blockchain use method base",
    "metadata": {
      "chunk_id": "add1b8db65f1303e353ea92620e25387",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 17] holds transactions block slicing mechanism deployed nodes network know exactly block height new blocks segment started hardcode height source code easiest solution publish blockchain use method base moment split instance actual size blocks disk remains decided time split live running nodes active connected moment split new file appear hard disk previous segment called heat blockchain instance new file named heat blockchain 2 online servers serve transactions past block segment peer wants standard peer 2 peer operations balance stores belong specific blocks store moment split active nodes network generate new balance stores balance stores different types balances balance stores new block file initially start exact copies previous versions cloning happens extremely fast balance stores based memory mapped files use heap memory cloning process visit balance predetermined order create checksum balances checksum generated building sha256 hash updated account id balance combo added sha256",
    "metadata": {
      "chunk_id": "2b6b3957149e0de8e4d5b2ad4321c8a1",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 18] memory mapped files use heap memory cloning process visit balance predetermined order create checksum balances checksum generated building sha256 hash updated account id balance combo added sha256 hash final checksums came previous balance store previous checksums travelling forward future new balance store chaining checksums impossible later present altered balance file simply checksum match genuine file got cloning words digest hash checksum previous step added seed previous checksums balance file stored new balance file arrangement requires new users come online time network later download past balance files able validate transaction segment new user need download archived block segments resulting significant savings size downloaded data peers 10 32 x0cadded security pos consensus add second layer security sliced block files apply strength pos consensus protocol generally recognized inability attacker obtain access half total heat stake existence nodes network switched new segment",
    "metadata": {
      "chunk_id": "5c35963fec46a635a76e1bb954910b33",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 19] second layer security sliced block files apply strength pos consensus protocol generally recognized inability attacker obtain access half total heat stake existence nodes network switched new segment generated new balance stores include checksum previous balance store starting block 1440 new segment 1440 blocks forger include carryover checksum block forges node network receiving new block finds carryover checksum match actual correct checksum block rejected chance forking network slim way maximum rollback 720 blocks passed network point segment split nodes landing fork ones include checksum considered false rest network new user xe2 x80 x99s heat server software automatically verifies balance files belong calculating comparing balance checksums let xe2 x80 x99s example 20 block segments future means total chain size larger available space user xe2 x80 x99s hard disk downloading segments longer option download latest completed blocks segment largish file gb standards cryptocurrency",
    "metadata": {
      "chunk_id": "d290a2c43f85b42baad83e0789725ab9",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 20] future means total chain size larger available space user xe2 x80 x99s hard disk downloading segments longer option download latest completed blocks segment largish file gb standards cryptocurrency scene user xe2 x80 x99s server software downloads past balance files 1 10 000 size blocks segment minimal performance impact heat server scans balance file accepting makes sure checksums match way genesis final balance file comes big moment user xe2 x80 x99s server needs validate final blocks segment downloaded network needs validate transactions blocks segment access previous blocks transactions protocol require access past transactions definition mechanism work truly global scale crypto platform relying having access virtually endless set transactions scale technology available humankind currently 11 32 x0cvalidating recent blocks segment heat shown far fastest public decentralized ledger available feat possible unique design use custom designed storage balance components speed safely",
    "metadata": {
      "chunk_id": "cf14f74ea27fbefc167ef64d42f56112",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 21] 11 32 x0cvalidating recent blocks segment heat shown far fastest public decentralized ledger available feat possible unique design use custom designed storage balance components speed safely ignore tera petabytes transactions doubt transactions network global span let xe2 x80 x99s walk process friend bob validating block balance files single node 1 bob balance files lets 20 generations 2 bob confirms balance file way genesis connect confirmed checksums follow balance store references past store 3 bob doesn t know balances real balances remains seen later 4 bob downloads recent completed block transactions segment 5 bob sure real data set remains seen 6 bob downloaded block segment number 19 network currently segment number 20 7 bob takes balance store segment number 18 starts number 18 balance store consist exactly final balances heat network time number 18 segment created starting state number 19 blocks file 8 bob assumes number 18 balance file real balance false ll find later 9 bob",
    "metadata": {
      "chunk_id": "4b7a32dcf2a3cfc52d6193f2bb8f3a03",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 22] store consist exactly final balances heat network time number 18 segment created starting state number 19 blocks file 8 bob assumes number 18 balance file real balance false ll find later 9 bob confirm number 17 balance store checksum written 1440 times forgers start number 18 segment way bob know pos forging weight point time agreed checksum balance store 10 bob starts scanning segment 19 filled transactions transaction validated applied time updating final state number 18 balance store new transaction update balance store 11 bob applying transactions number 19 blocks store correct final balances match exactly balances found number 19 final balance store 12 course s possible bob duped downloading fake balances files downloaded fake blocks segments match 13 create fake matching balances matching transactions simple task highly unlikely attacker theoretically possible succeed fake blockchain attack needs convince majority network fact sure rollback required 720 blocks s maximum allowed",
    "metadata": {
      "chunk_id": "a8be2646bd1e06313f303aaeab92fe5b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 23] transactions simple task highly unlikely attacker theoretically possible succeed fake blockchain attack needs convince majority network fact sure rollback required 720 blocks s maximum allowed number blocks blockchain reorg brute forcing discovering distributing fake datasets cost lot time exposes moment start attack practical purposes level security sufficient 14 bob pretty sure balances transactions valid starts join peer peer block distribution network 15 joining network bob find start segment 20 network start feeding blocks transactions start number 20 segment 1440 blocks carry checksum number 19 balance store signed validated pos weight blockchain bob sure balance files blocks segments valid 12 32 x0cnetworking improvements peer 2 peer api connections nxt clones rely jetty17 embeddable tried tested servlet container web server solution incepted 1995 newer networking libraries paradigms emerged jetty blocking network framework means schedules thread connection advanced solutions",
    "metadata": {
      "chunk_id": "db6c5cb7d3017399daa9c620e369bb0e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 24] tried tested servlet container web server solution incepted 1995 newer networking libraries paradigms emerged jetty blocking network framework means schedules thread connection advanced solutions like netty18 heat exist mentioned scalability netty direct consequence asynchronous design require thread request able handle concurrent connections available memory compared thread request approach threads running server operating system busy context switches thread related overhead lead performance increase case netty true found way businesses twitter facebook handle impressive amounts concurrent requests source 19 existing earlier research20 shown inefficiency cryptocurrency peer peer protocols major case inefficiencies double multiple transport blocks transaction data peers blocks heat use smarter protocol peers don t transfer blocks data peers peers explicitly indicate want data difference strive connect peers time reference nxt currently default 20 connections kept alive public peers",
    "metadata": {
      "chunk_id": "b0d27d7d88b35ad3f5fe89ab1d396149",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 25] smarter protocol peers don t transfer blocks data peers peers explicitly indicate want data difference strive connect peers time reference nxt currently default 20 connections kept alive public peers heat non blocking asynchronous websocket connections netty believe support 1000 5000 active connections peers optimal standard number active connections investigation time writing optimize network performance heat exclusively use binary messages peers significantly clip network bandwidth consumed compared current situation messages encoded json memory consumption lowered passing binary messages received network directly heap storage layer decreasing need garbage collection 17 http www eclipse org jetty http netty io 19 http ayedo github io netty 2013 06 19 netty html 20 scaling decentralized blockchains http fc16 ifca ai bitcoin papers cde 16 pdf 13 32 18 x0creal time external replication discarding database heat core removed major bottlenecks daily p2p consensus operations longer having",
    "metadata": {
      "chunk_id": "0bf74ab5f663616ff5b438d5b900825a",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "investigation"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 26] blockchains http fc16 ifca ai bitcoin papers cde 16 pdf 13 32 18 x0creal time external replication discarding database heat core removed major bottlenecks daily p2p consensus operations longer having worry later discoverability transactions blocks able 1 scale infinitely need peer demand produce data transactions past 2 improve performance longer need index database table insert processing new transactions requires storing end list existing transactions implementations lose possibility perform powerful sql queries blocks transaction data regular peer accommodate loss functionality way created replication layer replication layer replication layer event based optional configurable event sink mechanism run heat mysql 21 brand database server server machine local network mysql support comes box turn builds generic implementation allows write event sink type database server need add vendor specific java class provides database specific sql queries database heat happily replicate database",
    "metadata": {
      "chunk_id": "2699da2346756ec57ed88c551dd316ef",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 27] box turn builds generic implementation allows write event sink type database server need add vendor specific java class provides database specific sql queries database heat happily replicate database type standard parts real time replicate include 1 confirmed unconfirmed transactions heat core handles stores confirmed unconfirmed transactions separately replication abstraction able produce coherent collection transactions consisting unconfirmed transactions start collection confirmed transactions greatly eases creating client view real time transactions 2 balances accounts 3 blocks metadata don t store block contents signatures saving lot storage 4 public keys accounts 5 messages sent regular message transaction included message attachment type transaction optionally configure heat private key messages replicated encrypted gives running replication possibility store private data encrypted blockchain replicated unencrypted real time mysql server fast indexing custom queries etc 6",
    "metadata": {
      "chunk_id": "87073ae0d55ac65ab69520dccd30d602",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 28] key messages replicated encrypted gives running replication possibility store private data encrypted blockchain replicated unencrypted real time mysql server fast indexing custom queries etc 6 assets trades orders orders matched real time based unconfirmed transactions case new block indicates matched orders correctly according view unconfirmed transaction ordering corrected instantly seeing new block event sink 21 https www mysql com 14 32 x0cextending message protocol commercial projects concrete plan heat materialized handle number domain objects stored blockchain available real time mysql application server created addition replication layer create binary messages encrypted recognized replication code handed correct handlers handlers written user handlers java classes unique id know interpret binary message input apply data mysql database replication extensions cases need additional table definitions box schema versioning solution need enter table definitions updates heat",
    "metadata": {
      "chunk_id": "481d9e6f082e0a5649bf452fcc26d44d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 29] know interpret binary message input apply data mysql database replication extensions cases need additional table definitions box schema versioning solution need enter table definitions updates heat replication care applying updates needed turned simple integrate binary message support heat html5 client framework things easier use typescript client language typescript allows create interfaces perfectly wrap handle binary data encodings heat custom built message handlers intend users utilize big handler work consists manually entering code interprets binary data translates variables numbers strings etc tedious work perfectly suited automation xe2 x80 x99s needed set table definitions formalized message data structures concluded exactly best expose extended messaging protocol allow run custom protocol heat ideas range java helper classes json custom dsl22 based jruby23 real time asset asset exchange bringing decentralized asset exchange web scale help real time replication presented",
    "metadata": {
      "chunk_id": "92062db387ffaefa6167068563f3349f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 30] protocol heat ideas range java helper classes json custom dsl22 based jruby23 real time asset asset exchange bringing decentralized asset exchange web scale help real time replication presented previous section able create relatively efficient live view state orders heat asset asset exchange a2ae traditionally asset exchange applications based cryptographic ledgers suited high speed trading fact usually real time speed limitations applying transaction data blocks delay minutes available transactions 22 23 https en wikipedia org wiki domain specific language http jruby org 15 32 x0cin order expose heat a2ae web scale massive audience implemented secondary web application serves apis client uses trading ui external functioning heat core impact magnitude orders users protocol handle client prototype created play framework application scala connects replicated mysql database expose real time exchange data tests shown serve huge numbers users process enormous numbers orders relatively",
    "metadata": {
      "chunk_id": "dea073c4d76f67a7a2645e70c5f35ece",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 31] prototype created play framework application scala connects replicated mysql database expose real time exchange data tests shown serve huge numbers users process enormous numbers orders relatively light server note real time asset exchange data new fimk nxt 24 example supernet asset virtual exchange25 created mechanism called virtual exchange layer similar thing difference heat virtual exchange layer api calculates recent order state request heat final order state available time straight mysql database use replication process implement new generation scalable blockchain bring features legacy trading platforms blockchain heat introduces mandatory expiration orders expiration achieved step process orders recorded expiration timestamp 1 second 2 592 000 seconds 30 days order time heat client ui order matching middle layer ignore expired orders time orders completely purged blockchain rescan 24 hours colored accounts private assets unique colored account implementation fimk provided early",
    "metadata": {
      "chunk_id": "44625e5f519e5915c94060ed3229d30b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 32] ui order matching middle layer ignore expired orders time orders completely purged blockchain rescan 24 hours colored accounts private assets unique colored account implementation fimk provided early 2016 enabling custom assets26 pricing trading ported heat idea colored account create xe2 x80 x9ccolored coins xe2 x80 x9d heat ledger simply tagging account instead tagging subset tokens creator color transmutate heat color change colored heat heat having created new colored tokens use features heat features available work long subset accounts assigned account color standard assets heat asset exchange priced heat creating asset colored account imposes created asset xe2 x80 x99s price base particular account color instance eur instead heat step gives birth custom assets priced asset isolate colored asset general heat token flow accounts wishing trade asset need assigned correct color asset issuer heat includes asset feature making possible mark asset private colored standard assets",
    "metadata": {
      "chunk_id": "9ef657ccf163a84619895720aef42815",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 33] colored asset general heat token flow accounts wishing trade asset need assigned correct color asset issuer heat includes asset feature making possible mark asset private colored standard assets private assets traded accounts selected asset issuer addition private assets use custom order trade fees charged users eventually broadcasting buy sell cancel order transactions 24 https github com fimkrypto nxt plus https www mofowallet com launch html assets nxt 12071612744977229797 trade 26 https lompsa com activity fim assets latest 16 32 25 x0ccustom asset exchange a2ae term implies asset asset exchange enables trading custom tokens priced custom token pricing currency issue generally problem child crypto ledgers asset exchange functionality available addition fimk bitshares27 recently waves28 technology possible price assets token heat xe2 x80 x99s initial version achieves custom assets functionality colored accounts mechanism implementation plan standing direct native asset asset",
    "metadata": {
      "chunk_id": "c8850897ac4ce61a7321417d3aaf6ae1",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 34] waves28 technology possible price assets token heat xe2 x80 x99s initial version achieves custom assets functionality colored accounts mechanism implementation plan standing direct native asset asset trading deployed heat main net launched running stable condition time heat system support multiple different technical routes issue price trade custom assets making suitable wide variety real world business applications crowdfunding fiat trading gateways flexibility robust processing capabilities heat a2ae specifically fit kind crowdfunding share issuance applications evolved traditional crowdfunding projects crowdfunded heat xe2 x80 x99s system issue tokens investors enable immediate later phase trade tokens heat decentralized company xe2 x80 x99s privately commissioned crypto ledger large volume trading instantly matched trades longer produce hindrance thanks heat xe2 x80 x99s hft processing speed colored semi public tokens private proprietary blockchains obvious choice represent",
    "metadata": {
      "chunk_id": "bb0b6226815483f157581b5f69a086c0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 35] volume trading instantly matched trades longer produce hindrance thanks heat xe2 x80 x99s hft processing speed colored semi public tokens private proprietary blockchains obvious choice represent national fiat money eur usd real world assets priced technically possible arrange fiat assets competing platforms mentioned previously obstacles achieve real fiat trading blockchain acutely related regulatory legal obstacles point entry high obscure licensed money transmitter business engage mission critical fiat operations experimental p2p public ledgers heat ledger ltd xe2 x80 x99s business model provide custom trading blockchains corporate use low point entry public heat blockchain medium weight agile fsps 29 incentive company strives joint venture projects licensed money transmitters provide showcase real world fiat applications heat software nontechnical details subject outside scope document discussed permitted business arrangements 27 https bitshares org https wavesplatform com 29",
    "metadata": {
      "chunk_id": "1c037321d33938972c80b73aa60e0c4c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "regulatory"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 36] showcase real world fiat applications heat software nontechnical details subject outside scope document discussed permitted business arrangements 27 https bitshares org https wavesplatform com 29 financial service provider 28 17 32 x0cdistributed services architecture dsa note distributed services architecture use http iot dsa org heat answers blockchain based distributed applications ingenious way named technique distributed services architecture dsa dsa heat users able write software applications java javascript apps serve clients interactively blockchain encrypted distributed state memory space dsa based proprietary stateful interactive communication protocol similar known http protocol powering internet today dsa heat core allow creation wide range digital currency p2p database services services offered decentralized anonymous way service providers prove acted fair free offer kind automated services offering heat software node services normally require fairly technical setup",
    "metadata": {
      "chunk_id": "9e89ca7d2704a4de7044302d0f5d0720",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 37] services offered decentralized anonymous way service providers prove acted fair free offer kind automated services offering heat software node services normally require fairly technical setup requires running securing online server writing software handles automation distributed services architecture solves following difficulties normally faced developing offering cryptocurrency digital services 1 need web server run heat node install automated services heat 2 need write service s software use pre built services offer 3 service operator stay completely anonymous instead http web server dsa protocol allows run service online briefly instance minutes day protocol allow users interact service online b heat run tor mask service provider s identity 4 way cheat service operator service implementation code publicly available service inputs outputs blockchain verified access blockchain b imagine service exchange cryptocurrencies interact dsa service contact gives price quote exchange",
    "metadata": {
      "chunk_id": "a0bf168b1bc2301aba8652a9ffe85569",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 38] implementation code publicly available service inputs outputs blockchain verified access blockchain b imagine service exchange cryptocurrencies interact dsa service contact gives price quote exchange cryptocurrencies public record service provider handing quote helps customer inspect previous uses service service obliged hand service gave quote uses processing service requests stored record point view service basically execution context expires giving service script access archived inputs outputs simple variables service script 18 32 x0c5 ability chain services create service networks distributed services meant reusability idea eventually thousands individual services run heat blockchain new services constructed existing services making available end users services smart contracts ds means smart contracts main reason according definition smart contract smart contract runs independently runs peers network distributed services different ways distributed service smart contract invoked",
    "metadata": {
      "chunk_id": "a9818c2dfe4fd11db0efcc2b5e055202",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 39] smart contracts main reason according definition smart contract smart contract runs independently runs peers network distributed services different ways distributed service smart contract invoked blockchain events yes yes receives input blockchain yes yes returns output blockchain yes yes runs massive scale individual services don t run nodes network yes author stay anonymous yes yes comes built powerful payment solution yes yes access data outside blockchain exchange rates betting scores etc yes invoke external services perform outside yes blockchain actions like sending email wiring eur receiver chained build new services contracts combining existing services contracts yes yes interact blockchains yes running contract service free yes writing distributed services writing distributed services easy input outputs services encoded dense binary messages mean creating services especially javascript better typescript requires knowledge input output marshalling handled heat ds libs remains",
    "metadata": {
      "chunk_id": "ce474ab45985c28fcf8ec969d36dcea9",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 41] fee input sendemailinput return input body length 0 001 public sendemail transaction transaction input sendemailinput callback output sendemailoutput void emailapi sendemail input recipient input sender input subject input body success boolean callback success success isn xe2 x80 x99t lot code piece code compiled installed heat services directory serving world wants send automated email time receiving fee payment heat service run price declared paid account 20 32 x0cbesides sending email numerous seen environments thought small software services users create heat dsa service implementers don t write actual service code instead use service email snippet service service networking pass minimal cost service customer type services expect sky limit regard types services expected run heat network described example set services broadly convey idea possible list set service categories list limited size note categories applied cryptocurrency fiat currency today 1 oracle service oracle writes",
    "metadata": {
      "chunk_id": "2308767b39a6591f71426153ad4c7190",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 42] described example set services broadly convey idea possible list set service categories list limited size note categories applied cryptocurrency fiat currency today 1 oracle service oracle writes foreign fact blockchain oracle possible create transaction heat blockchain execute event outside heat blockchain happened good example oracle bob sends alice heat tokens transaction execute oracle service writes blockchain transaction details alice btc payment bob 2 escrow service requesting new escrow parties send money escrow escrow release funds parties agree combined oracle service escrow releases funds based oracle saying requirements met 3 time based data decryption secret reveal service based certain date block height transaction heat blockchain real world event coming oracle service decrypts publishes sends predefined recipient secret gave advance 4 co signer service use multi sig transactions btc eth heat etc user service use service provider public key required co signer multi",
    "metadata": {
      "chunk_id": "64fc4079d28248d1a3161cf532faaa6d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 43] decrypts publishes sends predefined recipient secret gave advance 4 co signer service use multi sig transactions btc eth heat etc user service use service provider public key required co signer multi signature transaction requirement met service provider add signature multi sig transaction execute 5 gateway trade bot service gateway trade bot service buy sell cryptocurrency exchange example service users sending eth service eth address received service immediately sell eth btc transfer real btc seller 6 webshop simplification sell digital products internet music video files instance create service return link download digital product return cryptographic key buyer unlock digital product creating new service implementation categories consist copying existing implementation changing details cases single line code 21 32 x0cservice operator xe2 x80 x99s privileges liabilities 1 anonymity option strong cryptographic identification service operators remain anonymous contact service operator",
    "metadata": {
      "chunk_id": "8c447ecab06f41feb4bb9f3dc8acfd3c",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 44] cases single line code 21 32 x0cservice operator xe2 x80 x99s privileges liabilities 1 anonymity option strong cryptographic identification service operators remain anonymous contact service operator runs blockchain additionally protected tor ip anonymizing relay layer desired direct way pinpoint physical location service service operator wants hand service identified heat account id offers strong nonbreakable proof identity desired hallmarking public registration node ip address heat node provide higher level cryptographic proof service operator xe2 x80 x99s identity location desired service operator 2 fraud proof technically enhanced decentralized reputation system service operator course cheat instance oracle service writes blockchain certain btc transaction happened reality operator way funds belong wants simply verify oracle written case actually false automated heat client single click client downloads service implementation code runs inputs blockchain revealing fake result",
    "metadata": {
      "chunk_id": "78c2ab1e519862b7436a74ccd43eeb09",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [
          "fraud"
        ],
        "operational": []
      },
      "risk_score": 10.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 45] way funds belong wants simply verify oracle written case actually false automated heat client single click client downloads service implementation code runs inputs blockchain revealing fake result important factor multiple service providers offer service trust reputation provider simple feedback available comments attached service operator required detailed reputation system created use blockchain backbone ability chain services service inputs outputs blockchain possible chain service service payment transaction transaction execute certain requirements met chaining feature enables emergence automated software service networks massive scale sophisticated provide services based ai implementations neural expert systems smart offline vouchers smart vouchers unique heat feature allows heat account generate possibly millions transactions hand world price single transaction fee smart vouchers conditional transactions payments messages asset transfers etc generated offline completely free",
    "metadata": {
      "chunk_id": "2732ea67de7a5d57e6ff6fce599560bc",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 46] account generate possibly millions transactions hand world price single transaction fee smart vouchers conditional transactions payments messages asset transfers etc generated offline completely free charge unlike standard transactions smart vouchers stored blockchain instead generated offline handed recipients form small file piece text varying length 22 32 x0ceither way voucher fully signed transaction sent blockchain case voucher fixed account account voucher created smart heat vouchers conditionality generate million vouchers voucher valid certain alias certain value falls certain range values way securely hand vouchers mass quantities externally control validity use cases smart vouchers range decentralized lotteries methods easily introducing new users heat network services instance rebate coupons smart vouchers allow business operators hand free heat assets zero cost user use voucher e2ee chain messaging heat contains native messenger send blockchain archived message",
    "metadata": {
      "chunk_id": "b579f888add9e23284c9ea673971f5cf",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 47] instance rebate coupons smart vouchers allow business operators hand free heat assets zero cost user use voucher e2ee chain messaging heat contains native messenger send blockchain archived message transactions chain messages free charge endpoints kind messaging end toend encrypted way decrypt transmitted data sender xe2 x80 x99s receiver xe2 x80 x99s private key chain messaging leave archive encrypted message metadata blockchain giving impression secure way communication blockchain based messaging use chain messaging parties message channel need online time message sending gossip30 protocol transmit messages gossip protocol basically peer peer protocol assures transactions distributed network peers heat reuses protocol allow flow selected messages protocol free charge limited overseen prioritized lower transactions based space available p2p transmit channel heat xe2 x80 x99s binary data format makes highly efficient transmit data peers expected nearly cases sufficient allowance",
    "metadata": {
      "chunk_id": "05494e455f8e1915f87887106141e1e8",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 48] prioritized lower transactions based space available p2p transmit channel heat xe2 x80 x99s binary data format makes highly efficient transmit data peers expected nearly cases sufficient allowance transmit chain messages network reach recipient account structure aliases heat account identifiers new heat accounts users default create human readable identifiers standard heat client choice public identifier private indentifier identifiers usually email accounts form inhouse user heatledger com external user herownemail com email account format chosen facilitate user migration legacy email software insecure use external email identifiers verified 2fa verifier email sent heat ledger ltd xe2 x80 x99s server heat client xe2 x80 x99s messaging solution embeds notification messages standard email desirable 30 https en wikipedia org wiki gossip protocol 23 32 x0cpublic identifiers stored blockchain visible private identifiers different instead plain text identifier heat stores 32 byte hash",
    "metadata": {
      "chunk_id": "3bee1ccfa4d6b3275450412361098d12",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 49] desirable 30 https en wikipedia org wiki gossip protocol 23 32 x0cpublic identifiers stored blockchain visible private identifiers different instead plain text identifier heat stores 32 byte hash identifier way participants need know identifier use assure delivery transactions correct account checking identifier hash heat blockchain advanced users able create standard heat accounts completely decentralized manner publishing 128 bit public key blockchain storing extra identifiers blockchain aliases aliases free form text identifiers free form data associated aliases temporary meaning available automatically deleted certain number blocks reason feasible aliases forever system scale virtual limitless demand aliases sorts power vouchers thing alias expires alias assigner window certain number blocks extend alias registration paying standard alias tx fee alias keys consist 32 bytes fit heat public key basically unique key alias values consist 64 bytes fit highest numbers sizes smaller",
    "metadata": {
      "chunk_id": "93befc37eb6ab77997aa39cdb5c7434e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 50] blocks extend alias registration paying standard alias tx fee alias keys consist 32 bytes fit heat public key basically unique key alias values consist 64 bytes fit highest numbers sizes smaller original nxt aliases instance 100 byte keys 1000 byte values return stripping extensive data store able scale massive worldwide usage smart vouchers way affordably support sorts offline blockchain uses deployments assist businesses securely create perfectly scalable voucher solutions power lotteries crowdsales ticket sales distributed blockchain voting solutions include strong chain identities voters loss heat transaction costs case users fail redeem vouchers balance pruning temporary accounts heat balances accounts identified internally 8 byte java long primitive numeric id account details stored identified 8 byte key highly efficient means process store data layer heat accounts identified 32 byte 128 bit public keys turn secured 256 bit private key able internally link 8 byte account ids 32",
    "metadata": {
      "chunk_id": "c4c9beab9793c05a2dc358031a4149f9",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 51] identified 8 byte key highly efficient means process store data layer heat accounts identified 32 byte 128 bit public keys turn secured 256 bit private key able internally link 8 byte account ids 32 byte account public keys record public keys kept track account id represents public key respectively costly terms storage new account unlike transaction permanently stored distributed network 24 32 x0cto mitigate resource cost heat actively start removing public keys balances account having balance lower x eg 0 00000001 heat n blocks users don t want public keys removed sure balances decrease x heat client api designed accidentally overdraft minimum balance function effectively allows complete deletion accounts blockchain use temporary accounts form vouchers instance limit minimum balance subject increase future expansion number heat accounts consequently size heat balance files mandatory new nodes minimum forger balance heat need 1 heat able forge blocks practice small negligible chance",
    "metadata": {
      "chunk_id": "6f98df8df57ef92481b1b2ba437cf4ec",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 52] increase future expansion number heat accounts consequently size heat balance files mandatory new nodes minimum forger balance heat need 1 heat able forge blocks practice small negligible chance forging block reasonable allow testing forging setup new users low heat token balances heat account control multi sig protecting stake extremely important aspect holding possibly large sums heat account lose private key account lose key lose access funds access funds unfortunately years worked created new blockchain solutions seen happen large stakeholders lose considerable sums holdings efficient method prevent losses large holdings account control heat incorporate following forms account control initial main net release update shortly limit transferred day large holders like exchanges definitely use feature place account account control happens sending special transaction transaction include emergency public key transferred emergency key n blocks unauthorized party obtains access account",
    "metadata": {
      "chunk_id": "a577bb8810721f325221067de3059f6b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 53] use feature place account account control happens sending special transaction transaction include emergency public key transferred emergency key n blocks unauthorized party obtains access account maximum allowed detect breach time use emergency key transfer funds new secure account account control instructions storage section discarded later transaction fee account higher sending normal payment transaction 25 32 x0cmulti sig accounts heat accounts assigned multi signature status means owner account send special transaction includes definition accounts sign transaction coming original account tx accepted blockchain multi sig settings storage section easily pruned later transaction fee initial mark account multi sig transaction higher normal payment transactions heat rewards mechanism tier rewards heat like public decentralized ledgers wants incentivise active network participants uses hybrid award system reward contributing users 1 reward generating blocks proof stake pos involves",
    "metadata": {
      "chunk_id": "1b03e1ec03bc3403d794d1a04374b866",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [
          "breach"
        ],
        "financial": [],
        "operational": []
      },
      "risk_score": 11.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 54] rewards heat like public decentralized ledgers wants incentivise active network participants uses hybrid award system reward contributing users 1 reward generating blocks proof stake pos involves running node unlocked user s stake applied generate blocks users run block generating node generally need moderate heat account 2 reward storing blockchain proof presence pop recent blocks file distributed p2p nodes previous blocks files needed normal p2p operations heat incentives users store available previously archived block files reward block generators pos model block generation xe2 x80 x9cforging xe2 x80 x9d mechanism creating new heat tokens distributing transactions fees reward node runners based heat tokens available account unlocked signed node account generates block awarded yearly declining guaranteed reward plus transaction fees 4 years guaranteed 0 block reward consists transaction fees block expect sufficient tx fees incentivize suitable number active pos nodes 26 32 x0chow",
    "metadata": {
      "chunk_id": "0fb5266a520e66a72918eb92d6b20ca7",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": [
          "locked"
        ]
      },
      "risk_score": 9.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 55] declining guaranteed reward plus transaction fees 4 years guaranteed 0 block reward consists transaction fees block expect sufficient tx fees incentivize suitable number active pos nodes 26 32 x0chow reward blockchain storage pop model heat want nodes host past blocks segments past balance stores required node stored block segments balance stores able forge blocks reward systems function independently nodes eligible pop rewards register hallmark hallmark assigns static ip account stores blockchain peers network connect ip address know account runs node pos weight forging open source p2p protocol31 readily favors hallmarked nodes non hallmarked comes choice download blocks transactions registered node s ip address hallmark node advertises exactly past blocks segments archived making available network registration available segment serves 3 purposes 1 establishes index nodes network wish download segment registration know node able serve blocks whichever segment registered 2 serves",
    "metadata": {
      "chunk_id": "4ee956227c41d03bca48291f741f639e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 57] respond challenge case responded wrong answer challenge segment gets reward important goal pop protocol rewards distribution block segments available entire network segment hosted fewer hallmarked nodes segment pop reward mechanism automatically makes theoretically profitable host rare segment reward algorithm knows segments network initially segment segment contains genesis block set blocks segment completed segments segment completed active completed segment period segment segment completed protocol uses relatively small random sections active segment create challenges parts blockchain evenly random lottery mechanism hallmarked accounts select account gets solve challenge point segment completed gets archived different algorithm applied scalability reasons pop rewards aggregated batches average 10 blocks rewarded finder 10th block random average algorithm runs random intervals start randomly selecting completed segments ensures segment entitled pop reward segment selected protocol",
    "metadata": {
      "chunk_id": "2a74d569ffa0ac029aabe3f46d1ca362",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 58] average 10 blocks rewarded finder 10th block random average algorithm runs random intervals start randomly selecting completed segments ensures segment entitled pop reward segment selected protocol randomly selects hallmarked account says segment hallmarked account challenge created published blockchain transaction hallmarked account solves challenge correctly response matches question protocol rewards account heat pop reward doesn t solve false answer nonresponse hallmarked account skip turn solve challenge configuring heat server access private key sign transactions setup hallmark challenge solving responding happens automatically note maximize secure usage private key locally installed heat server possible assign pos weight cold wallet account offline balance leasing way use second blank account hallmark account signature account exposing main account xe2 x80 x99s private key online node 28 32 x0cpop challenges fair fair challenges provably fair verify correct random challenge",
    "metadata": {
      "chunk_id": "3d4ef21387debb001b238b7335a9055e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 59] blank account hallmark account signature account exposing main account xe2 x80 x99s private key online node 28 32 x0cpop challenges fair fair challenges provably fair verify correct random challenge correctly generated generator account written properly blockchain run challenge creator algorithm challenge creator created correct challenge correct solution answer challenge truly questions correct blockchain section challenge creator happens challenge consists challenger account writing challenge blockchain idea challenge knows answer known secret included inside challenge challenged account decrypt secret getting access actual answer expected answer decrypted data indicates challenged account known secret challenger account early phases heat network heat ledger ltd developers operate single challenger account account bound strict protocol rules viewed autonomous granting undue power developers protocol allows decline assigned tasks immediately clear network early operational phase",
    "metadata": {
      "chunk_id": "332c37f26bc72a14f4e4105849f55d73",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 61] seed random input prevent pre calculations 29 32 x0c1 selection challenge block challenges created random interval 10 blocks average new challenge block selected selection challenge block based block id number block challenge block block id number % 10 0 gives average 10 hits randomly distributed 2 selection challenge segment challenge supposed select evenly selected segment existing segments idea rewarding segments equal way sure equal distribution segments nodes method guarantees matter large blockchain grows high incentive archive rare parts network ensuring equal distribution past segments select segment look number possible segments select place instance 10 segments numbered 0 9 randomly select equal chance use current block id number select closest segment based modulo arithmetic 3 selection challenged account possible account registered hallmarked account acknowledged hosting selected segment list registered accounts selected challenged account find selected account sha256 hash",
    "metadata": {
      "chunk_id": "b784100772fe4983f0c60259b411725d",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 62] challenged account possible account registered hallmarked account acknowledged hosting selected segment list registered accounts selected challenged account find selected account sha256 hash current block signature add previous block signature resulting hash add selected segment check registered account account create sha256 hash public key added block signature 8 bytes resulting hashes whichever account highest number wins challenged account 4 selection challenge seed challenge seed random unpredictable piece data create sha256 hash feed block signature feed challenger account public key feed public key challenged account resulting digest challenge seed 30 32 x0cthe actual challenge point know create challenge challenge challenged answer challenge answer seed time create challenge write challenge blockchain challenger account creates checksum segment result 32 byte array large number challenger creates sha256 hash block signature challenged account public key checksum obtained",
    "metadata": {
      "chunk_id": "885f584b6ae813ff8a8041dab3507f74",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 63] write challenge blockchain challenger account creates checksum segment result 32 byte array large number challenger creates sha256 hash block signature challenged account public key checksum obtained previous phase result secret published challenged account challenger creates sha256 hash secret challenge details segment account publishes blockchain transaction challenged account responds transaction contains secret sha256 gives hash published hash protocol consider challenge solved correctly conclusion heat decentralized crypto ledger platform ambitious business project bringing dramatic server level changes client features middleware system arrangements form basis software solutions suitable financial applications today future extensive scope going boldly crypto geek gone heat team look forward bringing maximum technological capacity modern commodity hardware use everyday distributed blockchain applications eventually feat possible engagement supportive community careful technical",
    "metadata": {
      "chunk_id": "d9f117b6672d17782a9c29c7daba1a81",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  },
  {
    "text": "[Section 64] forward bringing maximum technological capacity modern commodity hardware use everyday distributed blockchain applications eventually feat possible engagement supportive community careful technical structural design enthusiastic users involved distribution heat system token strive achieve status heat rightfully recognized proper xe2 x80 x9cgen 3 0 xe2 x80 x9d cryptocurrency platform 31 32 x0cwhite paper version history 2016 08 01 v1 0 initial publication 2016 08 02 v1 01 minor wording changes improved pdf formatting 32 32 x0c",
    "metadata": {
      "chunk_id": "ab655e2e473442cec7c919cf15ab94f3",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "HEAT.txt"
    }
  }
]