[
  {
    "text": "[Section 1] b nexus tritium protocol 29th 2018 abstract xe2 x80 x9chumility solid foundation virtues xe2 x80 x9d confucius blockchain flourishing technology constant state change nexus pioneering new approach blockchain technology solves biggest challenges faced industry viz scalability ease integration intuitive user experience beginning tritium update creating innovative software stack containing multiple layers abstraction streamline business integration nexus framework form foundation cryptographic identity system smart contracts easily accessible feature rich api set api developed standardization process input businesses industry leaders developers focused providing designed interface seamless business integration 1 x0ccontents 1 introduction 5 2 software stack 5 3 network 3 1 unicast flood networks 3 2 multicast locking groups 3 3 network topology 6 7 7 8 4 ledger 4 1 signature chains 4 2 evolving signature scheme 4 3 financial contracts 4 4 identity 4 5 reputation 4 6 relationships 4 7 twin",
    "metadata": {
      "chunk_id": "5d34060a3ae48cbeba045bbb4c41d9f6",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 2] 3 2 multicast locking groups 3 3 network topology 6 7 7 8 4 ledger 4 1 signature chains 4 2 evolving signature scheme 4 3 financial contracts 4 4 identity 4 5 reputation 4 6 relationships 4 7 twin blocks 9 9 10 10 10 11 12 12 5 register 13 5 1 state register 14 5 2 object registers 14 6 operation 14 6 1 codes 15 6 2 sanitize inputs 16 7 api 16 7 1 gateways 16 7 2 api types 17 7 3 standards 17 8 logical 17 8 1 state recording 17 8 2 data chaining 17 8 3 authorization 18 9 interface 18 9 1 decoupled daemon 18 9 2 modular design 18 2 x0c10 security considerations 19 10 1 attacking nexthash sigchains 19 10 2 attacking vulnerable public keys 20 10 3 brute forcing weak secret seeds 20 11 conclusion 21 appendix content inclined 22 b update phases 22 c applications c 1 receive accounts c 2 ledger level dao c 3 tokenized data c 4 supply chains 22 22 23 24 24 d locator id separation protocol lisp d 1 level indirection addressing routing d 2 nexus lisp d 3 layer security d 4 advanced level",
    "metadata": {
      "chunk_id": "1bce5c9cee1f65a79963b7b8b8ef16e2",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 3] level dao c 3 tokenized data c 4 supply chains 22 22 23 24 24 d locator id separation protocol lisp d 1 level indirection addressing routing d 2 nexus lisp d 3 layer security d 4 advanced level scalability d 5 open standards open source 25 25 25 26 26 27 e list contributors 28 3 x0cwritten colin cantrell dino farinacci contributions shea laver jules alexandra brian smith april bunje steve lackey edited shea laver ad vocem populi 4 x0ctritium white paper 1 0 0 revised 3rd june 2018 nexus connection series connections linking things oxford english dictionary 1 introduction proposed architecture paper combines unique set technologies increase processing capabilities nodes distributed system creating clear distinction functional components layer developed improved independent processing shared multiple layers integration challenges minimized chooses build system 2 software stack following year market research nexus software stack follows principles modular design making uniquely powerful",
    "metadata": {
      "chunk_id": "2f48eace8a49ed729c21a74b4aa867f1",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 4] multiple layers integration challenges minimized chooses build system 2 software stack following year market research nexus software stack follows principles modular design making uniquely powerful range new use cases software stack consists seven layers seen 5 x0cthe layer considered network layer contains layers osi reference model network stack followed ledger layer 3dc holds different data structures representing distributed database layer register layer allows application record state transfer write permissions user read data register acts global network wide address operation layer fourth layer provides processing capabilities register ledger layers standard operation codes series codes act methods object registers defined consensus annual conferences ensuring consistent connection development users api layer fifth layer software stack contain standard set api calls executes series operations automating group actions returns desired result logical interface layers sixth seventh",
    "metadata": {
      "chunk_id": "034d27ffd93cffeb2b1980dd25bb6715",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 5] development users api layer fifth layer software stack contain standard set api calls executes series operations automating group actions returns desired result logical interface layers sixth seventh layers application user space developers users interact intuitive design layers distinct functions provide premium experience developers building applications nexus framework 3 network internet built layers software called xe2 x80 x9cosi reference model network stack xe2 x80 x9d 1 stack responsible transmission data layer 1 physical link layer 7 application space lay foundation viable scaling solutions certain aspects original blockchain protocol need revisited scaling solution needs consider network propagates messages layer simplify 6 x0c3 1 unicast flood networks peer peer p2p networks blockchain require message relayed unicast 2 giving rise term xe2 x80 x9cflood network xe2 x80 x9d message propagate network nodes network process relay peers p2p networks gain robust nature large number",
    "metadata": {
      "chunk_id": "0780c49f9032209600e06e50b2c4bed5",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 6] require message relayed unicast 2 giving rise term xe2 x80 x9cflood network xe2 x80 x9d message propagate network nodes network process relay peers p2p networks gain robust nature large number active nodes creating redundancy system redundancy comes expense increased message propagation time increased xe2 x80 x9ccomplexity xe2 x80 x9d routing algorithm grows o n2 4 termed xe2 x80 x9cexponential time xe2 x80 x9d highly undesirable complexity algorithm cryptographic nodes join system draw exponentially resources cryptocurrency networks balance number nodes required provide high degree redundancy robustness exponential cost message complexity 3 2 multicast locking groups limitations inherent basic operation p2p flood networks increasingly clear distributed ledgers difficulty scaling scalability determined actual size ledger state required held nodes messages route network tritium provides optimized efficient routing system called xe2 x80 x9cmulticast locking groups xe2 x80 x9d step level",
    "metadata": {
      "chunk_id": "2b1d6c00a7694adf7162d3869f4f092f",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 7] determined actual size ledger state required held nodes messages route network tritium provides optimized efficient routing system called xe2 x80 x9cmulticast locking groups xe2 x80 x9d step level 1 locking multidimensional chaining structure seen diagram 3 ip multicast handles packet replication network layer application layer significantly speeds propagation time secondary benefit running ip multicast locking groups begin form parallelism network layer meaning messages broadcast 7 x0crelevant nodes whilst preserving global consensus layers final benefit multicast locking groups access control groups mean nodes authorized broadcast verify groups easily validated ledger 3 3 network topology seen diagram 6 distributed topology ideal network configuration great resilience cryptocurrency networks assumed distributed consensus mechanisms protocols decentralized degrading pieces certain limitations devices use xe2 x80 x9cnetwork address translation xe2 x80 x9d nat allows devices local area",
    "metadata": {
      "chunk_id": "f3438291bffae65d2718f290a1a1f330",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 8] assumed distributed consensus mechanisms protocols decentralized degrading pieces certain limitations devices use xe2 x80 x9cnetwork address translation xe2 x80 x9d nat allows devices local area network lan share public ip address route packets corresponding device based port number nodes nat difficulties getting opening nat node accept incoming connections creates bottleneck collapsing distributed network decentralized solve locator id separation protocol lisp included support open secure overlay nexus nodes network layer identity maintains distributed topology regardless connection method location 8 x0c4 ledger ledger layer distributed database system structure transactional data organized powered lower level library contains security database protocol messaging services layer foundation applications built improvements current blockchain based ledger outlined following sections 4 1 signature chains tritium introduces new system called xe2 x80 x9csignature chains xe2 x80 x9d designed",
    "metadata": {
      "chunk_id": "e39d59543c2fa91a01581eb7228c0fca",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 9] applications built improvements current blockchain based ledger outlined following sections 4 1 signature chains tritium introduces new system called xe2 x80 x9csignature chains xe2 x80 x9d designed increase security flexibility private keys provide replay protection account based transactions prevent dust spam attacks signature chains provide username password functionality protected pin code removing need wallet dat file access private keys functionality forms basis digital identity system linking event tied signature chain illustration shows scheme detail 9 x0c4 2 evolving signature scheme signature chains quantum resistant evolving signature scheme developed specifically blockchain applications like winternitz signature scheme uses time signature ots signs message key key update algorithm automatically called signing transaction key update required signature key update algorithm takes secret input provided user pseudo random string non ce hashes inputs multiple times skein keccak",
    "metadata": {
      "chunk_id": "603a37f41bca12bbbc19ccb373ae9e76",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 10] automatically called signing transaction key update required signature key update algorithm takes secret input provided user pseudo random string non ce hashes inputs multiple times skein keccak sk form basis private public key pair based brainpool standard 7 public key hashed sk 256 create 32 byte n exthash published transaction data n exthash form nh hash256 hash512 hash1024 p ub0 p ub1 1 obscuring keys sensitive data hash functions updating key transaction signature scheme reduces window vulnerability period making transaction transaction included ledger addresses longer tied public key account reused indefinitely maintaining maximum security conventional designs rely multiple use signature schemes secure use signature scheme outlined extremely compact adapted use hash function asymmetric cryptography 4 3 financial contracts tritium transactions longer contain utxo sets bitcoin cryptocurrencies instead tritium uses accounts tied financial contracts user xe2 x80 x99s signature chain",
    "metadata": {
      "chunk_id": "3a887d468c7156b3c95e42cd30439d01",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [
          "vulnerability"
        ],
        "financial": [],
        "operational": []
      },
      "risk_score": 11.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 11] cryptography 4 3 financial contracts tritium transactions longer contain utxo sets bitcoin cryptocurrencies instead tritium uses accounts tied financial contracts user xe2 x80 x99s signature chain substantially reduces disk memory footprint running node minimum pow required cost creating initial account signature chain decoupled structure account prevents use key easily detects conflicting transactions prevents dust spam attacks allows transaction fees removed 4 4 identity qualities immutability transparency distributed ledger considered trusted platform consensus series events 10 x0cinformation e transactions publicly verified alongside attached signature chain referenced determine certain event happened piece data accurate forms basis identity system built core layers technology linking accounts data enabling verify events ledger users identity signature chains users access account device secret information known sets stage advanced identity markers signature chains configured use",
    "metadata": {
      "chunk_id": "5827c9f24f6e15811c60c5cbd49d416e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 12] accounts data enabling verify events ledger users identity signature chains users access account device secret information known sets stage advanced identity markers signature chains configured use biometric data fingerprints retinal scans identity established osi network layer lisp endpoint identifiers eid lisp eids signature chain routing identity maintains integrity layers allows users direct p2p connections xe2 x80 x9ccryptographic identity xe2 x80 x9d attempts spoof identity prevented identities independently verified osi network layer ledger layer privacy features implemented encrypting data packets lisp network presentation layers osi stack provides robust checking balancing internet properly linking cryptography network routes 4 5 reputation mechanism xe2 x80 x9ctrust xe2 x80 x9d established mathematical equation based track record individual node mechanism functions primarily build digital xe2 x80 x9creputation xe2 x80 x9d centered series events individual nodes embarked",
    "metadata": {
      "chunk_id": "95795f376058ab0701ae4c60a94367fe",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 13] x9d established mathematical equation based track record individual node mechanism functions primarily build digital xe2 x80 x9creputation xe2 x80 x9d centered series events individual nodes embarked create reference system reputable nodes node selection bias accurate allowing nodes network verify reputation solves large issue xe2 x80 x9cproof stake xe2 x80 x9d pos consensus protocols coupling economic incentive greater trust higher returns verification non trivial cost incurred loss reputation key good reputation system lies effort required gaining reputation versus comparative ease losing reputation individual spend time resources supporting network build reputation system individual oppose collective consensus pretend certain events happened trust reduced viability xe2 x80 x9cwitnessing xe2 x80 x9d decreased 11 x0c4 6 relationships reputation system added layer protection attacks improves network xe2 x80 x99s xe2 x80 x9cbyzantine fault tolerance xe2 x80 x9d 5 reputation system",
    "metadata": {
      "chunk_id": "e16a7f2e11c290155fe5bd73b056236e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 14] xe2 x80 x9d decreased 11 x0c4 6 relationships reputation system added layer protection attacks improves network xe2 x80 x99s xe2 x80 x9cbyzantine fault tolerance xe2 x80 x9d 5 reputation system considered public image node relationship system determines nodes engage individual basis begins process selection bias nodes strengthening connections similar synapses strengthen response activity performing malicious connections pruned replaced better reliable connections strengthen resilience network adaptability allows network optimize performance measure performance time eventually nodes form private unique perspective determine xe2 x80 x9cnormal xe2 x80 x9d node interactions communications transactions behaviors allows nodes calculate validity node xe2 x80 x99s xe2 x80 x9cword xe2 x80 x9d based past events reputation coupled personal relationships node attempts attack network measured established xe2 x80 x9cnormal xe2 x80 x9d series events distinguish attacker lays foundation considered",
    "metadata": {
      "chunk_id": "5b3b67f7adace3d2390d080c593c35ce",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 15] past events reputation coupled personal relationships node attempts attack network measured established xe2 x80 x9cnormal xe2 x80 x9d series events distinguish attacker lays foundation considered immune system global network consensus mechanism network identify attack departure normal behavior neutralize sustaining damage 4 7 twin blocks current blockchain technologies blocks single channel data structure nodes build case blocks discovered simultaneously block accepted majority nodes built considered valid block incorporated ledger block abandoned known orphaned block orphaned block discovered work successfully produced block wasted tritium protocol include twin blocks reduce possibility orphan happening increase network capacity blocks height arranged chain different channels accepted valid locking conflicts blocks contain mutually opposing transactions attempted double spend begins form horizontal scaling introducing cross channel accountability multiple block verification channels",
    "metadata": {
      "chunk_id": "1a5d9ea8b3dce7b58a4b2f1058f7530e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 16] locking conflicts blocks contain mutually opposing transactions attempted double spend begins form horizontal scaling introducing cross channel accountability multiple block verification channels prime hash holding verify blocks produced 12 x0c5 register determining ownership data modern systems depends parties form trusted authority systems unable achieve global consensus provide immutability prone corruption theft arbitrary weaknesses distributed ledgers solve problems improved use data layer acts provide incontrovertible truth delegated global consensus understanding nexus advanced contract engine register based act state recording machine registers self contained objects hold data associated given signature chain published recent state easily understood following diagram diagram transactions record new states write operation register address 0x094ea32 center transaction performing write operation address 0x91edd2a data read recent state 0x094ea32 recording state nodes required",
    "metadata": {
      "chunk_id": "5222a0bb71548ebcf3d62b95f22ec97b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 17] record new states write operation register address 0x094ea32 center transaction performing write operation address 0x91edd2a data read recent state 0x094ea32 recording state nodes required satisfy validation scripts register writes read operations simple queries recent states register xe2 x80 x99s address demonstrates different methods interacting register layer 13 x0c5 1 state register state register register ledger deposits raw bytes write operation returns raw bytes read operation gives developers flexibility serialize data registers updating state ledger maintaining interpretation byte sequences logical interface layers ability means higher levels abstraction ledger incorporated putting unnecessary strain processing nodes example raw state register reference hashes specific checkpoints private databases allow easy verification data states internal systems compromising privacy especially useful systems require confidentiality medical records intellectual property ledger layer",
    "metadata": {
      "chunk_id": "9de968b99ec3712ec9f9690021c98ad0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 19] environment developers integrate distributed ledgers 6 operation operations byte level instructions perform basic tasks registers operation codes require standardization process thoroughly tested deployable scripts api layer instructions optionally compiled domain specific languages languages standards process generating series operations interact api layer perform tasks desired 14 x0c6 1 codes following codes describe basic functions operation layer 1 read operation code responsible returning contents register address submitting query network return register xe2 x80 x99s recent state 2 write operation code responsible writing data register address authors correct authorizations register read 3 debit operation perform basic subtraction available balance object register operation function claim ticket deduct funds account making transaction require counterpart add funds destination signature chain 4 credit operation perform basic addition available balance object register counterpart",
    "metadata": {
      "chunk_id": "035f509f3d0dc013dd9e5c26f3a2c0f1",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 20] claim ticket deduct funds account making transaction require counterpart add funds destination signature chain 4 credit operation perform basic addition available balance object register counterpart debit transaction sequence required fully funds signature chain proving series events leading state balance sending register 5 transfer operation transfer rights register type moving assigned permissions signature chain data transferred signature chains simply chain custody specific piece meta data record ownership copyright 6 authorize operation provide authorization token user xe2 x80 x99s register signature chain providing proof logical layer given public key valid authorized access services provided 15 x0c7 gethash operation code responsible hashing data submitted parameter example return hash data held register address providing checksum recent state said register 6 2 sanitize inputs object registers contain methods assignment operators specific data types necessary operation layer",
    "metadata": {
      "chunk_id": "a7820907e362ed15521357f60ee20cba",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 21] hash data held register address providing checksum recent state said register 6 2 sanitize inputs object registers contain methods assignment operators specific data types necessary operation layer perform role sanitizing inputs sanitizing inputs important requirement registers store specific meta data formats requires new addition fit standard template agreed process 7 api contracts hold key future distributed systems current implementations issues accuracy performance ease use limitations implementation process needlessly complicated expensive raises barriers entry leads inevitably obsolescence considering advanced contract engine accessible intuitive api set designed specifically ease use seamless integration existing software apis accessible json rest interface globally accessible network apis enable developers push pull data ledger define terms new contracts submit transactions define instance contract tokenized data specific turing complete language access end written language",
    "metadata": {
      "chunk_id": "51d26e6a5a18f1f21e90debac9744934",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 22] apis enable developers push pull data ledger define terms new contracts submit transactions define instance contract tokenized data specific turing complete language access end written language preferred developer 7 1 gateways node api gateways provide access api layers access guided gateway xe2 x80 x99s eid node act gateway advertising eid api gateway api gateway require authorization signature chain message signing key developers logical layer implement calls gateways interact lower levels software stack 16 x0c7 2 api types different industries require industry specific apis including medical copyright finance identity api function according standards set standardization process executing series operations operation layer interact registers validate states ledger 7 3 standards apis processes operational layer decided standards process regular conferences model similar internet engineering task force ietf standards request comments rfc internal standard organization iso allow",
    "metadata": {
      "chunk_id": "82bd1ba12756b3bc32e32ff6ef1a2a35",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 23] processes operational layer decided standards process regular conferences model similar internet engineering task force ietf standards request comments rfc internal standard organization iso allow businesses help define new operational methods object registers new api calls industry specific api sets consultation considered necessary successful adoption distributed ledger technology ensuring development continues meet user needs ledger evolve exacting new standards 8 logical logical layer core application space software stack applications built nexus framework use api layer interact network apply new states registers execute register operation methods authorize signature chains examples applications found appendix 8 1 state recording logical layer abstraction layer use ledger state recording machine record new states program key checkpoints main system immutable ledger reference point recent states distributed applications arbitrary data interpreted logical layer de serializing input",
    "metadata": {
      "chunk_id": "047db78ad86a830e0997cb94e6e5aec8",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [
          "fine"
        ],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 12.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 25] layer opportunity encrypting data published authorized public key record keeper signature chains requested access certain components logical layer 9 interface interface layer improve accessibility ledger layer interacting api calls operation codes major areas focus viz decoupled daemon modular design interface design simpler powerful developers focus providing intuitive responsive ui instead intricacies blockchain design 9 1 decoupled daemon currently implemented qt wallet couples graphical user interface gui actual daemon level operations creates unresponsive poor user experience nexus user interface ui standalone application running independently daemon run background allows seamless updates core software automatic reloading bootstrapping occur background minimal user interruption 9 2 modular design modular design important aspect system architecture providing robust stable software platform modules run individual processes separate main application modules developed 18 x0cto meet",
    "metadata": {
      "chunk_id": "ee8f7e20bf5915191e56e0bbee864ad0",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 27] section uses big o notation 4 depict number iterations required successfully attack given encryption 10 1 attacking nexthash sigchains explained earlier document determine n exthash nh generated nh hash256 hash512 hash1024 p ubn 2 reversed public key grover xe2 x80 x99s algorithm requiring o 2128 2256 2512 3 retrieving private key reversed n exthash signature chain require additional o 5123 iterations private key signature chain total o 2128 2256 2512 5123 4 access private key allows claim ownership signature chain associated balance nxs data number iterations illustrated astronomical number recommended cryptographic standard secret 8 makes suitable emerging quantum age 19 x0c10 2 attacking vulnerable public keys security consideration concerns ability quantum computers attack vulnerable public keys signature chains active keys obscured transaction public key published protects active keys shor xe2 x80 x99s algorithm public key published quantum computers approximately 3500 qubits",
    "metadata": {
      "chunk_id": "1fd2dc55cbe1f397749a82728946b822",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 28] public keys signature chains active keys obscured transaction public key published protects active keys shor xe2 x80 x99s algorithm public key published quantum computers approximately 3500 qubits attack public key running time o n3 quantum computer able break old public key reveal corresponding private key position attack master base hashes process generating m idhash hash512 hash1024 secreta hash1024 secretb 5 increase entropy secret input combined pseudorandom string generated previous transaction creation signature chain result hashing data points known user unknown attacker o 2256 2512 2512 6 shows master secret phrases secreta secretb secured 512 bit quantum standard 10 3 brute forcing weak secret seeds attack known dictionary attack key pair generated brute forcing inputs word list generated public key hashed compared n exthash unlocks user xe2 x80 x99s signature chain use weak username password pin ability attack dictionary attacks greatly increased weakness password 128 xc2",
    "metadata": {
      "chunk_id": "4e3f6e6acae96ffb108f558d38407e72",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 29] generated public key hashed compared n exthash unlocks user xe2 x80 x99s signature chain use weak username password pin ability attack dictionary attacks greatly increased weakness password 128 xc2 xb7216 o 2 k 7 figure variable k demonstrates relationship complexity password versus complexity dictionary attack secreta minimum entropy 128 bits secretb minimum entropy 16 bits larger word list attack greater chances successfully brute forcing seed data generates m idhash greater entropy secreta secretb chance attacker successfully find m idhash 20 x0c11 conclusion tritium protocol described document updates named tritium amine obsidian tao inspired principles modular design updates represent new stage blockchain development addresses critical issues facing existing technology bring remarkable improvements efficiency scalability security intelligent use cryptography architecture software layers power nexus magnum opus tritium upgrade register based smart contract engine engine provides",
    "metadata": {
      "chunk_id": "b87b48ec2aa0859ac854136a4ec156ad",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 30] improvements efficiency scalability security intelligent use cryptography architecture software layers power nexus magnum opus tritium upgrade register based smart contract engine engine provides opportunity directly transfer lease publish data securely utilized distributed monetized step practical efficient distributed system tailored use cases intuitive user interface comprehensive api sets tritium enables seamless integration applications upcoming release key elements tritium plenty excited 21 x0ca appendix content inclined seek details tritium protocol content reinforce written continue reading real danger computers begin think like men men begin think like computers sydney harris b update phases fundamental contract phases outlined stages tao framework update new components contracting engine released reduces overall contract complexity isolating simplest useful features allows businesses building nexus software stack input forward development outlines standards release important",
    "metadata": {
      "chunk_id": "395fbd501d1bc0fa284ece6464ff470e",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 31] engine released reduces overall contract complexity isolating simplest useful features allows businesses building nexus software stack input forward development outlines standards release important streamlining integration consumers businesses networks component complements exist isolation c applications following sections outline practical use cases posttritium development environment use cases build different aspects network ledger reputation contracts register states c 1 receive accounts incorporation advanced contracts software stack allows generation receive accounts built smart financial instruments stipulations funds received appropriation instruments prevent holder receiving funds deposited account unapproved source origin require receive signature receive account e receipt prevent funds sent invalid 22 x0caddress extrapolating smart financial instruments receive signatures expanded form multi signature contracts senders funds receive address required sign movement funds case",
    "metadata": {
      "chunk_id": "a83c83d2d0360a867222a08b21356412",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 32] funds sent invalid 22 x0caddress extrapolating smart financial instruments receive signatures expanded form multi signature contracts senders funds receive address required sign movement funds case crowd funding decentralized autonomous organizations contributors members able decide funds spent increasing accountability transparency c 2 ledger level dao decentralized autonomous organization xe2 x80 x99s dao guiding principle foundation organization wide democratic process governing funding proposals industry rife speculation xe2 x80 x9cinitial coin offerings xe2 x80 x9d icos attracting millions funding dao provides accountability transparency following example propose dao structure built nexus framework dao receive organizational signature chain xe2 x80 x9cfounders xe2 x80 x9d organization signatories data chain publish certain references laws simply rest genesis transaction making funding proposal create receive account contract stipulations requirement movement nxs collected token",
    "metadata": {
      "chunk_id": "330484d7a3aa32e23c9f573a073eda56",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 33] signatories data chain publish certain references laws simply rest genesis transaction making funding proposal create receive account contract stipulations requirement movement nxs collected token vote collective authorization seen diagram 23 x0ctoken issuer s b c diagram required propose budget initial fund raising event token holders ratify future movements tokens creates secure ledger level series organizational contracts allows businesses consumers investors function streamlined connected way nexus aims transition nexus embassy s global dao called distributed autonomous community dac honor founding principles people people details function delivered obsidian white paper c 3 tokenized data signature chains prove ownership distributed ledger publishing meta data representation token data work art logo slogan domain allocation patents copyrighted material access copyrighted material simply purchasing holding token secondary market requirements data set parameters copyright contract",
    "metadata": {
      "chunk_id": "c3bba76db6a7743d81290f0d38a7086b",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 34] work art logo slogan domain allocation patents copyrighted material access copyrighted material simply purchasing holding token secondary market requirements data set parameters copyright contract pays license fee use published data fee distributed token holders concept enable buy sell shares representing physical objects art music agreed means allowing create distribute monetize single accessible platform c 4 supply chains signature chains cryptographic identity facilitate supply chains cumbersome inefficient supply chains distributed ledger trace history products start finish providing trustworthy information standards certifications advanced contracts automate processes eliminating costly delays reducing double handling greater transparency supply chains allow consumers informed choices reward sustainable ethical practices 24 x0cd d 1 locator id separation protocol lisp level indirection addressing routing lisp operates osi network layer architecture decouples address identity",
    "metadata": {
      "chunk_id": "a1ec80ab1248a7ded5351d92dd1667ba",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 35] reward sustainable ethical practices 24 x0cd d 1 locator id separation protocol lisp level indirection addressing routing lisp operates osi network layer architecture decouples address identity address location current internet architecture ip address combines connected network lisp extends internet architecture incremental compatible way allow ip addresses come forms end point ids eids routing locators rlocs level indirection allows network overlays built eids periphery overlay rlocs routable addresses internet underlay routing system operates today performance underlay routing system remains unchanged mapping linking eids rlocs occurs entirely overlay d 2 nexus lisp nexus applications daemons run osi application layer send unicast multicast packets sent received eid addresses lisp runs osi network layer finds eids topologically located looking eid addresses mapping system mapping system decentralized distributed security scalability find rlocs eid nexus wallet miner assigned single",
    "metadata": {
      "chunk_id": "c399354bd3988e56054ca0cb2c2eb410",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 36] osi network layer finds eids topologically located looking eid addresses mapping system mapping system decentralized distributed security scalability find rlocs eid nexus wallet miner assigned single eid address nexus node multiple network interfaces assigned statically dynamically rloc address lisp registers signed mapping eid rlocs mapping system nexus node moves eid remains allocated new rlocs allocated registered lisp mapping system allows applications remain connected needing deal node mobility issues nexus nodes grouped lisp multicast groups addressed ip multicast group addresses lisp mapping system tracks authenticates location nodes overlay change physical location connection point 25 x0cd 3 layer security lisp overlay provides layer security nexus applications supporting crypto eids similar nexus wallet addresses crypto eids hashes public keys mapping system stores public keys performs lisp message verification control plane message data plane nexus packets sent overlay",
    "metadata": {
      "chunk_id": "846d9e2a711fec40645d006c34c8cfbc",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 37] eids similar nexus wallet addresses crypto eids hashes public keys mapping system stores public keys performs lisp message verification control plane message data plane nexus packets sent overlay encrypted contain packet integrity checking packets immutable eavesdropped lisp overlay makes use state art cryptographic mechanisms control plane ecdsa sha 256 digital signatures dynamic time key exchange data plane ciphersuites available packet encryption integrity verification aes cbc aes gcm chacha20 ciphers sha256 poly1305 icv hash functions elliptic curve 25519 dynamic key exchange nexus user level security allows communications remain private preventing eavesdropping peers d 4 advanced level scalability computers devices sold today multiple network interfaces usually provide redundancy wi fi interface goes lte interface nexus lisp run device network interface assigned rloc address remote nodes want communicate use rloc address load share traffic network interfaces remote node test xe2",
    "metadata": {
      "chunk_id": "4adea85b0d54e6058ff48391ded08d04",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  },
  {
    "text": "[Section 38] fi interface goes lte interface nexus lisp run device network interface assigned rloc address remote nodes want communicate use rloc address load share traffic network interfaces remote node test xe2 x80 x9dunderlay distance latency xe2 x80 x9d switch forth disproportionately send rloc versus integration nexus lisp overlay helps achieve scalability reduced network latency truly unique manner furthermore 32 bit ipv4 address network protocols unable support future growth networked devices nexus lisp overlay use 128 bit ipv6 eid addresses accommodate far devices network nexus lisp form world xe2 x80 x99s truly distributed secure scalable application infrastructure network 26 x0cd 5 open standards open source lisp began internet research task force irtf 2007 transitioned standards development internet engineering task force ietf 2009 use case development protocol extension work continues ietf lisp working group meets 3 times year vendor open source implementations available thousands",
    "metadata": {
      "chunk_id": "0f10182783d2961d2ae4d29cf08536ec",
      "entities": {
        "email": [],
        "crypto_address": []
      },
      "risk_features": {
        "regulatory": [],
        "technical": [],
        "financial": [],
        "operational": []
      },
      "risk_score": 0.0,
      "source": "Trittium.txt"
    }
  }
]